{"title":"Vue2 总结（基础）","uid":"b7312c89ee509493a26684384e3e1543","slug":"BlogRepository/Vue/Vue2 总结（基础）","date":"2022-03-28T02:38:54.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/Vue/Vue2 总结（基础）.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h1><h2 id=\"1-1-特点\"><a href=\"#1-1-特点\" class=\"headerlink\" title=\"1.1 特点\"></a>1.1 特点</h2><ol>\n<li>遵循 MVVM 模式</li>\n<li>编码简洁, 体积小, 运行效率高, 适合移动&#x2F;PC 端开发</li>\n<li>它本身只关注 UI, 也可以引入其它第三方库开发项目</li>\n</ol>\n<h2 id=\"1-2-与其它-JS-框架的关联\"><a href=\"#1-2-与其它-JS-框架的关联\" class=\"headerlink\" title=\"1.2 与其它 JS 框架的关联\"></a>1.2 与其它 JS 框架的关联</h2><ol>\n<li>借鉴 Angular 的模板和数据绑定技术</li>\n<li>借鉴 React 的组件化和虚拟 DOM 技术</li>\n</ol>\n<h2 id=\"1-3-Vue-周边库\"><a href=\"#1-3-Vue-周边库\" class=\"headerlink\" title=\"1.3 Vue 周边库\"></a>1.3 Vue 周边库</h2><ol>\n<li>vue-cli: vue 脚手架</li>\n<li>vue-resource</li>\n<li>axios</li>\n<li>vue-router: 路由</li>\n<li>vuex: 状态管理</li>\n<li>element-ui: 基于 vue 的 UI 组件库(PC 端）</li>\n</ol>\n<h1 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2. 环境配置\"></a>2. 环境配置</h1><h2 id=\"2-1-下载-devtools\"><a href=\"#2-1-下载-devtools\" class=\"headerlink\" title=\"2.1 下载 devtools\"></a>2.1 下载 devtools</h2><p>点击官网的 生态系统 –&gt; Devtools</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090638.png\"></p>\n<p>跳转到 GitHub 地址，点击 Install the extension 下载插件</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419095229.png\"></p>\n<p>选择对应的浏览器进行下载</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090656.png\"></p>\n<h2 id=\"2-2-关闭生产提示\"><a href=\"#2-2-关闭生产提示\" class=\"headerlink\" title=\"2.2 关闭生产提示\"></a>2.2 关闭生产提示</h2><p>点击官网的 学习 –&gt; API</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090709.png\"></p>\n<p>有一个全局配置 Vue.config，修改 productionTip 属性为 false</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090723.png\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\tVue.config.productionTip &#x3D; false ;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h1 id=\"3-初识-Vue\"><a href=\"#3-初识-Vue\" class=\"headerlink\" title=\"3. 初识 Vue\"></a>3. 初识 Vue</h1><h2 id=\"3-1-引入-Vue-js\"><a href=\"#3-1-引入-Vue-js\" class=\"headerlink\" title=\"3.1 引入 Vue.js\"></a>3.1 引入 Vue.js</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;!-- 引入 Vue.js --&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;title&gt;Document&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090737.png\"></p>\n<h2 id=\"3-2-使用\"><a href=\"#3-2-使用\" class=\"headerlink\" title=\"3.2 使用\"></a>3.2 使用</h2><ol>\n<li>先创建一个容器，想让 Vue 工作，就必须创建一个 Vue 实例，且传入创建好的容器对象</li>\n<li>容器里的代码依然符合 HTML 规范，只不过混入了一些特殊的 Vue 语法；</li>\n<li>容器里的代码被称为【Vue模板】</li>\n<li>Vue 实例和容器是一一对应的</li>\n<li>真实开发中只有一个 Vue 实例，并且会配合着组件一起使用</li>\n<li>容器中的插值语法 <code>&#123;&#123;xxx&#125;&#125;</code> 中的 xxx 要写 JS 表达式，且 xxx 可以自动读取到 data 中的所有属性</li>\n<li>一旦 data 中的数据发生改变，那么页面中用到该数据的地方也会自动更新</li>\n<li>注意区分：JS 表达式 和 JS 代码(语句)<ol>\n<li>JS表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：<ul>\n<li>a</li>\n<li>a+b</li>\n<li>demo(1)</li>\n<li><code>x === y ? &#39;a&#39; : &#39;b&#39;</code></li>\n</ul>\n</li>\n<li>JS 代码(语句)<ul>\n<li>if(){ }</li>\n<li>for(){ }</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;!-- 引入 Vue.js --&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;title&gt;Document&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 准备好一个容器 --&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    Hello，Vue！&#123;&#123;name&#125;&#125; &#123;&#123;Date.now()&#125;&#125;\n  &lt;&#x2F;div&gt;\n\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false; &#x2F;&#x2F; 阻止 Vue 在启动时生成生产提示。\n\n    &#x2F;&#x2F; 创建 Vue 实例\n    let vm &#x3D; new Vue(&#123;\n      el: &#39;#root&#39;, &#x2F;&#x2F; el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串\n      data:&#123; &#x2F;&#x2F; data 中用于存储数据，数据供 el 所指定的容器去使用\n        name: &#39;凡&#39;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090750.png\"></p>\n<h1 id=\"4-模板语法\"><a href=\"#4-模板语法\" class=\"headerlink\" title=\"4. 模板语法\"></a>4. 模板语法</h1><p>Vue 模板语法有 2 大类：</p>\n<ol>\n<li><strong>插值语法：</strong><br>功能：用于<strong>解析标签体内容</strong><br>写法：**<code>&#123;&#123;xxx&#125;&#125;</code>**，xxx 是 JS 表达式，且可以直接读取到 data 中的所有属性</li>\n<li><strong>指令语法：</strong><br>功能：用于<strong>解析标签</strong>（包括：标签属性、标签体内容、绑定事件…..）<br>举例：<code>v-bind:href=&quot;xxx&quot;</code> 或简写为 <code>:href=&quot;xxx&quot;</code>，xxx 同样要写 JS 表达式，且可以直接读取到 data 中的所有属性<br>备注：Vue 中有很多的指令，且形式都是：<strong>v-???</strong></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 准备好一个容器 --&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    Hello，Vue！ &#123;&#123;name&#125;&#125; &#123;&#123;Date.now()&#125;&#125; &lt;br&gt;\n    &lt;a v-bind:href&#x3D;&quot;blog.url.toUpperCase()&quot;&gt;点击去&#123;&#123;blog.name&#125;&#125; &lt;&#x2F;a&gt;\n    &lt;a :href&#x3D;&quot;blog.url&quot;&gt;点击去&#123;&#123;blog.name&#125;&#125; &lt;&#x2F;a&gt;\n  &lt;&#x2F;div&gt;\n\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false; &#x2F;&#x2F;阻止 Vue 在启动时生成生产提示。\n\n    &#x2F;&#x2F; 创建 Vue 实例\n    let vm &#x3D; new Vue(&#123;\n      el: &#39;#root&#39;, &#x2F;&#x2F; el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串\n      data:&#123; &#x2F;&#x2F; data 中用于存储数据，数据供 el 所指定的容器去使用\n        name: &#39;凡&#39;,\n        blog: &#123;\n          name: &#39;Fan\\&#39;s Blog&#39;,\n          url: &#39;https:&#x2F;&#x2F;blog.fan223.cn&#39;\n        &#125;\n      &#125;\n    &#125;);\n    &#x2F;&#x2F; vm.$mount(&#39;#root&#39;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090810.png\"></p>\n<ol>\n<li><strong>el 的两种写法</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 第一种\nlet vm &#x3D; new Vue(&#123;\n  el: &#39;#root&#39;, &#x2F;&#x2F; el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串\n  &#125;\n&#125;);\n&#x2F;&#x2F; 第二种\nlet vm &#x3D; new Vue(&#123;\n&#125;);\nvue.$mount(&#39;#root&#39;);</code></pre></li>\n<li><strong>data 的两种写法</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 第一种 对象式\nlet vm &#x3D; new Vue(&#123;\n  data:&#123; &#x2F;&#x2F; data 中用于存储数据，数据供 el 所指定的容器去使用\n    name: &#39;凡&#39;,\n    blog: &#123;\n      name: &#39;Fan\\&#39;s Blog&#39;,\n      url: &#39;https:&#x2F;&#x2F;blog.fan223.cn&#39;\n    &#125;\n  &#125;\n&#125;);\n&#x2F;&#x2F; 第二种 函数式，在使用组件时，必须使用函数式，不然会报错\n&#x2F;&#x2F; 同时由 Vue 管理的函数不能用箭头函数 data:() &#x3D;&gt; &#123; &#125;，不然 this 不再是 Vue 实例，而是全局 Window 对象\nlet vm &#x3D; new Vue(&#123;\n  &#x2F;&#x2F; data: function()&#123;\n  &#x2F;&#x2F; data:() &#x3D;&gt; &#123; 箭头函数\n  data()&#123;\n    return &#123;\n      name: &#39;凡&#39;,\n      blog: &#123;\n        name: &#39;Fan\\&#39;s Blog&#39;,\n        url: &#39;https:&#x2F;&#x2F;blog.fan223.cn&#39;\n      &#125;\n    &#125;\n  &#125;\n&#125;);</code></pre></li>\n</ol>\n<h1 id=\"5-数据绑定\"><a href=\"#5-数据绑定\" class=\"headerlink\" title=\"5. 数据绑定\"></a>5. 数据绑定</h1><p>Vue 中有 2 种数据绑定的方式：</p>\n<ol>\n<li>单向绑定(v-bind)：数据只能从 data 流向页面，<strong>data 改变，页面会发生改变；页面改变，但 data 不会改变</strong></li>\n<li>双向绑定(v-model)：数据不仅能从 data 流向页面，还可以从页面流向 data，<strong>任意改变一个，都会发生改变</strong></li>\n<li>备注：<ol>\n<li><strong>双向绑定一般都应用在表单类元素上</strong>（如：input、select 等）</li>\n<li>v-model:value 可以简写为 v-model，因为 v-model 默认收集的就是 value 值</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 准备好一个容器 --&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; :value&#x3D;&quot;blog.name&quot; &gt; &lt;br&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; v-model&#x3D;&quot;blog.name&quot; &gt;\n  &lt;&#x2F;div&gt;\n\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false; &#x2F;&#x2F; 阻止 Vue 在启动时生成生产提示。\n\n    &#x2F;&#x2F; 创建 Vue 实例\n    let vm &#x3D; new Vue(&#123;\n      el: &#39;#root&#39;, &#x2F;&#x2F; el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串\n      data:&#123; &#x2F;&#x2F; data 中用于存储数据，数据供 el 所指定的容器去使用\n        name: &#39;凡&#39;,\n        blog: &#123;\n          name: &#39;Fan\\&#39;s Blog&#39;,\n          url: &#39;https:&#x2F;&#x2F;blog.fan223.cn&#39;\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090824.png\"></p>\n<h1 id=\"6-MVVM-模型\"><a href=\"#6-MVVM-模型\" class=\"headerlink\" title=\"6. MVVM 模型\"></a>6. MVVM 模型</h1><ol>\n<li>M：模型(Model) ：对应 data 中的数据</li>\n<li>V：视图(View) ：模板</li>\n<li>VM：视图模型(ViewModel) ： Vue 实例对象</li>\n</ol>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090836.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090850.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090902.png\"></p>\n<p><strong>vm 身上所有的属性 及 Vue 原型上所有属性，在 Vue 模板中都可以直接使用</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090917.png\"></p>\n<p><strong>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</strong></p>\n<h2 id=\"7-1-Object-defineProperty-方法\"><a href=\"#7-1-Object-defineProperty-方法\" class=\"headerlink\" title=\"7.1 Object.defineProperty() 方法\"></a>7.1 Object.defineProperty() 方法</h2><h3 id=\"7-1-1-作用\"><a href=\"#7-1-1-作用\" class=\"headerlink\" title=\"7.1.1 作用\"></a>7.1.1 作用</h3><p>直接在一个对象上定义新属性，或者修改已经存在的属性</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let person &#x3D; &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n    &#125;\n\n    Object.defineProperty(person, &#39;age&#39;,&#123;\n      value: 18,\n    &#125;);\n    console.log(person)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090932.png\"></p>\n<p>其中，直接写在 person 中的属性是可以被枚举的，即可遍历的，而 <code>Object.defineProperty()</code> 方法定义的属性不能被枚举，同时也不能被修改和删除</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Object.keys(person));\n&#x2F;&#x2F; 或\nfor (const key in person) &#123;\n  if (Object.hasOwnProperty.call(person, key)) &#123;\n\tconsole.log(&#39;@&#39;, person[key])\n  &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090945.png\"></p>\n<h3 id=\"7-1-2-开启控制属性\"><a href=\"#7-1-2-开启控制属性\" class=\"headerlink\" title=\"7.1.2 开启控制属性\"></a>7.1.2 开启控制属性</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;body&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let person &#x3D; &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n    &#125;\n\n    Object.defineProperty(person, &#39;age&#39;,&#123;\n      value: 18,\n      enumerable: true,   &#x2F;&#x2F; 控制属性是否可以枚举，默认值是 false\n      writable: true,     &#x2F;&#x2F; 控制属性是否可以被修改，默认值是 false\n\t  configurable: true, &#x2F;&#x2F; 控制属性是否可以被删除，默认值是 false\n    &#125;);\n    console.log(Object.keys(person))\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419090957.png\"></p>\n<h3 id=\"7-1-3-get-和-set-方法（核心）\"><a href=\"#7-1-3-get-和-set-方法（核心）\" class=\"headerlink\" title=\"7.1.3 get() 和 set() 方法（核心）\"></a>7.1.3 get() 和 set() 方法（核心）</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let number &#x3D; 18;\n    let person &#x3D; &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n      age: number,\n    &#125;\n    console.log(Object.keys(person))\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>当使用一个变量为 age 赋值时，当修改变量的值，age 并不会发生改变</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091016.png\"></p>\n<p>使用 get() 和 set() 方法对值进行同步修改</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let number &#x3D; 18;\n    let person &#x3D; &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n    &#125;\n\n    Object.defineProperty(person, &#39;age&#39;,&#123;\n      &#x2F;&#x2F; 当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值\n\t  get()&#123;\n\t\tconsole.log(&#39;有人读取age属性了&#39;)\n\t\treturn number\n\t  &#125;,\n\n\t  &#x2F;&#x2F; 当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值\n\t  set(value)&#123;\n\t\tconsole.log(&#39;有人修改了age属性，且值是&#39;,value)\n\t\tnumber &#x3D; value\n\t  &#125;\n    &#125;);\n    console.log(Object.keys(person))\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091031.png\"></p>\n<h2 id=\"7-2-简单示例\"><a href=\"#7-2-简单示例\" class=\"headerlink\" title=\"7.2 简单示例\"></a>7.2 简单示例</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\tlet obj1 &#x3D; &#123;x: 100&#125;;\n\tlet obj2 &#x3D; &#123;y: 200&#125;;\n\n\tObject.defineProperty(obj2, &#39;x&#39;,&#123;\n\n\t  get()&#123;\n\t\treturn obj1.x;\n\t  &#125;,\n\n\t  set(value)&#123;\n\t\tobj1.x &#x3D; value;\n\t  &#125;\n\t&#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>通过 obj2 代理的 obj1 的值，使用 obj2 对 ojb1 的值进行修改</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091041.png\"></p>\n<h2 id=\"7-3-Vue-中的数据代理\"><a href=\"#7-3-Vue-中的数据代理\" class=\"headerlink\" title=\"7.3 Vue 中的数据代理\"></a>7.3 Vue 中的数据代理</h2><p><img src=\"http://img.fan223.cn/2023/04/20230419091053.png\"></p>\n<ol>\n<li>通过 vm 对象来代理 data 对象中属性的操作（读&#x2F;写），vm 中的 _data 即为 data 对象，vm._data &#x3D;&#x3D;&#x3D; data</li>\n<li>Vue 中数据代理的好处：更加方便的操作 data 中的数据</li>\n<li>基本原理：<ol>\n<li>通过 <code>Object.defineProperty()</code> 把 data 对象中所有属性添加到 vm 上</li>\n<li>为每一个添加到 vm 上的属性，都指定一个 getter&#x2F;setter</li>\n<li>在 getter&#x2F;setter 内部去操作（读&#x2F;写）data 中对应的属性</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;姓名：&#123;&#123;name&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;h1&gt;地址：&#123;&#123;address&#125;&#125; &lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false; &#x2F;&#x2F; 阻止 vue 在启动时生成生产提示\n\n    let vm &#x3D; new Vue(&#123;\n      el: &#39;#root&#39;,\n      data() &#123;\n        return &#123;\n          name: &#39;张三&#39;,\n          address: &#39;长沙&#39;,\n        &#125;\n      &#125;\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>修改 name 属性的值，页面会即时变化</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091104.png\"></p>\n<h1 id=\"8-事件管理\"><a href=\"#8-事件管理\" class=\"headerlink\" title=\"8. 事件管理\"></a>8. 事件管理</h1><h2 id=\"8-1-基本使用\"><a href=\"#8-1-基本使用\" class=\"headerlink\" title=\"8.1 基本使用\"></a>8.1 基本使用</h2><ol>\n<li>使用 <code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，其中 xxx 是事件名</li>\n<li>事件的回调需要配置在 methods 对象中，最终会在 vm 上</li>\n<li>methods 中配置的函数，不要用箭头函数！否则 this 就不是 vm 了</li>\n<li>methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是vm 或 组件实例对象；</li>\n<li><code>@click=&quot;demo&quot;</code> 和 <code>@click=&quot;demo($event)&quot;</code>  效果一致，但后者可以传参</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;姓名：&#123;&#123;name&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;button v-on:click&#x3D;&quot;showInfo1&quot;&gt;点击提示信息1（不传参）&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showInfo2(77, $event)&quot;&gt;点击提示信息2（传参）&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n\n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data() &#123;\n        return &#123;\n          name: &quot;张三&quot;,\n        &#125;\n      &#125;,\n      methods: &#123;\n        showInfo1(event)&#123;\n          alert(&quot;info&quot;);\n        &#125;,\n        showInfo2(number, event)&#123;\n          alert(number);\n          console.log(event)\n          console.log(event.target.innerText);\n        &#125;\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>点击第一个事件：</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091123.png\"></p>\n<p><strong>点击第二个事件：</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091137.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091151.png\"></p>\n<h2 id=\"8-2-事件修饰符\"><a href=\"#8-2-事件修饰符\" class=\"headerlink\" title=\"8.2 事件修饰符\"></a>8.2 事件修饰符</h2><h3 id=\"8-2-1-prevent-阻止默认事件（常用）\"><a href=\"#8-2-1-prevent-阻止默认事件（常用）\" class=\"headerlink\" title=\"8.2.1 prevent 阻止默认事件（常用）\"></a>8.2.1 prevent 阻止默认事件（常用）</h3><p>点击链接会跳转到 href 里的地址，但是加上点击事件之后希望阻止原来的默认跳转事件，只发生点击事件，不发生跳转。两种方式</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot; @click&#x3D;&quot;showInfo1&quot;&gt;跳转到1&lt;&#x2F;a&gt;\n\t    &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot; @click.prevent&#x3D;&quot;showInfo2&quot;&gt;跳转到2&lt;&#x2F;a&gt;\n\t&lt;&#x2F;div&gt;\n\t  \n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods: &#123;\n\t        showInfo1(event)&#123;\n\t          event.preventDefault();\n\t          alert(&quot;info1&quot;);\n\t        &#125;,\n\t        showInfo2(event)&#123;\n\t          alert(&quot;info2&quot;);\n\t        &#125;,\n\t      &#125;,\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>只发生点击事件，点击确定后，不发生跳转</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419095252.png\"></p>\n<h3 id=\"8-2-2-stop-阻止事件冒泡（常用）\"><a href=\"#8-2-2-stop-阻止事件冒泡（常用）\" class=\"headerlink\" title=\"8.2.2 stop 阻止事件冒泡（常用）\"></a>8.2.2 stop 阻止事件冒泡（常用）</h3><p>在发生 button 里的点击事件后，会冒泡到 div 的点击事件。现在想让 button 里的点击事件发生后不会冒泡到发生 div 的点击事件。两种方式。可以与其他修饰符连用，如阻止事件冒泡并阻止默认事件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;div class&#x3D;&quot;demo01&quot; @click&#x3D;&quot;showInfo1&quot;&gt;\n\t        &lt;!-- &lt;button @click&#x3D;&quot;showInfo2&quot;&gt;点击提示信息&lt;&#x2F;button&gt; --&gt;\n            &lt;button @click.stop&#x3D;&quot;showInfo2&quot;&gt;点击提示信息&lt;&#x2F;button&gt;\n            &lt;button href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot; @click.stop.prevent&#x3D;&quot;showInfo2&quot;&gt;点击提示信息&lt;&#x2F;button&gt;\n\t    &lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods: &#123;\n\t        showInfo1(event)&#123;\n\t          alert(&quot;info1&quot;);\n\t        &#125;,\n\t        showInfo2(event)&#123;\n\t          &#x2F;&#x2F; event.stopPropagation();\n\t          alert(&quot;info2&quot;);\n\t        &#125;,\n\t      &#125;,\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>点击 button，先发生 button 的事件，弹出 info2，然后会冒泡到 div 的事件，弹出 info1</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091203.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091214.png\"></p>\n<h3 id=\"8-2-3-once-事件只触发一次（常用）\"><a href=\"#8-2-3-once-事件只触发一次（常用）\" class=\"headerlink\" title=\"8.2.3 once 事件只触发一次（常用）\"></a>8.2.3 once 事件只触发一次（常用）</h3><p>一个事件，只想让第一次才生效，后面该事件不再生效</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;button @click.once&#x3D;&quot;showInfo1&quot;&gt;点击提示信息&lt;&#x2F;button&gt;\n\t&lt;&#x2F;div&gt;\n\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods: &#123;\n\t        showInfo1(event)&#123;\n\t          alert(&quot;info1&quot;);\n\t        &#125;\n\t      &#125;,\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>第一次点击会有弹窗，但后面再点击不会弹窗</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091226.png\"></p>\n<h3 id=\"8-2-4-capture-使用事件的捕获模式\"><a href=\"#8-2-4-capture-使用事件的捕获模式\" class=\"headerlink\" title=\"8.2.4 capture 使用事件的捕获模式\"></a>8.2.4 capture 使用事件的捕获模式</h3><p>事件是先进行捕获，由外到内，由 div1 –&gt; div2；但事件发生是在冒泡，是由内到外，div2 –&gt; div1，现在想让事件在捕获阶段就发生</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;div class&#x3D;&quot;box1&quot; @click&#x3D;&quot;showMsg(&#39;div1&#39;)&quot;&gt;\n\t      div1\n\t      &lt;div class&#x3D;&quot;box2&quot; @click&#x3D;&quot;showMsg(&#39;div2&#39;)&quot;&gt;\n\t        div2\n\t      &lt;&#x2F;div&gt;\n\t    &lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods: &#123;\n\t        showMsg(msg)&#123;\n\t          console.log(msg);\n\t        &#125;,\n\t      &#125;,\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>点击 div2，会先发生 div2，再冒泡到 div1 发生</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091246.png\"></p>\n<p>让事件在捕获阶段就发生，点击 div2，先捕获到 div1 发生div1，在捕获到div2</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091302.png\"></p>\n<h3 id=\"8-2-5-self-只有-event-target-是当前操作的元素时才触发事件\"><a href=\"#8-2-5-self-只有-event-target-是当前操作的元素时才触发事件\" class=\"headerlink\" title=\"8.2.5 self 只有 event.target 是当前操作的元素时才触发事件\"></a>8.2.5 self 只有 event.target 是当前操作的元素时才触发事件</h3><p>当 button 事件发生后，会冒泡到 div，但此时并不是 div 在操作该事件，是 button 冒泡过来的。self 保证只有 event.target 是当前操作的元素时才触发事件，冒泡不会生效</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;div class&#x3D;&quot;demo01&quot; @click.self&#x3D;&quot;showInfo1&quot;&gt;\n        &lt;button @click&#x3D;&quot;showInfo2&quot;&gt;点击提示信息&lt;&#x2F;button&gt;\n\t    &lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods: &#123;\n\t        showInfo1(event)&#123;\n\t          alert(&quot;info1&quot;);\n\t        &#125;,\n\t        showInfo2(event)&#123;\n\t          alert(&quot;info2&quot;);\n\t        &#125;,\n\t      &#125;,\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>只会发生 button 的事件，冒泡到 div 时，由于操作的元素不是 div，所以事件不会发生</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091321.png\"></p>\n<h3 id=\"8-2-6-passive-事件的默认行为立即执行，无需等待事件回调执行完毕\"><a href=\"#8-2-6-passive-事件的默认行为立即执行，无需等待事件回调执行完毕\" class=\"headerlink\" title=\"8.2.6 passive 事件的默认行为立即执行，无需等待事件回调执行完毕\"></a>8.2.6 passive 事件的默认行为立即执行，无需等待事件回调执行完毕</h3><p>当事件发生时，会先调用事件绑定的函数方法，等方法执行完成后再发生事件。现在想让事件立即响应，无需等待方法执行完成</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;head&gt;\n   &lt;style&gt;\n     .list&#123;\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tbackground-color: peru;\n\t\toverflow: auto;  &#x2F;* 宽度不够元素溢出，形成滚动条 *&#x2F;\n\t  &#125;\n\t  li&#123;\n\t\theight: 100px;\n\t  &#125;\n   &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\t&lt;!-- &lt;ul @scroll&#x3D;&quot;demo&quot; class&#x3D;&quot;list&quot;&gt; --&gt;\n      &lt;ul @wheel&#x3D;&quot;demo&quot; class&#x3D;&quot;list&quot;&gt;\n\t    &lt;ul class&#x3D;&quot;list&quot;&gt;\n        &lt;li&gt;1&lt;&#x2F;li&gt;\n        &lt;li&gt;2&lt;&#x2F;li&gt;\n        &lt;li&gt;3&lt;&#x2F;li&gt;\n        &lt;li&gt;4&lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods: &#123;\n\t        demo()&#123;\n            console.log(&quot;@&quot;)\n          &#125;\n\t      &#125;,\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<ol>\n<li><p>scroll 滚动条滚动<br>当滚动条发生移动时，会产生变化，移动到底时由于滚动条不会变使用不会发生变化，但上下移动会发生变化<br><img src=\"http://img.fan223.cn/2023/04/20230419091334.png\"></p>\n</li>\n<li><p>wheel 滚轮滚动<br>只要滚轮移动时，就会发生变化，用鼠标拖动滚动条或上下光标移动滚动条，由于滚轮未移动，不会发生变化。到底之后移动滚轮，虽然滚动条没动但由于滚轮移动，也会发生变化</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091345.png\"></p>\n</li>\n</ol>\n<p>修改一下事件的函数方法，使用 wheel 时，会先等方法执行完毕再发生滚动，使用 scroll 时，会发生滚动，同时方法也在执行，只有等方法执行完之后才能进行下一次滚动操作</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;!-- &lt;ul @scroll&#x3D;&quot;demo&quot; class&#x3D;&quot;list&quot;&gt; --&gt;\n      &lt;ul @wheel.passive&#x3D;&quot;demo&quot; class&#x3D;&quot;list&quot;&gt;\n        &lt;li&gt;1&lt;&#x2F;li&gt;\n        &lt;li&gt;2&lt;&#x2F;li&gt;\n        &lt;li&gt;3&lt;&#x2F;li&gt;\n        &lt;li&gt;4&lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods:&#123;\n\t\t\tdemo()&#123;\n\t\t\t\tfor (let i &#x3D; 0; i &lt; 100000; i++) &#123;\n\t\t\t\t\tconsole.log(&#39;#&#39;)\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>让滚动操作无需等待方法执行完成才进行操作</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091357.png\"></p>\n<h2 id=\"8-3-按键修饰符\"><a href=\"#8-3-按键修饰符\" class=\"headerlink\" title=\"8.3 按键修饰符\"></a>8.3 按键修饰符</h2><ol>\n<li><p>Vue中常用的按键别名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>回车 &#x3D;&gt; enter<br>删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)<br>退出 &#x3D;&gt; esc<br>空格 &#x3D;&gt; space<br>换行 &#x3D;&gt; tab (特殊，必须配合 keydown 去使用)<br>上 &#x3D;&gt; up<br>下 &#x3D;&gt; down<br>左 &#x3D;&gt; left<br>右 &#x3D;&gt; right</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t    &lt;!-- &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup&#x3D;&quot;showInfo&quot;&gt; --&gt;\n\t    &lt;!-- 进行判断，只有读取到回车才进行打印输出，否则每一次按键都会输出内容 --&gt;\n\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.enter&#x3D;&quot;showInfo&quot;&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods:&#123;\n\t        showInfo(event)&#123;\n\t        \t&#x2F;&#x2F; 进行判断，只有读取到回车才进行打印输出，否则每一次按键都会输出内容\n\t\t\t\t&#x2F;&#x2F; if(event.keyCode !&#x3D;&#x3D; 13) return;\n\t\t\t\tconsole.log(event.target.value);\n\t\t\t&#125;\n\t\t  &#125;\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091409.png\"><br><img src=\"http://img.fan223.cn/2023/04/20230419091418.png\"></p>\n</li>\n<li><p>Vue 未提供别名的按键，可以使用按键原始的 Key 值去绑定，但多个单词组成的 Key 要转为 kebab-case（短横线命名）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup&#x3D;&quot;showInfo&quot;&gt;\n\t\t&lt;!-- 按下 CapsLock 键输出值，由多个单词组成，需要转换 --&gt;\n\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.caps-lock&#x3D;&quot;showInfo1&quot;&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods:&#123;\n          \tshowInfo(event)&#123;\n\t\t\t\tconsole.log(event.key, event.keyCode);\n\t\t\t&#125;,\n\t\t\tshowInfo1(event)&#123;\n\t\t\t\tconsole.log(event.target.value);\n\t\t\t&#125;\n\t\t  &#125;\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091441.png\"></p>\n</li>\n<li><p>系统修饰键（用法特殊）：ctrl、alt、shift、meta（win）<br>配合 keyup 使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br>配合 keydown 使用：正常触发事件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 按下 Ctrl 键，再按下任意其他键并释放即可使用 --&gt;\n&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.ctrl&#x3D;&quot;showInfo&quot;&gt;\n&lt;!-- 只能按下 Ctrl + y 然后释放才可使用 --&gt;\n&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.ctrl.y&#x3D;&quot;showInfo&quot;&gt;</code></pre></li>\n<li><p>也可以使用 keyCode 去指定具体的按键（不推荐）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.13&#x3D;&quot;showInfo&quot;&gt;</code></pre></li>\n<li><p>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n\t&lt;div id&#x3D;&quot;root&quot;&gt;\n\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keyup.huiche&#x3D;&quot;showInfo&quot;&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\t    Vue.config.productionTip &#x3D; false;\n\t\tVue.config.keyCodes.huiche &#x3D; 13; &#x2F;&#x2F; 自定义按键别名\n\n\t    let vm &#x3D; new Vue(&#123;\n\t      el: &quot;#root&quot;,\n\t      methods:&#123;\n          \tshowInfo(event)&#123;\n\t\t\t\tconsole.log(event.target.value);\n\t\t\t&#125;,\n\t\t  &#125;\n\t    &#125;);\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre></li>\n</ol>\n<h1 id=\"9-计算属性和侦听器\"><a href=\"#9-计算属性和侦听器\" class=\"headerlink\" title=\"9. 计算属性和侦听器\"></a>9. 计算属性和侦听器</h1><h2 id=\"9-1-计算属性-computed\"><a href=\"#9-1-计算属性-computed\" class=\"headerlink\" title=\"9.1 计算属性 computed\"></a>9.1 计算属性 computed</h2><ol>\n<li><strong>定义：</strong> 要用的属性不存在，要通过<strong>已有属性计算得来</strong></li>\n<li><strong>原理：</strong> 底层借助了 Objcet.defineproperty 方法提供的 getter 和 setter</li>\n<li><strong>get() 函数什么时候执行？</strong><ol>\n<li>初次读取时会执行一次。</li>\n<li><strong>当依赖的数据发生改变时会被再次调用</strong></li>\n</ol>\n</li>\n<li>优势：<strong>与 methods 实现相比，内部有缓存机制（复用），效率更高，调试方便</strong></li>\n<li>备注：<ol>\n<li>计算属性最终会出现在 vm 上，直接读取使用即可</li>\n<li>如果<strong>计算属性要被修改，那必须写 set 函数去响应修改</strong>，且 set 中要引起计算时依赖的数据发生改变</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot; &gt; &lt;br&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot; &gt;&lt;br&gt;\n    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        firstName: &#39;李&#39;,\n        lastName: &#39;四&#39;\n      &#125;,\n      &#x2F;&#x2F; 简写，只考虑读取的时候，fullName() 相当于直接 get()\n      &#x2F;&#x2F; computed: &#123;\n      &#x2F;&#x2F;   fullName()&#123;\n      &#x2F;&#x2F;     return this.firstName + &#39;-&#39; + this.lastName;\n      &#x2F;&#x2F;   &#125;\n      &#x2F;&#x2F; &#125;\n      computed: &#123;\n        fullName: &#123;\n          get()&#123;\n            return this.firstName + &#39;-&#39; + this.lastName;\n          &#125;,\n          set(value)&#123;\n            let arr &#x3D; value.split(&quot;-&quot;);\n            this.firstName &#x3D; arr[0];\n            this.lastName &#x3D; arr[1];\n          &#125;\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>通过姓和名计算出全名，修改全名的同时修改姓和名</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091510.png\"></p>\n<h2 id=\"9-2-侦听器（监视属性）watch\"><a href=\"#9-2-侦听器（监视属性）watch\" class=\"headerlink\" title=\"9.2 侦听器（监视属性）watch\"></a>9.2 侦听器（监视属性）watch</h2><ol>\n<li>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</li>\n<li>监视的属性必须存在，才能进行监视！！</li>\n<li>监视的两种写法：<ol>\n<li>new Vue 时传入 watch 配置</li>\n<li>通过 vm.$watch 监视</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;今天天气很&#123;&#123;info&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;button @click&#x3D;&quot;changeWeather&quot;&gt;切换天气&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        isHot: true\n      &#125;,\n      computed: &#123;\n        info()&#123;\n          return this.isHot ? &#39;炎热&#39; : &#39;凉爽&#39;\n        &#125;\n      &#125;,\n      methods: &#123;\n        changeWeather()&#123;\n          this.isHot &#x3D; !this.isHot\n        &#125;\n      &#125;,\n      &#x2F;&#x2F; watch: &#123;\n      &#x2F;&#x2F;   isHot: &#123;\n      &#x2F;&#x2F;     immediate: true,\n      &#x2F;&#x2F;     handler(newValue, oldValue)&#123;\n      &#x2F;&#x2F;       console.log(&#39;isHost被修改了&#39;, newValue, oldValue)\n      &#x2F;&#x2F;     &#125;\n      &#x2F;&#x2F;   &#125;\n      &#x2F;&#x2F; &#125;\n      &#x2F;&#x2F; 简写，只考虑 handler() 的时候，isHot() 相当于直接 handler()\n      &#x2F;&#x2F;  isHot(newValue,oldValue)&#123;\n      &#x2F;&#x2F;    console.log(&#39;isHot 被修改了&#39;, newValue, oldValue)\n      &#x2F;&#x2F;  &#125;\n      &#x2F;&#x2F;&#125;\n    &#125;);\n\n    vm.$watch(&#39;isHot&#39;, &#123;\n      immediate: true,\n      handler(newValue, oldValue)&#123;\n        console.log(&#39;isHost被修改了&#39;, newValue, oldValue)\n      &#125;\n    &#125;)\n    &#x2F;&#x2F; 简写\n\t&#x2F;* vm.$watch(&#39;isHot&#39;,function(newValue,oldValue)&#123;\n      console.log(&#39;isHot被修改了&#39;,newValue,oldValue, this)\n    &#125;) *&#x2F;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>初始化的时候会调用一次监视的 handler 方法，随后点击切换天气，改变了 isHot 的值，都会被监视到，调用监视方法</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091524.png\"></p>\n<h2 id=\"9-3-深度监视\"><a href=\"#9-3-深度监视\" class=\"headerlink\" title=\"9.3 深度监视\"></a>9.3 深度监视</h2><ol>\n<li><p>Vue中的 watch 默认不监测对象内部值的改变（一层）</p>\n</li>\n<li><p>配置 deep:true 可以监测对象内部值改变（多层）</p>\n</li>\n<li><p>备注：</p>\n<ul>\n<li>Vue 自身可以监测对象内部值的改变，但 Vue 提供的 watch 默认不可以！</li>\n<li>使用 watch 时根据数据的具体结构，决定是否采用深度监视</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h3&gt;a的值是:&#123;&#123;numbers.a&#125;&#125;&lt;&#x2F;h3&gt;\n\t\t&lt;button @click&#x3D;&quot;numbers.a++&quot;&gt;点我让a+1&lt;&#x2F;button&gt;\n\t\t&lt;h3&gt;b的值是:&#123;&#123;numbers.b&#125;&#125;&lt;&#x2F;h3&gt;\n\t\t&lt;button @click&#x3D;&quot;numbers.b++&quot;&gt;点我让b+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        numbers:&#123;\n\t\t\t\t\ta:1,\n\t\t\t\t\tb:1\n\t\t\t\t&#125;\n      &#125;,\n      watch: &#123;\n        numbers: &#123;\n          deep: true,\n          handler()&#123;\n            console.log(&quot;numbers 改变了！&quot;);\n          &#125;\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>点击 a+1 或 b+1，numbers 内部的属性值发生了改变，watch 监视 numbers 默认不监测其内部属性的改变，需要开启，之后 numbers 内部任意属性发生改变都会被检测</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091537.png\"></p>\n<h2 id=\"9-4-computed-和-watch-之间的区别\"><a href=\"#9-4-computed-和-watch-之间的区别\" class=\"headerlink\" title=\"9.4 computed 和 watch 之间的区别\"></a>9.4 computed 和 watch 之间的区别</h2><ol>\n<li>computed 能完成的功能，watch 都可以完成。</li>\n<li>watch 能完成的功能，computed 不一定能完成，如：watch 可以进行异步操作</li>\n<li>两个重要的原则：<ol>\n<li>所<strong>被 Vue 管理的函数，最好写成普通函数</strong>，这样 this 的指向才是 vm 或 组件实例对象</li>\n<li>所有<strong>不被Vue所管理的函数（定时器的回调函数、ajax 的回调函数等、Promise 的回调函数），最好写成箭头函数</strong>，这样 this 的指向才是 vm 或 组件实例对象</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot; &gt; &lt;br&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot; &gt; &lt;br&gt;\n    全名：&#123;&#123;fullName&#125;&#125;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        firstName: &#39;张&#39;,\n        lastName: &#39;三&#39;,\n        fullName: &#39;张-三&#39;\n      &#125;,\n      watch: &#123;\n        firstName(val)&#123;\n          setTimeout(() &#x3D;&gt; &#123;\n            console.log(this);\n            this.fullName &#x3D; val + this.lastName;\n          &#125;, 1000);\n        &#125;,\n        lastName(val)&#123;\n          setTimeout(() &#x3D;&gt; &#123;\n            console.log(this);\n            this.fullName &#x3D; this.firstName + val;\n          &#125;, 1000);\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>输入之后，延迟一秒显示全名，这里的 timeout 回调函数，直接使用 function 的话 this 代表 Window，要使用箭头函数，箭头函数没有自己的 this，而是会继承上层作用域的 this，往上找到监视属性，此时的 this 代表 vm 或组件示例对象</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091552.png\"></p>\n<h1 id=\"10-Class-与-Style-绑定\"><a href=\"#10-Class-与-Style-绑定\" class=\"headerlink\" title=\"10. Class 与 Style 绑定\"></a>10. Class 与 Style 绑定</h1><h2 id=\"10-1-Class-绑定\"><a href=\"#10-1-Class-绑定\" class=\"headerlink\" title=\"10.1 Class 绑定\"></a>10.1 Class 绑定</h2><h3 id=\"10-1-1-直接加-Class\"><a href=\"#10-1-1-直接加-Class\" class=\"headerlink\" title=\"10.1.1 直接加 Class\"></a>10.1.1 直接加 Class</h3><p>先编写好 Clss 对应的样式</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>基础样式 basic：</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091604.png\"></p>\n<p><strong>直接加一个样式：</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic normal&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091616.png\"></p>\n<p><strong>再加一个样式：</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic normal happy&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091628.png\"></p>\n<h3 id=\"10-1-2-字符串写法\"><a href=\"#10-1-2-字符串写法\" class=\"headerlink\" title=\"10.1.2 字符串写法\"></a>10.1.2 字符串写法</h3><p><strong>适用于：样式的类名不确定，需要动态指定</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;mood&quot; @click&#x3D;&quot;changeMood&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        mood: &#39;normal&#39;\n      &#125;,\n      methods: &#123;\n        changeMood()&#123;\n          &#x2F;&#x2F; let arr &#x3D; [&#39;normal&#39;, &#39;happy&#39;, &#39;sad&#39;];\n          &#x2F;&#x2F; let index &#x3D; Math.floor(Math.random() * 3);\n          &#x2F;&#x2F; this.mood &#x3D; arr[index];\n          this.mood &#x3D; &#39;happy&#39;;\n        &#125;\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091638.png\"></p>\n<p><strong>点击后随机切换</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091711.png\"></p>\n<h3 id=\"10-1-3-数组写法\"><a href=\"#10-1-3-数组写法\" class=\"headerlink\" title=\"10.1.3 数组写法\"></a>10.1.3 数组写法</h3><p><strong>适用于：要绑定的样式个数不确定、名字也不确定</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classArr&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        classArr: [&#39;happy&#39;,&#39;normal&#39;, &#39;sad&#39;]\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091724.png\"></p>\n<p><strong>数组里移除一个属性</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091735.png\"></p>\n<p><strong>新增一个属性</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091749.png\"></p>\n<h3 id=\"10-1-4-对象写法\"><a href=\"#10-1-4-对象写法\" class=\"headerlink\" title=\"10.1.4 对象写法\"></a>10.1.4 对象写法</h3><p><strong>适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classObj&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        classObj: &#123;\n          fan1: false,\n          fan2: true,\n          fan3: true\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091805.png\"></p>\n<p><strong>改为 true，启用</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091817.png\"></p>\n<h2 id=\"10-2-Style-绑定\"><a href=\"#10-2-Style-绑定\" class=\"headerlink\" title=\"10.2 Style 绑定\"></a>10.2 Style 绑定</h2><h3 id=\"10-2-1-对象写法\"><a href=\"#10-2-1-对象写法\" class=\"headerlink\" title=\"10.2.1 对象写法\"></a>10.2.1 对象写法</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styleObj&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        styleObj: &#123;\n          fontSize: &#39;40px&#39;,\n          color: &#39;red&#39;\n        &#125;\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091829.png\"></p>\n<h3 id=\"10-2-2-数组写法\"><a href=\"#10-2-2-数组写法\" class=\"headerlink\" title=\"10.2.2 数组写法\"></a>10.2.2 数组写法</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styleArr&quot;&gt;Test&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        styleArr: [\n          &#123;\n            fontSize: &#39;40px&#39;,\n            color: &#39;red&#39;\n          &#125;,\n          &#123;\n            backgroundColor: &#39;skyblue&#39;\n          &#125;\n        ]\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091839.png\"></p>\n<h1 id=\"11-条件渲染\"><a href=\"#11-条件渲染\" class=\"headerlink\" title=\"11. 条件渲染\"></a>11. 条件渲染</h1><h2 id=\"11-1-v-show\"><a href=\"#11-1-v-show\" class=\"headerlink\" title=\"11.1 v-show\"></a>11.1 v-show</h2><ol>\n<li>写法：v-show&#x3D;”表达式”</li>\n<li>适用于：切换频率较高的场景</li>\n<li>特点：<strong>不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉</strong><br><img src=\"http://img.fan223.cn/2023/04/20230419091903.png\"></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1 v-show&#x3D;&quot;show&quot;&gt;显示&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        show: true\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091915.png\"></p>\n<p><strong>表达式为 false 则隐藏</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091927.png\"></p>\n<p><strong>表达式为 true 则显示</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419091947.png\"></p>\n<h2 id=\"11-2-v-if\"><a href=\"#11-2-v-if\" class=\"headerlink\" title=\"11.2 v-if\"></a>11.2 v-if</h2><ol>\n<li>写法：<br>v-if&#x3D;”表达式”<br>v-else-if&#x3D;”表达式”<br>v-else&#x3D;”表达式”</li>\n<li>适用于：切换频率较低的场景</li>\n<li><strong>特点：不展示的 DOM 元素直接被移除</strong><br><img src=\"http://img.fan223.cn/2023/04/20230419092001.png\"></li>\n<li>注意：v-if  可以和 v-else-if、v-else 一起使用，但要求结构不能被“打断”</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h2&gt;当前值 &#123;&#123;n&#125;&#125; &lt;&#x2F;h2&gt;&lt;br&gt;\n    &lt;button @click&#x3D;&quot;n++&quot;&gt;点击 n+1&lt;&#x2F;button&gt;&lt;br&gt;\n    &lt;h2 v-if&#x3D;&quot;n &#x3D;&#x3D;&#x3D; 1&quot;&gt;n &#x3D;&#x3D;&#x3D; 1&lt;&#x2F;h2&gt;\n    &lt;!--不能被打断 &lt;h2&gt;11&lt;&#x2F;h2&gt; --&gt;\n    &lt;h2 v-else-if&#x3D;&quot;n &#x3D;&#x3D;&#x3D; 2&quot;&gt;n &#x3D;&#x3D;&#x3D; 2&lt;&#x2F;h2&gt;\n    &lt;h2 v-else&gt;其他&lt;&#x2F;h2&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        n: 0\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>else 的其他</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092012.png\"></p>\n<p><strong>if 的 n &#x3D;&#x3D;&#x3D; 1</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092025.png\"></p>\n<p><strong>else-if 的 n &#x3D;&#x3D;&#x3D; 2</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092038.png\"></p>\n<p><strong>注：使用 v-if 的时，元素可能无法获取到，而使用 v-show 一定可以获取到</strong></p>\n<h1 id=\"12-列表渲染\"><a href=\"#12-列表渲染\" class=\"headerlink\" title=\"12. 列表渲染\"></a>12. 列表渲染</h1><h2 id=\"12-1-基本使用\"><a href=\"#12-1-基本使用\" class=\"headerlink\" title=\"12.1 基本使用\"></a>12.1 基本使用</h2><p><strong>v-for 指令:</strong></p>\n<ol>\n<li>用于展示列表数据</li>\n<li>语法：v-for&#x3D;”(item, index) in items” :key&#x3D;”index”</li>\n<li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;!-- 遍历数组 --&gt;\n    &lt;h2&gt;人员列表（遍历数组）&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;!-- &lt;li v-for&#x3D;&quot;p in persons&quot; :key&#x3D;&quot;p.id&quot;&gt;\n        &#123;&#123;p.name&#125;&#125; - &#123;&#123;p.age&#125;&#125; - &#123;&#123;p.id&#125;&#125;\n      &lt;&#x2F;li&gt; --&gt;\n      &lt;li v-for&#x3D;&quot;(p, index) in persons&quot; :key&#x3D;&quot;p.id&quot;&gt;\n        &#123;&#123;p.name&#125;&#125; - &#123;&#123;p.age&#125;&#125; - &#123;&#123;p.id&#125;&#125; - &#123;&#123;index&#125;&#125;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  \n    &lt;!-- 遍历对象 --&gt;\n    &lt;h2&gt;汽车信息（遍历对象）&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;!-- &lt;li v-for&#x3D;&quot;(value, key, index) in cars&quot; :key&#x3D;&quot;key&quot;&gt; --&gt;\n\t  &lt;li v-for&#x3D;&quot;(value, key) in cars&quot; :key&#x3D;&quot;key&quot;&gt;\n        &#123;&#123;key&#125;&#125; - &#123;&#123;value&#125;&#125;\n      &lt;&#x2F;li&gt;\n\t&lt;&#x2F;ul&gt;\n\n    &lt;!-- 遍历字符串 --&gt;\n\t&lt;h2&gt;测试遍历字符串（用得少）&lt;&#x2F;h2&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for&#x3D;&quot;(char, index) of str&quot; :key&#x3D;&quot;index&quot;&gt;\n\t\t\t&#123;&#123;char&#125;&#125; - &#123;&#123;index&#125;&#125;\n\t\t&lt;&#x2F;li&gt;\n\t&lt;&#x2F;ul&gt;\n\n\t&lt;!-- 遍历指定次数 --&gt;\n\t&lt;h2&gt;测试遍历指定次数（用得少）&lt;&#x2F;h2&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for&#x3D;&quot;(number, index) of 5&quot; :key&#x3D;&quot;index&quot;&gt;\n\t\t\t&#123;&#123;index&#125;&#125; - &#123;&#123;number&#125;&#125;\n\t\t&lt;&#x2F;li&gt;\n\t&lt;&#x2F;ul&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        persons: [\n          &#123;id: 111, name: &#39;张三&#39;, age: 18&#125;,\n          &#123;id: 222, name: &#39;李四&#39;, age: 20&#125;,\n          &#123;id: 333, name: &#39;王五&#39;, age: 22&#125;\n        ],\n        cars: &#123;\n          name: &#39;A7&#39;,\n          price: &#39;7777777&#39;,\n          color: &#39;黑色&#39;\n        &#125;,\n        str: &#39;Hello!&#39;\n      &#125;,\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092054.png\"></p>\n<h2 id=\"12-2-key-的原理\"><a href=\"#12-2-key-的原理\" class=\"headerlink\" title=\"12.2 key 的原理\"></a>12.2 key 的原理</h2><p>React、Vue 中的 key 有什么作用？（key的内部原理）</p>\n<ol>\n<li>虚拟 DOM 中 key 的作用<br>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】，随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异进行比较</li>\n<li>对比规则<ol>\n<li>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key<br>①若虚拟 DOM 中内容没变, 直接使用之前的真实 DOM！<br>②若虚拟 DOM 中内容变了, 则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</li>\n<li>旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key<br>创建新的真实 DOM，随后渲染到到页面</li>\n</ol>\n</li>\n<li>用 index 作为 key 可能会引发的问题<ol>\n<li>若对数据进行逆序添加、逆序删除等<strong>破坏顺序操作：</strong> 会产生没有必要的真实 DOM 更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</li>\n<li>如果结构中还包含输入类的 DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题</li>\n</ol>\n</li>\n<li>开发中如何选择 key?<ol>\n<li>最好使用每条数据的唯一标识作为 key, 比如 id、手机号、身份证号、学号等唯一值。</li>\n<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092106.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092117.png\"></p>\n<h2 id=\"12-3-列表过滤\"><a href=\"#12-3-列表过滤\" class=\"headerlink\" title=\"12.3 列表过滤\"></a>12.3 列表过滤</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h2&gt;人员列表&lt;&#x2F;h2&gt;\n\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入名字&quot; v-model&#x3D;&quot;keyWord&quot;&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;(fp, index) in filterPersons&quot; :key&#x3D;&quot;fp.id&quot;&gt;\n        &#123;&#123;fp.name&#125;&#125; - &#123;&#123;fp.age&#125;&#125;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        keyWord: &#39;&#39;,\n        persons:[\n\t\t\t&#123;id:&#39;001&#39;,name:&#39;马冬梅&#39;,age:19,sex:&#39;女&#39;&#125;,\n\t\t\t&#123;id:&#39;002&#39;,name:&#39;周冬雨&#39;,age:20,sex:&#39;女&#39;&#125;,\n\t\t\t&#123;id:&#39;003&#39;,name:&#39;周杰伦&#39;,age:21,sex:&#39;男&#39;&#125;,\n\t\t\t&#123;id:&#39;004&#39;,name:&#39;温兆伦&#39;,age:22,sex:&#39;男&#39;&#125;\n\t\t],\n        &#x2F;&#x2F; filterPersons: [] 一个新数组来保存过滤后的数据\n      &#125;,\n      &#x2F;&#x2F; watch 实现\n      &#x2F;&#x2F; watch: &#123;\n      &#x2F;&#x2F;   keyWord: &#123;\n      &#x2F;&#x2F;     immediate: true,\n      &#x2F;&#x2F;     handler(val)&#123;\n      &#x2F;&#x2F;       this.filterPersons &#x3D; this.persons.filter((p) &#x3D;&gt; &#123;\n      &#x2F;&#x2F;       return p.name.indexOf(val) !&#x3D;&#x3D; -1;\n      &#x2F;&#x2F;     &#125;)\n      &#x2F;&#x2F;     &#125;\n      &#x2F;&#x2F;   &#125;\n      &#x2F;&#x2F; &#125;\n      computed: &#123;\n        filterPersons()&#123;\n          return this.persons.filter((p) &#x3D;&gt; &#123;\n            return p.name.indexOf(this.keyWord) !&#x3D;&#x3D; -1;\n          &#125;)\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092128.png\"></p>\n<p><strong>输入搜索条件后进行过滤</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092141.png\"></p>\n<h2 id=\"12-4-列表（过滤）排序\"><a href=\"#12-4-列表（过滤）排序\" class=\"headerlink\" title=\"12.4 列表（过滤）排序\"></a>12.4 列表（过滤）排序</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h2&gt;人员列表&lt;&#x2F;h2&gt;\n\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入名字&quot; v-model&#x3D;&quot;keyWord&quot;&gt;\n    &lt;button @click&#x3D;&quot;sortType &#x3D; 2&quot;&gt;年龄升序&lt;&#x2F;button&gt;\n\t\t&lt;button @click&#x3D;&quot;sortType &#x3D; 1&quot;&gt;年龄降序&lt;&#x2F;button&gt;\n\t\t&lt;button @click&#x3D;&quot;sortType &#x3D; 0&quot;&gt;原顺序&lt;&#x2F;button&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;(fp, index) in filterPersons&quot; :key&#x3D;&quot;fp.id&quot;&gt;\n        &#123;&#123;fp.name&#125;&#125; - &#123;&#123;fp.age&#125;&#125;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        keyWord: &#39;&#39;,\n        sortType: 0,\n        persons:[\n\t\t\t&#123;id:&#39;001&#39;,name:&#39;马冬梅&#39;,age:34,sex:&#39;女&#39;&#125;,\n\t\t\t&#123;id:&#39;002&#39;,name:&#39;周冬雨&#39;,age:22,sex:&#39;女&#39;&#125;,\n\t\t\t&#123;id:&#39;003&#39;,name:&#39;周杰伦&#39;,age:47,sex:&#39;男&#39;&#125;,\n\t\t\t&#123;id:&#39;004&#39;,name:&#39;温兆伦&#39;,age:22,sex:&#39;男&#39;&#125;\n\t\t],\n      &#125;,\n      computed: &#123;\n        filterPersons()&#123;\n          let arr &#x3D; this.persons.filter((p) &#x3D;&gt; &#123;\n            return p.name.indexOf(this.keyWord) !&#x3D;&#x3D; -1;\n          &#125;)\n          if(this.sortType)&#123;\n            arr.sort((p1, p2) &#x3D;&gt; &#123;\n              return this.sortType &#x3D;&#x3D;&#x3D; 1 ? p1.age - p2.age : p2.age - p1.age\n            &#125;)\n          &#125;\n          return arr;\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092157.png\"></p>\n<p><strong>点击升序，sortType &#x3D;&#x3D;&#x3D; 2，p1.age - p2.age</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092208.png\"></p>\n<p><strong>点击降序，sortType &#x3D;&#x3D;&#x3D; 1，p2.age - p1.age</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092223.png\"></p>\n<p><strong>原顺序，sortType &#x3D;&#x3D;&#x3D; 0，返回原数组不进行排序</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092237.png\"></p>\n<p><strong>过滤后排序</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092249.png\"></p>\n<h2 id=\"12-5-Vue-数据监测原理\"><a href=\"#12-5-Vue-数据监测原理\" class=\"headerlink\" title=\"12.5 Vue 数据监测原理\"></a>12.5 Vue 数据监测原理</h2><ol>\n<li>Vue 会监视 data 中所有层次的数据</li>\n<li>如何监测对象中的数据？<br>通过 setter 实现监视，且要在 new Vue 时就传入要监测的数据<ol>\n<li><strong>对象中后追加的属性，Vue 默认不做响应式处理</strong></li>\n<li>如需给后添加的属性做响应式，需使用如下API：<ol>\n<li><strong>Vue.set(target，propertyName&#x2F;index，value)</strong> 或</li>\n<li><strong>vm.$set(target，propertyName&#x2F;index，value)</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>如何监测数组中的数据？<br>通过包裹数组更新元素的方法实现，本质就是做了两件事：<ol>\n<li>调用原生对应的方法对数组进行更新</li>\n<li>重新解析模板，进而更新页面</li>\n</ol>\n</li>\n<li><strong>在 Vue 修改数组中的某个元素</strong>一定要用如下方法：<ol>\n<li>使用这些API，会改变原来的数组<br><strong>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</strong><br><img src=\"http://img.fan223.cn/2023/04/20230419092303.png\"></li>\n<li><strong>Vue.set() 或 vm.$set()</strong></li>\n</ol>\n</li>\n<li>使用 filter()、concat() 和 slice() 等方法不会改变原来的数组，可以用返回的新数组替换旧数组<br><img src=\"http://img.fan223.cn/2023/04/20230419092320.png\"></li>\n</ol>\n<p><strong>注：Vue.set() 和 vm.$set() 不能给 vm 或 vm 的根数据对象（vm._data）添加属性！！！</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 准备好一个容器--&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;学生信息&lt;&#x2F;h1&gt;\n    &lt;button @click&#x3D;&quot;student.age++&quot;&gt;年龄+1岁&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;student.sex &#x3D; &#39;未知&#39; &quot;&gt;修改性别&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为：张三&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;addHobby&quot;&gt;添加一个爱好&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n\t\t&lt;button @click&#x3D;&quot;removeSmoke&quot;&gt;过滤掉爱好中的抽烟&lt;&#x2F;button&gt; &lt;br&#x2F;&gt;\n    &lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;&#x2F;h3&gt;\n\t\t\t&lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;&#x2F;h3&gt;\n\t\t\t&lt;h3 v-if&#x3D;&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;&#x2F;h3&gt;\n\t\t\t&lt;h3&gt;爱好：&lt;&#x2F;h3&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li v-for&#x3D;&quot;(hobby,index) in student.hobbys&quot; :key&#x3D;&quot;index&quot;&gt;\n\t\t\t\t\t&#123;&#123;hobby&#125;&#125;\n\t\t\t\t&lt;&#x2F;li&gt;\n\t\t\t&lt;&#x2F;ul&gt;\n\t\t\t&lt;h3&gt;朋友们：&lt;&#x2F;h3&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li v-for&#x3D;&quot;(f,index) in student.friends&quot; :key&#x3D;&quot;index&quot;&gt;\n\t\t\t\t\t&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;\n\t\t\t\t&lt;&#x2F;li&gt;\n\t\t\t&lt;&#x2F;ul&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n  Vue.config.productionTip &#x3D; false &#x2F;&#x2F;阻止 vue 在启动时生成生产提示。\n\n  const vm &#x3D; new Vue(&#123;\n    el:&#39;#root&#39;,\n    data:&#123;\n\t\tstudent:&#123;\n\t\t\tname:&#39;tom&#39;,\n\t\t\tage:18,\n\t\t\thobbys:[&#39;抽烟&#39;,&#39;喝酒&#39;,&#39;烫头&#39;],\n\t\t\tfriends:[\n\t\t\t\t&#123;name:&#39;jerry&#39;,age:35&#125;,\n\t\t\t\t&#123;name:&#39;tony&#39;,age:36&#125;\n\t\t\t]\n\t\t&#125;\n\t&#125;,\n    methods: &#123;\n      addSex()&#123;\n        Vue.set(vm.student, &#39;sex&#39;, &#39;男&#39;) &#x2F;&#x2F; this.student &#x3D;&#x3D;&#x3D; vm._data.student &#x3D;&#x3D;&#x3D; vm.student\n        &#x2F;&#x2F; this.$set(this.student, &#39;sex&#39;, &#39;男&#39;) this &#x3D;&#x3D;&#x3D; vm\n      &#125;,\n      addFriend()&#123;\n        this.student.friends.unshift(&#123;name:&#39;jack&#39;,age:24&#125;)\n      &#125;,\n      updateFirstFriendName()&#123;\n        this.student.friends[0].name &#x3D; &#39;张三&#39;\n      &#125;,\n      addHobby()&#123;\n        this.student.hobbys.push(&#39;学习&#39;)\n      &#125;,\n      updateHobby()&#123;\n        &#x2F;&#x2F; this.student.hobbys.splice(0,1,&#39;开车&#39;) 从第 0 个开始删一个，删完之后再插入一个新的\n        &#x2F;&#x2F; Vue.set(this.student.hobbys, 0, &#39;开车&#39;)\n        this.$set(this.student.hobbys, 0, &#39;开车&#39;)\n      &#125;,\n      removeSmoke()&#123;\n        this.student.hobbys &#x3D; this.student.hobbys.filter((hobby) &#x3D;&gt; &#123;\n          return hobby !&#x3D;&#x3D; &#39;抽烟&#39;\n        &#125;)\n      &#125;\n    &#125;,\n  &#125;)\n&lt;&#x2F;script&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092337.png\"></p>\n<p><strong>使用 Vue.set() 或 vm.$set() 添加性别属性，使用 v-if，假如 sex 属性存在就显示，当添加了sex 属性后，存在了就显示出来，undefined 则不会显示</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092356.png\"></p>\n<p><strong>使用 unshift 在前面添加一个对象</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092412.png\"></p>\n<p><strong>使用 push 添加一个数组属性</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092428.png\"></p>\n<p><strong>使用 Vue.set() 或 vm.$set() 或 splice() 方法修改数组属性的值</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092441.png\"></p>\n<h1 id=\"13-收集表单数据\"><a href=\"#13-收集表单数据\" class=\"headerlink\" title=\"13. 收集表单数据\"></a>13. 收集表单数据</h1><ol>\n<li>若：&lt;input type&#x3D;”text”&#x2F;&gt;，则 v-model 收集的是 value 值，用户输入的就是 value值</li>\n<li>若：&lt;input type&#x3D;”radio”&#x2F;&gt;，则 v-model 收集的是 value 值，且要给标签配置 value 值</li>\n<li>若：&lt;input type&#x3D;”checkbox”&#x2F;&gt;<ol>\n<li>没有配置 input 的 value 属性，那么收集的就是 checked（勾选 or 未勾选，是布尔值）</li>\n<li>配置 input 的 value 属性:<ol>\n<li>v-model 的初始值是非数组，那么收集的就是 checked（勾选 or 未勾选，是布尔值）</li>\n<li>v-model 的初始值是数组，那么收集的的就是 value 组成的数组</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><strong>v-model 的三个修饰符：</strong><ol>\n<li>lazy：失去焦点再收集数据</li>\n<li>number：输入字符串转为有效的数字</li>\n<li>trim：输入首尾空格过滤</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;form @submit.prevent&#x3D;&quot;demo&quot;&gt;\n      &lt;label for&#x3D;&quot;username&quot;&gt;用户名：&lt;&#x2F;label&gt;\n      &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; v-model.trim&#x3D;&quot;username&quot;&gt;&lt;br&gt;&lt;br&gt;\n      密码：&lt;input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;password&quot;&gt;&lt;br&gt;&lt;br&gt;\n      年龄：&lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;age&quot;&gt;&lt;br&gt;&lt;br&gt;\n      性别：\n      男：&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot;&gt;\n      女：&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;gender&quot; value&#x3D;&quot;female&quot;&gt;&lt;br&gt;&lt;br&gt;\n      爱好：\n      吃饭：&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;hobby&quot; value&#x3D;&quot;eat&quot;&gt;\n      学习：&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;hobby&quot; value&#x3D;&quot;study&quot;&gt;\n      打游戏：&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;hobby&quot; value&#x3D;&quot;game&quot;&gt;&lt;br&gt;&lt;br&gt;\n      所属校区：\n      &lt;select v-model&#x3D;&quot;city&quot;&gt;\n        &lt;option value&#x3D;&quot;&quot;&gt;请选择校区&lt;&#x2F;option&gt;\n        &lt;option value&#x3D;&quot;beijing&quot;&gt;北京&lt;&#x2F;option&gt;\n        &lt;option value&#x3D;&quot;shanghai&quot;&gt;上海&lt;&#x2F;option&gt;\n        &lt;option value&#x3D;&quot;shenzhen&quot;&gt;深圳&lt;&#x2F;option&gt;\n       &lt;option value&#x3D;&quot;guangzhou&quot;&gt;广州&lt;&#x2F;option&gt;\n      &lt;&#x2F;select&gt;&lt;br&gt;&lt;br&gt;\n      其他信息：\n      &lt;textarea v-model.lazy&#x3D;&quot;other&quot;&gt;&lt;&#x2F;textarea&gt;&lt;br&gt;&lt;br&gt;\n      &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;agree&quot;&gt;阅读并接受&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot;&gt;用户协议&lt;&#x2F;a&gt;&lt;br&gt;&lt;br&gt;\n      &lt;button&gt;提交&lt;&#x2F;button&gt;\n    &lt;&#x2F;form&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n\n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        username: &#39;&#39;,\n        password: &#39;&#39;,\n        age: &#39;&#39;,\n        gender: &#39;male&#39;,\n        hobby: [],\n        city: &#39;beijing&#39;,\n        other: &#39;&#39;,\n        agree: &#39;&#39;,\n      &#125;,\n      methods: &#123;\n\t\tdemo()&#123;\n\t\t  console.log(JSON.stringify(this.userInfo))\n\t\t&#125;\n\t  &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>输入年龄，使用 &lt;input type&#x3D;”number”&gt; 来约束只能输入数字，然后使用 v-model.number 将数字字符串转为数字类型</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092458.png\"></p>\n<p><strong>需要设置 &lt;input type&#x3D;”radio”&#x2F;&gt; 的 value 值</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092514.png\"></p>\n<p><strong>需要设置 &lt;input type&#x3D;”checkbox”&#x2F;&gt; 的 value 值，同时将存放类型设置为数组，才能进行一个或多个属性的选择</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092528.png\"></p>\n<p><strong>使用 v-model.lazy 和 v-model.trim 设置失去焦点再收集数据以及首尾空格过滤</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092542.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092555.png\"><br><strong>不配置 &lt;input type&#x3D;”checkbox”&#x2F;&gt; 的 value 属性，收集为一个布尔值</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092609.png\"></p>\n<p><strong>使用 @submit 来设置表单提交事件</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092624.png\"></p>\n<h1 id=\"14-过滤器\"><a href=\"#14-过滤器\" class=\"headerlink\" title=\"14. 过滤器\"></a>14. 过滤器</h1><p>对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</p>\n<ol>\n<li>注册过滤器<br><strong>Vue.filter(name, callback) 全局过滤器</strong><br><strong>new Vue{filters:{ }} 局部过滤器</strong></li>\n<li>使用过滤器：**<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code>  或  v-bind:属性 &#x3D; “xxx | 过滤器名”**，可以在插值语法和指令语法里使用</li>\n<li>备注：<ol>\n<li><strong>前面的 xxx 为必传进过滤器的参数，同时过滤器也可以接收额外参数、多个过滤器也可以串联</strong></li>\n<li>并没有改变原本的数据, 是产生新的对应的数据</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;时间戳： &#123;&#123;time&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;h1&gt;格式化后的时间（不传参）： &#123;&#123;time | timeFormater&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;h1&gt;格式化后的时间（传参）： &#123;&#123;time | timeFormater(&#39;YYYY-MM-DD HH:mm:ss&#39;)&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;h1&gt;全局过滤器（串联）： &#123;&#123;time | timeFormater(&#39;YYYY-MM-DD HH:mm:ss&#39;) | customerslice&#125;&#125; &lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n    Vue.filter(&#39;customerslice&#39;,function(value)&#123;\n\t\treturn value.slice(0,4)\n\t&#125;)\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        time: 1648318081795\n      &#125;,\n      filters: &#123;\n      \t&#x2F;&#x2F; 不传参则使用默认 str，传参则覆盖\n        timeFormater(value, str&#x3D;&#39;YYYY年MM月DD日 HH:mm:ss&#39;)&#123;\n\t\t\treturn dayjs(value).format(str)\n\t\t&#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092641.png\"></p>\n<h1 id=\"15-指令\"><a href=\"#15-指令\" class=\"headerlink\" title=\"15. 指令\"></a>15. 指令</h1><h2 id=\"15-1-内置指令\"><a href=\"#15-1-内置指令\" class=\"headerlink\" title=\"15.1 内置指令\"></a>15.1 内置指令</h2><ol>\n<li>v-bind : 单向绑定解析表达式, 可简写为 :xxx</li>\n<li>v-model : 双向数据绑定</li>\n<li>v-for : 遍历数组&#x2F;对象&#x2F;字符串</li>\n<li>v-on : 绑定事件监听, 可简写为@</li>\n<li>v-if 、v-else-if、v-else : 条件渲染（动态控制节点是否存在）</li>\n<li>v-show : 条件渲染 (动态控制节点是否展示)</li>\n<li>v-text ：向其所在的节点中渲染文本内容，但不能渲染包含 html 结构的内容。v-text 会替换掉节点中的内容，插值语法 <code>&#123;&#123;xx&#125;&#125; </code>不会</li>\n<li>v-html ：可以向指定节点中渲染包含 html 结构的内容，其他与 v-text 同。<strong>v-html 有安全性问题，在网站上动态渲染任意 HTML 容易导致XSS攻击</strong></li>\n<li>v-cloak（没有值）：本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性。使用 css 属性选择器设置 <strong>v-cloak 为 display:none</strong> 可以解决网速慢时页面展示出 <code>&#123;&#123;xxx&#125;&#125;</code> 的问题</li>\n<li>v-once ：<strong>v-once 所在节点在初次动态渲染后，就视为静态内容</strong>了，以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能</li>\n<li>v-pre ：<strong>跳过其所在节点的编译过程</strong>。可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li>\n</ol>\n<h2 id=\"15-2-自定义指令\"><a href=\"#15-2-自定义指令\" class=\"headerlink\" title=\"15.2 自定义指令\"></a>15.2 自定义指令</h2><ol>\n<li>局部指令 ：<strong>new Vue({ directives:{指令名:配置对象} 或 directives{指令名:回调函数} })</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">new Vue(&#123;\n\tdirectives:&#123;\n\t\t&#x2F;* &#39;big-number&#39;(element,binding)&#123; 完整写法，用引号包裹\n\t\t\telement.innerText &#x3D; binding.value * 10\n\t\t&#125;, *&#x2F;\n\t\t&#x2F;&#x2F; 函数式\n\t\tbig(element,binding)&#123;\n\t\t\tconsole.log(&#39;big&#39;,this) &#x2F;&#x2F; 注意此处的 this 是 Window\n\t\t\telement.innerText &#x3D; binding.value * 10\n\t\t&#125;,\n\t\t&#x2F;&#x2F; 对象式\n\t\tfbind:&#123;\n\t\t\t&#x2F;&#x2F; 指令与元素成功绑定时（一上来）调用\n\t\t\tbind(element, binding)&#123;\n\t\t\t\telement.value &#x3D; binding.value\n\t\t\t&#125;,\n\t\t\t&#x2F;&#x2F; 指令所在元素被插入页面时调用\n\t\t\tinserted(element, binding)&#123;\n\t\t\t\telement.focus()\n\t\t\t&#125;,\n\t\t\t&#x2F;&#x2F; 指令所在的模板被重新解析时调用\n\t\t\tupdate(element, binding)&#123;\n\t\t\t\telement.value &#x3D; binding.value\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;)</code></pre></li>\n<li>全局指令 ：<strong>Vue.directive(指令名, 配置对象) 或   Vue.directive(指令名, 回调函数)</strong></li>\n<li>备注<ol>\n<li>指令定义时不加 v-，但使用时要加 v-</li>\n<li>指令名如果是多个单词，要使用 kebab-case 命名方式，不要用 camelCase 命名</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"15-2-1-函数式\"><a href=\"#15-2-1-函数式\" class=\"headerlink\" title=\"15.2.1 函数式\"></a>15.2.1 函数式</h3><ol>\n<li><strong>指令与元素成功绑定时（一上来）会被调用</strong></li>\n<li><strong>指令所在的模板被重新解析时会被调用</strong></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;原始n的值：&#123;&#123;n&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;!-- 使用自定义指令 --&gt;\n    &lt;h1&gt;自定义指令放大10倍n的值：&lt;span v-big&#x3D;&quot;n&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;h1&gt;\n    &lt;button @click&#x3D;&quot;n++&quot;&gt;n加1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        n: 1\n      &#125;,\n      directives: &#123;\n        &#x2F;&#x2F; 自定义指令，element 代表所在的元素，binding 代表绑定的对象\n        big(element, binding)&#123;\n          console.log(element, binding);\n          element.innerText &#x3D; binding.value * 10\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>element 即 v-big 所在的 &lt;span&gt; 元素，binding 代表绑定的对象，expression 为表达式，value 为传进来的值</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092655.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092707.png\"></p>\n<h3 id=\"15-2-2-对象式\"><a href=\"#15-2-2-对象式\" class=\"headerlink\" title=\"15.2.2 对象式\"></a>15.2.2 对象式</h3><p><strong>配置对象中常用的3个回调：</strong></p>\n<ol>\n<li>bind：指令与元素成功绑定时调用</li>\n<li>inserted：指令所在元素被插入页面时调用</li>\n<li>update：指令所在模板结构被重新解析时调用</li>\n</ol>\n<p><strong>函数式即 bind + update 回调</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h1&gt;原始n的值：&#123;&#123;n&#125;&#125; &lt;&#x2F;h1&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-fbind:value&#x3D;&quot;n&quot;&gt;&lt;br&gt;\n    &lt;button @click&#x3D;&quot;n++&quot;&gt;n加1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      data: &#123;\n        n: 1\n      &#125;,\n      directives: &#123;\n        fbind: &#123;\n          bind(element, binding)&#123;\n            element.value &#x3D; binding.value;\n          &#125;,\n          inserted(element, binding)&#123;\n            element.focus();\n          &#125;,\n          update(element, binding)&#123;\n            element.value &#x3D; binding.value;\n          &#125;\n        &#125;\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>默认获取焦点</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092719.png\"></p>\n<h1 id=\"16-生命周期\"><a href=\"#16-生命周期\" class=\"headerlink\" title=\"16. 生命周期\"></a>16. 生命周期</h1><p>生命周期又名：生命周期回调函数、生命周期函数、生命周期钩子。<strong>是 Vue 在关键时刻帮我们调用的一些特殊名称的函数</strong>。生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。生命周期函数中的 this 指向是 vm 或 组件实例对象</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092730.png\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 准备好一个容器--&gt;\n  &lt;div id&#x3D;&quot;root&quot; :x&#x3D;&quot;n&quot;&gt;\n    &lt;h2 v-text&#x3D;&quot;n&quot;&gt;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;add&quot;&gt;点我n+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;bye&quot;&gt;点我销毁vm&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n  Vue.config.productionTip &#x3D; false &#x2F;&#x2F;阻止 vue 在启动时生成生产提示。\n\n  new Vue(&#123;\n    el:&#39;#root&#39;,\n    &#x2F;&#x2F; template:&#96;\n    &#x2F;&#x2F; \t&lt;div&gt;\n    &#x2F;&#x2F; \t\t&lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;&#x2F;h2&gt;\n    &#x2F;&#x2F; \t\t&lt;button @click&#x3D;&quot;add&quot;&gt;点我n+1&lt;&#x2F;button&gt;\n    &#x2F;&#x2F; \t&lt;&#x2F;div&gt;\n    &#x2F;&#x2F; &#96;,\n    data:&#123;\n      n:1\n    &#125;,\n    methods: &#123;\n      add()&#123;\n        console.log(&#39;add&#39;)\n        this.n++\n      &#125;,\n      bye()&#123;\n        console.log(&#39;bye&#39;)\n        this.$destroy()\n      &#125;\n    &#125;,\n    watch:&#123;\n      n()&#123;\n        console.log(&#39;n变了&#39;)\n      &#125;\n    &#125;,\n    &#x2F;&#x2F; 将要创建\n    beforeCreate() &#123;\n      console.log(&#39;beforeCreate&#39;)\n    &#125;,\n    &#x2F;&#x2F; 创建完毕\n    created() &#123;\n      console.log(&#39;created&#39;)\n    &#125;,\n    &#x2F;&#x2F; 将要挂载\n    beforeMount() &#123;\n      console.log(&#39;beforeMount&#39;)\n    &#125;,\n    &#x2F;&#x2F; 挂载完毕\n    mounted() &#123;\n      console.log(&#39;mounted&#39;)\n    &#125;,\n    &#x2F;&#x2F; 将要更新\n    beforeUpdate() &#123;\n      console.log(&#39;beforeUpdate&#39;)\n    &#125;,\n    &#x2F;&#x2F; 更新完毕\n    updated() &#123;\n      console.log(&#39;updated&#39;)\n    &#125;,\n    &#x2F;&#x2F; 将要销毁\n    beforeDestroy() &#123;\n      console.log(&#39;beforeDestroy&#39;)\n    &#125;,\n    &#x2F;&#x2F; 销毁完毕\n    destroyed() &#123;\n      console.log(&#39;destroyed&#39;)\n    &#125;,\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>初始化时</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092742.png\"></p>\n<p><strong>数据发生改变时</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092756.png\"></p>\n<p><strong>销毁</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092809.png\"></p>\n<p><strong>常用的生命周期钩子：</strong></p>\n<ul>\n<li><strong>mounted: 发送 ajax 请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</strong></li>\n<li>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li>\n</ul>\n<p><strong>关于销毁Vue实例：</strong></p>\n<ol>\n<li>销毁后借助 Vue 开发者工具看不到任何信息</li>\n<li><strong>销毁后自定义事件会失效，但原生 DOM 事件依然有效</strong></li>\n<li>一般不会在 beforeDestroy 操作数据，因为即便操作数据，也<strong>不会再触发更新流程了</strong></li>\n</ol>\n<h1 id=\"17-组件化编程\"><a href=\"#17-组件化编程\" class=\"headerlink\" title=\"17. 组件化编程\"></a>17. 组件化编程</h1><h2 id=\"17-1-模块与组件、模块化与组件化\"><a href=\"#17-1-模块与组件、模块化与组件化\" class=\"headerlink\" title=\"17.1 模块与组件、模块化与组件化\"></a>17.1 模块与组件、模块化与组件化</h2><ol>\n<li><strong>模块 ：向外提供特定功能的 js 程序, 一般就是一个 js 文件</strong>，用于复用 js, 简化 js 的编写, 提高 js 运行效率</li>\n<li>**组件 ：用来实现局部（特定）功能效果的代码集合(html&#x2F;css&#x2F;js&#x2F;image…)**，用于复用编码，简化项目编码，提高运行效率</li>\n<li><strong>模块化 ：当应用中的 js 都以模块来编写的, 那这个应用就是一个模块化的应用</strong></li>\n<li><strong>组件化 ：当应用中的功能都是多组件的方式来编写的, 那这个应用就是一个组件化的应用</strong></li>\n</ol>\n<h2 id=\"17-2-非单文件组件\"><a href=\"#17-2-非单文件组件\" class=\"headerlink\" title=\"17.2 非单文件组件\"></a>17.2 非单文件组件</h2><ol>\n<li>定义组件（创建组件）：使用 Vue.extend(options) 创建，其中 options 和 new Vue(options) 时传入的那个 options 几乎一样，只有两个区别；<ol>\n<li><strong>el 不要写</strong>，因为最终所有的组件都要经过一个 vm 的管理，由 vm 中的 el 决定服务哪个容器</li>\n<li><strong>data 必须写成函数</strong>，避免组件被复用时，数据存在引用关系</li>\n<li>备注：<strong>使用 template 可以配置组件结构</strong></li>\n</ol>\n</li>\n<li>注册组件<ol>\n<li>局部注册：靠 new Vue 的时候传入 components 选项</li>\n<li>全局注册：靠 Vue.component(‘组件名’,组件)</li>\n</ol>\n</li>\n<li>使用组件（写组件标签）<br>&lt;school&gt;&lt;&#x2F;school&gt; 或 &lt;school &#x2F;&gt; (需要 Vue 脚手架支持)</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;school&gt;&lt;&#x2F;school&gt;\n    &lt;student&gt;&lt;&#x2F;student&gt;\n    &lt;hello &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n\n\t&#x2F;&#x2F; 定义组件\n    const sh &#x3D; Vue.extend(&#123;\n      template: &#96;\n        &lt;div&gt;\n          &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n          &lt;h2&gt;学校地址：&#123;&#123;schoolAddress&#125;&#125;&lt;&#x2F;h2&gt;\n        &lt;&#x2F;div&gt;\n      &#96;,\n      data() &#123;\n        return &#123;\n          schoolName: &#39;Vue&#39;,\n          schoolAddress: &#39;湖南&#39;\n        &#125;\n      &#125;,\n    &#125;);\n    const student &#x3D; Vue.extend(&#123;\n      template:&#96;\n        &lt;div&gt;\n          &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125; &lt;&#x2F;h2&gt;\n          &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125; &lt;&#x2F;h2&gt;\n        &lt;&#x2F;div&gt;\n      &#96;,\n      data() &#123;\n        return &#123;\n          studentName: &#39;张三&#39;,\n          age: &#39;18&#39;\n        &#125;\n      &#125;,\n    &#125;);\n    const hello &#x3D; Vue.extend(&#123;\n\t\t\ttemplate:&#96;\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\t&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n\t\t\t\t&lt;&#x2F;div&gt;\n\t\t\t&#96;,\n\t\t\tdata()&#123;\n\t\t\t\treturn &#123;\n\t\t\t\t\tname: &#39;Tom&#39;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t&#125;);\n\t&#x2F;&#x2F; 注册全局组件\n    Vue.component(&#39;hello&#39;, hello);\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      &#x2F;&#x2F; 局部注册组件\n      components: &#123;\n      \t&#x2F;&#x2F; 使用时的标签名：定义的组件名\n        school: sh,\n        &#x2F;&#x2F; 当使用的标签名和定义的组件相同时可简写\n        student\n      &#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092824.png\"></p>\n<h2 id=\"17-3-组件写法\"><a href=\"#17-3-组件写法\" class=\"headerlink\" title=\"17.3 组件写法\"></a>17.3 组件写法</h2><ol>\n<li>组件名：<br>一个单词组成 ：第一种写法(首字母小写)：school 、第二种写法(首字母大写)：School<br>多个单词组成 ：第一种写法(kebab-case命名)：my-school 、第二种写法(CamelCase命名)：MySchool (需要 Vue 脚手架支持)<br>备注：<ol>\n<li>组件名尽可能回避 HTML 中已有的元素名称，例如：h2、H2 都不行</li>\n<li><strong>可以使用 name 配置项指定组件在开发者工具中呈现的名字</strong></li>\n</ol>\n</li>\n<li>组件标签：<br>第一种写法：&lt;school&gt;&lt;&#x2F;school&gt;<br>第二种写法：&lt;school &#x2F;&gt;，不用使用 Vue 脚手架时，&lt;school&#x2F;&gt;会导致后续组件不能渲染。</li>\n<li>简写方式 ：<strong>const school &#x3D; Vue.extend(options) 可简写为：const school &#x3D; options</strong></li>\n</ol>\n<h2 id=\"17-4-组件嵌套\"><a href=\"#17-4-组件嵌套\" class=\"headerlink\" title=\"17.4 组件嵌套\"></a>17.4 组件嵌套</h2><p>定义一个 App 组件来管理其他所有组件，vm 只需要管理 App 组件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n  \n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n\n    const student &#x3D; Vue.extend(&#123;\n      template:&#96;\n        &lt;div&gt;\n          &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125; &lt;&#x2F;h2&gt;\n          &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125; &lt;&#x2F;h2&gt;\n        &lt;&#x2F;div&gt;\n      &#96;,\n      data() &#123;\n        return &#123;\n          studentName: &#39;张三&#39;,\n          age: &#39;18&#39;\n        &#125;\n      &#125;,\n    &#125;);\n    const school &#x3D; Vue.extend(&#123;\n      template: &#96;\n        &lt;div&gt;\n          &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n          &lt;h2&gt;学校地址：&#123;&#123;schoolAddress&#125;&#125;&lt;&#x2F;h2&gt;\n          &lt;student&gt;&lt;&#x2F;student&gt;\n        &lt;&#x2F;div&gt;\n      &#96;,\n      data() &#123;\n        return &#123;\n          schoolName: &#39;Vue&#39;,\n          schoolAddress: &#39;湖南&#39;\n        &#125;\n      &#125;,\n      components: &#123;student&#125;\n    &#125;);\n  \n    const hello &#x3D; Vue.extend(&#123;\n\t\ttemplate:&#96;\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n\t\t\t&lt;&#x2F;div&gt;\n\t\t&#96;,\n\t\tdata()&#123;\n\t\t\treturn &#123;\n\t\t\t\tname: &#39;Tom&#39;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;);\n  \n    const App &#x3D; Vue.extend(&#123;\n      template:&#96;\n        &lt;div&gt;\n          &lt;hello&gt;&lt;&#x2F;hello&gt;\n          &lt;school&gt;&lt;&#x2F;school&gt;\n        &lt;&#x2F;div&gt;\n      &#96;,\n      components: &#123;\n        hello,\n        school\n      &#125;\n    &#125;)\n  \n    let vm &#x3D; new Vue(&#123;\n      template: &#96;&lt;App&gt;&lt;&#x2F;App&gt;&#96;,\n      el: &quot;#root&quot;,\n      components: &#123;App&#125;\n    &#125;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092849.png\"></p>\n<h2 id=\"17-5-VueComponent\"><a href=\"#17-5-VueComponent\" class=\"headerlink\" title=\"17.5 VueComponent\"></a>17.5 VueComponent</h2><ol>\n<li>组件本质是一个名为 VueComponent 的构造函数，且不是程序员定义的，是 Vue.extend 生成的</li>\n<li>我们只需要写组件标签 &lt;school&#x2F;&gt; 或 &lt;school&gt;&lt;&#x2F;school&gt;，Vue 解析时会帮我们创建 school 组件的实例对象，即 Vue 帮我们执行的：new VueComponent(options)</li>\n<li><strong>每次调用 Vue.extend，返回的都是一个全新的VueComponent</strong></li>\n<li>关于 this 指向：<ol>\n<li>组件 VueComponent 配置中：<br>data 函数、methods 中的函数、watch 中的函数、computed 中的函数 它们的 this 均是 <strong>【VueComponent实例对象】</strong></li>\n<li>new Vue(options) 配置中：<br>data 函数、methods 中的函数、watch 中的函数、computed 中的函数 它们的 this 均是【Vue实例对象】</li>\n</ol>\n</li>\n<li><strong>VueComponent 的实例对象，以后简称 vc（也可称之为：组件实例对象）</strong>。Vue 的实例对象，简称 vm</li>\n</ol>\n<h2 id=\"17-6-内置关系\"><a href=\"#17-6-内置关系\" class=\"headerlink\" title=\"17.6 内置关系\"></a>17.6 内置关系</h2><p><strong>VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</strong><br>可以让组件实例对象（vc）可以访问到 Vue 原型上的属性、方法</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092900.png\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;!-- &lt;school&gt;&lt;&#x2F;school&gt; --&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    Vue.config.productionTip &#x3D; false;\n\n    const school &#x3D; Vue.extend(&#123;\n      template:&#96;\n        &lt;div&gt;\n          &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n        &lt;&#x2F;div&gt;\n      &#96;,\n      data() &#123;\n        return &#123;\n          name: &#39;张三&#39;\n        &#125;\n      &#125;,\n    &#125;)\n  \n    let vm &#x3D; new Vue(&#123;\n      el: &quot;#root&quot;,\n      components: &#123;\n        &#x2F;&#x2F; school\n      &#125;\n    &#125;);\n   console.log(school.prototype.__proto__ &#x3D;&#x3D;&#x3D; Vue.prototype);\n   console.log(school.prototype.__proto__ &#x3D;&#x3D;&#x3D; vm.__proto__);\n   Vue.prototype.x &#x3D; 99;\n  \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419092916.png\"></p>\n<h2 id=\"17-7-单文件组件\"><a href=\"#17-7-单文件组件\" class=\"headerlink\" title=\"17.7 单文件组件\"></a>17.7 单文件组件</h2><p><strong>School.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;!-- 组件的结构 --&gt;\n  &lt;div class&#x3D;&quot;demo&quot;&gt;\n    &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学校地址：&#123;&#123;schoolAddress&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;showName&quot;&gt;点我提示学校名&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n  &#x2F;&#x2F; 组件交互相关的代码（数据、方法等等）\n  export default(&#123;\n    name: &#39;School&#39;,\n    data() &#123;\n      return &#123;\n        schoolName: &#39;Vue&#39;,\n        schoolAddress: &#39;湖南&#39;\n      &#125;\n    &#125;,\n    methods: &#123;\n\t\tshowName()&#123;\n\t\talert(this.name)\n\t  &#125;\n\t&#125;,\n  &#125;);\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n  &#x2F;* 组件的样式 *&#x2F;\n  .demo&#123;\n    background-color: orange;\n  &#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>App.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;School&gt;&lt;&#x2F;School&gt;\n    &lt;!-- &lt;Student&gt;&lt;&#x2F;Student&gt; --&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n  import School from &#39;.&#x2F;School.vue&#39;\n  &#x2F;&#x2F; import Student from &#39;.&#x2F;Student.vue&#39;\n  export default &#123;\n    name: &#39;App&#39;,\n    components: &#123;\n      School,\n      &#x2F;&#x2F; Student\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>main.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import App from &#39;.&#x2F;App.vue&#39;\n\nnew Vue(&#123;\n  el: &#39;#root&#39;,\n  components: &#123;App&#125;\n&#125;)</code></pre>\n","feature":false,"text":"1. 简介1.1 特点 遵循 MVVM 模式 编码简洁, 体积小, 运行效率高, 适合移动&#x2F;PC 端开发 它本身只关注 UI, 也可以引入其它第三方库开发项目 1.2 与其它 JS 框架的关联 借鉴 Angular 的模板和数据绑定技术 借鉴 React 的组件化和虚拟...","link":"","photos":[],"count_time":{"symbolsCount":"61k","symbolsTime":"55 mins."},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1. 简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1.1 特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%8E%E5%85%B6%E5%AE%83-JS-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%85%B3%E8%81%94\"><span class=\"toc-text\">1.2 与其它 JS 框架的关联</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-Vue-%E5%91%A8%E8%BE%B9%E5%BA%93\"><span class=\"toc-text\">1.3 Vue 周边库</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2. 环境配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%B8%8B%E8%BD%BD-devtools\"><span class=\"toc-text\">2.1 下载 devtools</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%85%B3%E9%97%AD%E7%94%9F%E4%BA%A7%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">2.2 关闭生产提示</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%88%9D%E8%AF%86-Vue\"><span class=\"toc-text\">3. 初识 Vue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%BC%95%E5%85%A5-Vue-js\"><span class=\"toc-text\">3.1 引入 Vue.js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.2 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">4. 模板语法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">5. 数据绑定</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-MVVM-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">6. MVVM 模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-Object-defineProperty-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">7.1 Object.defineProperty() 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">7.1.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-2-%E5%BC%80%E5%90%AF%E6%8E%A7%E5%88%B6%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">7.1.2 开启控制属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-3-get-%E5%92%8C-set-%E6%96%B9%E6%B3%95%EF%BC%88%E6%A0%B8%E5%BF%83%EF%BC%89\"><span class=\"toc-text\">7.1.3 get() 和 set() 方法（核心）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">7.2 简单示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-3-Vue-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">7.3 Vue 中的数据代理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">8. 事件管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">8.1 基本使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">8.2 事件修饰符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-1-prevent-%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">8.2.1 prevent 阻止默认事件（常用）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-2-stop-%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">8.2.2 stop 阻止事件冒泡（常用）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-3-once-%E4%BA%8B%E4%BB%B6%E5%8F%AA%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%EF%BC%88%E5%B8%B8%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">8.2.3 once 事件只触发一次（常用）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-4-capture-%E4%BD%BF%E7%94%A8%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%8D%95%E8%8E%B7%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">8.2.4 capture 使用事件的捕获模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-5-self-%E5%8F%AA%E6%9C%89-event-target-%E6%98%AF%E5%BD%93%E5%89%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E5%85%83%E7%B4%A0%E6%97%B6%E6%89%8D%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">8.2.5 self 只有 event.target 是当前操作的元素时才触发事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-6-passive-%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%EF%BC%8C%E6%97%A0%E9%9C%80%E7%AD%89%E5%BE%85%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95\"><span class=\"toc-text\">8.2.6 passive 事件的默认行为立即执行，无需等待事件回调执行完毕</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">8.3 按键修饰符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">9. 计算属性和侦听器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-computed\"><span class=\"toc-text\">9.1 计算属性 computed</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-2-%E4%BE%A6%E5%90%AC%E5%99%A8%EF%BC%88%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7%EF%BC%89watch\"><span class=\"toc-text\">9.2 侦听器（监视属性）watch</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-3-%E6%B7%B1%E5%BA%A6%E7%9B%91%E8%A7%86\"><span class=\"toc-text\">9.3 深度监视</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-4-computed-%E5%92%8C-watch-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">9.4 computed 和 watch 之间的区别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-Class-%E4%B8%8E-Style-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">10. Class 与 Style 绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-Class-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">10.1 Class 绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-1-%E7%9B%B4%E6%8E%A5%E5%8A%A0-Class\"><span class=\"toc-text\">10.1.1 直接加 Class</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%99%E6%B3%95\"><span class=\"toc-text\">10.1.2 字符串写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-3-%E6%95%B0%E7%BB%84%E5%86%99%E6%B3%95\"><span class=\"toc-text\">10.1.3 数组写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-4-%E5%AF%B9%E8%B1%A1%E5%86%99%E6%B3%95\"><span class=\"toc-text\">10.1.4 对象写法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-Style-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">10.2 Style 绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-1-%E5%AF%B9%E8%B1%A1%E5%86%99%E6%B3%95\"><span class=\"toc-text\">10.2.1 对象写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-2-%E6%95%B0%E7%BB%84%E5%86%99%E6%B3%95\"><span class=\"toc-text\">10.2.2 数组写法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">11. 条件渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-1-v-show\"><span class=\"toc-text\">11.1 v-show</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-2-v-if\"><span class=\"toc-text\">11.2 v-if</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">12. 列表渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-1-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">12.1 基本使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-2-key-%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">12.2 key 的原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-3-%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">12.3 列表过滤</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-4-%E5%88%97%E8%A1%A8%EF%BC%88%E8%BF%87%E6%BB%A4%EF%BC%89%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">12.4 列表（过滤）排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-5-Vue-%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">12.5 Vue 数据监测原理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#13-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">13. 收集表单数据</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#14-%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">14. 过滤器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#15-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">15. 指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-1-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">15.1 内置指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">15.2 自定义指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-1-%E5%87%BD%E6%95%B0%E5%BC%8F\"><span class=\"toc-text\">15.2.1 函数式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-2-%E5%AF%B9%E8%B1%A1%E5%BC%8F\"><span class=\"toc-text\">15.2.2 对象式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#16-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">16. 生命周期</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#17-%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">17. 组件化编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-1-%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BB%84%E4%BB%B6%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96\"><span class=\"toc-text\">17.1 模块与组件、模块化与组件化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-2-%E9%9D%9E%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">17.2 非单文件组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-3-%E7%BB%84%E4%BB%B6%E5%86%99%E6%B3%95\"><span class=\"toc-text\">17.3 组件写法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-4-%E7%BB%84%E4%BB%B6%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">17.4 组件嵌套</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-5-VueComponent\"><span class=\"toc-text\">17.5 VueComponent</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-6-%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">17.6 内置关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-7-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">17.7 单文件组件</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Vue2 总结（开发）","uid":"89fa61e4b6ffba4def01cdceb73b7872","slug":"BlogRepository/Vue/Vue2 总结（开发）","date":"2022-03-30T08:53:37.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/Vue/Vue2 总结（开发）.json","keywords":null,"cover":"https://cover.png","text":"1. Vue CLI 脚手架1.1 安装npm install -g @vue&#x2F;cli # OR yarn global add @vue&#x2F;cli 1.2 升级npm update -g @vue&#x2F;cli # 或者 yarn global upgra...","link":"","photos":[],"count_time":{"symbolsCount":"86k","symbolsTime":"1:18"},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"MapStruct 总结","uid":"489b1959aeda27687de88f48f1d87894","slug":"BlogRepository/开发技术及框架/MapStruct 总结","date":"2022-03-22T05:51:27.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/MapStruct 总结.json","keywords":null,"cover":"https://cover.png","text":"1. 概念在系统工程开发过程中，会有各个层之间的对象转换，比如 VO、DTO、PO、DO 等，如果都是手动 setter、getter 特别浪费时间，还可能操作错误，所以选择一个自动化工具会更加方便。常见的有 json2Json、Apache 和 Spring 的 BeanUti...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":9,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"Java","slug":"Java","count":12,"path":"api/tags/Java.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}