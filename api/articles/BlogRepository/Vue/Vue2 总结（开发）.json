{"title":"Vue2 总结（开发）","uid":"89fa61e4b6ffba4def01cdceb73b7872","slug":"BlogRepository/Vue/Vue2 总结（开发）","date":"2022-03-30T08:53:37.000Z","updated":"2023-03-13T19:13:04.944Z","comments":true,"path":"api/articles/BlogRepository/Vue/Vue2 总结（开发）.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-Vue-CLI-脚手架\"><a href=\"#1-Vue-CLI-脚手架\" class=\"headerlink\" title=\"1. Vue CLI 脚手架\"></a>1. <a href=\"https://cli.vuejs.org/zh/\">Vue CLI</a> 脚手架</h1><h2 id=\"1-1-安装\"><a href=\"#1-1-安装\" class=\"headerlink\" title=\"1.1 安装\"></a>1.1 安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install -g @vue&#x2F;cli\n# OR\nyarn global add @vue&#x2F;cli</code></pre>\n\n<h2 id=\"1-2-升级\"><a href=\"#1-2-升级\" class=\"headerlink\" title=\"1.2 升级\"></a>1.2 升级</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm update -g @vue&#x2F;cli\n# 或者\nyarn global upgrade --latest @vue&#x2F;cli</code></pre>\n\n<h2 id=\"1-3-创建一个项目\"><a href=\"#1-3-创建一个项目\" class=\"headerlink\" title=\"1.3 创建一个项目\"></a>1.3 创建一个项目</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vue create hello-world</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/69cf462f39954f67a032f5388b13b4f2.png\" alt=\"在这里插入图片描述\"><br>会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性<br><img src=\"https://img-blog.csdnimg.cn/4365c2aa5b8f46dcbc429102e4810ae9.png\" alt=\"在这里插入图片描述\"><br>创建完成<br><img src=\"https://img-blog.csdnimg.cn/ccef190180e14d5a9b5537dbd3a6a9b4.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-4-目录结构\"><a href=\"#1-4-目录结构\" class=\"headerlink\" title=\"1.4 目录结构\"></a>1.4 目录结构</h2><p><img src=\"https://img-blog.csdnimg.cn/ed0445ad0cef4ce48939f6265559f3cf.png\" alt=\"blog.csdnimg.cn/1b0c283392d54c208c31d993b11f00b4.png)\"></p>\n<h2 id=\"1-5-运行\"><a href=\"#1-5-运行\" class=\"headerlink\" title=\"1.5 运行\"></a>1.5 运行</h2><p><strong>vue-cli2.0</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;scripts&quot;: &#123;\n  &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build&#x2F;webpack.dev.conf.js&quot;,\n  &quot;start&quot;: &quot;npm run dev&quot;,\n  &quot;build&quot;: &quot;node build&#x2F;build.js&quot;\n&#125;</code></pre>\n\n<p><strong>vue-cli3.0</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;scripts&quot;: &#123;\n  &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &#x2F;&#x2F; 运行项目\n  &quot;build&quot;: &quot;vue-cli-service build&quot;, &#x2F;&#x2F; build\n  &quot;lint&quot;: &quot;vue-cli-service lint&quot; &#x2F;&#x2F; 运行语法检查\n&#125;,</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/3f39b89a9070456f85e5bda6f0547b09.png\" alt=\"在这里插入图片描述\"><br><strong>启动运行项目</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm run serve</code></pre>\n\n<p><strong>npm run xxx 中的 xxx 可以理解为键值对的 key，实际上 run 的是在 package.json 里面 scripts 配置的 value</strong>。比如，<strong>npm run serve</strong> 实际运行的是 vue-cli-service serve，而放在 <strong>3.0 以前 npm run dev</strong> 运行的则是 node build&#x2F;dev-server.js 文件</p>\n<h1 id=\"2-Demo-案例\"><a href=\"#2-Demo-案例\" class=\"headerlink\" title=\"2. Demo 案例\"></a>2. Demo 案例</h1><h2 id=\"2-1-components\"><a href=\"#2-1-components\" class=\"headerlink\" title=\"2.1 components\"></a>2.1 components</h2><p>定义两个组件<br><img src=\"https://img-blog.csdnimg.cn/71ca09abbe524dfd98bb2b798079fe8b.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;demo&quot;&gt;\n    &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学校地址：&#123;&#123;schoolAddress&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;showName&quot;&gt;点我提示学校名&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default (&#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;School&#39;,\n  data() &#123;\n    return &#123;\n      schoolName: &#39;Vue&#39;,\n      schoolAddress: &#39;湖南&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    showName() &#123;\n      alert(this.schoolName)\n    &#125;,\n    demo() &#123; &#125;\n  &#125;,\n&#125;);\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n.demo &#123;\n  background-color: orange;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125; &lt;&#x2F;h2&gt;\n    &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125; &lt;&#x2F;h2&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Student&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;张三&#39;,\n      age: 18\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"2-2-App-vue\"><a href=\"#2-2-App-vue\" class=\"headerlink\" title=\"2.2 App.vue\"></a>2.2 App.vue</h2><p>管理所有的其他的组件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;img alt&#x3D;&quot;Vue logo&quot;\n         src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;\n    &lt;School&gt;&lt;&#x2F;School&gt;\n    &lt;Student&gt;&lt;&#x2F;Student&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport School from &#39;.&#x2F;components&#x2F;School.vue&#39;\nimport Student from &#39;.&#x2F;components&#x2F;Student.vue&#39;\n\nexport default &#123;\n  name: &#39;App&#39;,\n  components: &#123;\n    School,\n    Student\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n#app &#123;\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<h2 id=\"2-3-main-js\"><a href=\"#2-3-main-js\" class=\"headerlink\" title=\"2.3 main.js\"></a>2.3 main.js</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 项目入口文件\n&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n\nnew Vue(&#123;\n  render: h &#x3D;&gt; h(App),\n&#125;).$mount(&#39;#app&#39;)</code></pre>\n\n<h2 id=\"2-4-index-html\"><a href=\"#2-4-index-html\" class=\"headerlink\" title=\"2.4 index.html\"></a>2.4 index.html</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n    &lt;!-- 针对IE浏览器的一个特殊配置，含义是让IE浏览器以最高的渲染级别渲染页面 --&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;\n    &lt;!-- 开启移动端的理想视口 --&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&gt;\n    &lt;!-- 配置页签图标 --&gt;\n    &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;&lt;%&#x3D; BASE_URL %&gt;favicon.ico&quot;&gt;\n    &lt;!-- 配置网页标题 --&gt;\n    &lt;title&gt;&lt;%&#x3D; htmlWebpackPlugin.options.title %&gt;Fan&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;!-- 当浏览器不支持js时noscript中的元素就会被渲染 --&gt;\n    &lt;noscript&gt;\n      &lt;strong&gt;We&#39;re sorry but &lt;%&#x3D; htmlWebpackPlugin.options.title %&gt; doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.&lt;&#x2F;strong&gt;\n    &lt;&#x2F;noscript&gt;\n    &lt;!-- 容器 --&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;!-- built files will be auto injected --&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h1 id=\"3-render-函数\"><a href=\"#3-render-函数\" class=\"headerlink\" title=\"3. render 函数\"></a>3. render 函数</h1><p>默认引入的 Vue 是一个不完整的 Vue（运行版的 vue），缺少模板解析器，此时使用 components 来注册组件会报错<br><img src=\"https://img-blog.csdnimg.cn/223a8f0fdb7e427ab902454cde466785.png\" alt=\"在这里插入图片描述\"><br><strong>可以看到有两个解决方案，第一种引入完整的 vue.js，第二种使用 render 函数</strong><br><img src=\"https://img-blog.csdnimg.cn/25c878db9edd4d519ff9b1ff13c07c27.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-1-引入完整版的-vue-js\"><a href=\"#3-1-引入完整版的-vue-js\" class=\"headerlink\" title=\"3.1 引入完整版的 vue.js\"></a>3.1 引入完整版的 vue.js</h2><p>完整版的 Vue 在 vue&#x2F;dist 下的 vue.js<br><img src=\"https://img-blog.csdnimg.cn/2fbd871962d743a0821b59815b0d6d03.png\" alt=\"在这里插入图片描述\"><br>引入完整版的 vue.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#x2F;dist&#x2F;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n\nnew Vue(&#123;\n  template: &#96;\n    &lt;div&gt;\n      &lt;App&gt;&lt;&#x2F;App&gt;\n    &lt;&#x2F;div&gt;\n  &#96;,\n  components: &#123;\n    App\n  &#125;\n&#125;).$mount(&#39;#app&#39;)\n</code></pre>\n\n<p><strong>此时运行成功</strong><br><img src=\"https://img-blog.csdnimg.cn/02ef2de8e86f4d6498b468c425e39be2.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-2-使用-render-函数\"><a href=\"#3-2-使用-render-函数\" class=\"headerlink\" title=\"3.2 使用 render 函数\"></a>3.2 使用 render 函数</h2><p>由于运行版的 vue 没有模板解析器，不能使用 template 配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n\nnew Vue(&#123;\n  &#x2F;&#x2F; render(createElement) &#123;\n  &#x2F;&#x2F;   return createElement(App);\n  &#x2F;&#x2F; &#125;,\n  &#x2F;&#x2F; render:h &#x3D;&gt; h(App)\n&#125;).$mount(&#39;#app&#39;)</code></pre>\n\n<h1 id=\"4-配置文件\"><a href=\"#4-配置文件\" class=\"headerlink\" title=\"4. 配置文件\"></a>4. <a href=\"https://cli.vuejs.org/zh/config/\">配置</a>文件</h1><ol>\n<li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置</li>\n<li>使用 vue.config.js 可以对脚手架进行个性化定制，<strong>官网配置地址 <a href=\"https://cli.vuejs.org/zh/config/#vue-config-js\">https://cli.vuejs.org/zh/config/#vue-config-js</a></strong><br><img src=\"https://img-blog.csdnimg.cn/9bd4f4a3ca29444dba99c30d8a5cb320.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123; defineConfig &#125; &#x3D; require(&#39;@vue&#x2F;cli-service&#39;)\nmodule.exports &#x3D; defineConfig(&#123;\n  transpileDependencies: true,\n  lintOnSave: false,\n  pages: &#123;\n    index: &#123;\n      &#x2F;&#x2F; page 的入口，默认 main.js\n      entry: &#39;src&#x2F;aa.js&#39;\n    &#125;\n  &#125;\n&#125;)</code></pre>\n\n<h1 id=\"5-ref-、props-与-mixin\"><a href=\"#5-ref-、props-与-mixin\" class=\"headerlink\" title=\"5. ref 、props 与 mixin\"></a>5. ref 、props 与 mixin</h1><h2 id=\"5-1-ref\"><a href=\"#5-1-ref\" class=\"headerlink\" title=\"5.1 ref\"></a>5.1 ref</h2><ol>\n<li>被用来给元素或子组件注册引用信息（id的替代者）</li>\n<li><strong>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</strong></li>\n<li><strong>使用方式：</strong><ol>\n<li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....\\&lt;/h1&gt; 或 \\&lt;School ref=&quot;xxx&quot;&gt;\\&lt;/School&gt;</code></li>\n<li>获取：<code>this.$refs.xxx</code></li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;\n    &lt;h1 v-text&#x3D;&quot;msg&quot; ref&#x3D;&quot;title&quot;&gt;&lt;&#x2F;h1&gt;\n    &lt;button ref&#x3D;&quot;btn&quot; @click&#x3D;&quot;showDOM&quot;&gt;点我输出上方的DOM元素&lt;&#x2F;button&gt;\n    &lt;School ref&#x3D;&quot;sch&quot; &#x2F;&gt;\n    &lt;Student&gt;&lt;&#x2F;Student&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport School from &#39;.&#x2F;components&#x2F;School.vue&#39;\nimport Student from &#39;.&#x2F;components&#x2F;Student.vue&#39;\n\nexport default &#123;\n  name: &#39;App&#39;,\n  data() &#123;\n    return &#123;\n      msg: &#39;MSG&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    showDOM() &#123;\n      console.log(this.$refs.title) &#x2F;&#x2F; 真实DOM元素\n      console.log(this.$refs.btn) &#x2F;&#x2F; 真实DOM元素\n      console.log(this.$refs.sch) &#x2F;&#x2F; School组件的实例对象（vc）\n    &#125;\n  &#125;,\n  components: &#123;\n    School,\n    Student\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/1e5158b37486488b959611c0245075ed.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-2-props\"><a href=\"#5-2-props\" class=\"headerlink\" title=\"5.2 props\"></a>5.2 props</h2><h3 id=\"5-2-1-概念\"><a href=\"#5-2-1-概念\" class=\"headerlink\" title=\"5.2.1 概念\"></a>5.2.1 概念</h3><p><strong>让组件接收外部传过来的数据</strong></p>\n<ol>\n<li>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></li>\n<li>接收数据：<ol>\n<li>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></li>\n<li>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></li>\n<li>第三种方式（限制类型、限制必要性、指定默认值）：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">props:&#123;\n  \tname:&#123;\n      \ttype: String, &#x2F;&#x2F; 类型\n      \trequired: true, &#x2F;&#x2F; 必要性\n      \tdefault: &#39;老王&#39; &#x2F;&#x2F; 默认值\n  \t&#125;\n&#125;</code></pre></li>\n</ol>\n</li>\n<li><strong>props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告</strong>，若业务需求确实需要修改，那么需要复制 props 的内容到 data 中一份，然后去修改 data 中的数据</li>\n</ol>\n<h3 id=\"5-2-2-使用\"><a href=\"#5-2-2-使用\" class=\"headerlink\" title=\"5.2.2 使用\"></a>5.2.2 使用</h3><p><strong>App.vue，使用组件 School.vue 时传入数据</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;\n    &lt;!-- age 为数字类型，但传入的是一个字符串，此时需要用 v-vind 数据绑定，将 &quot;&quot; 里的看成一个表达式然后传入 --&gt;\n    &lt;School schoolName&#x3D;&quot;Vue&quot; schoolAddress&#x3D;&quot;长沙&quot; :age&#x3D;&quot;18&quot; &#x2F;&gt;\n    &lt;Student &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport School from &#39;.&#x2F;components&#x2F;School.vue&#39;\nimport Student from &#39;.&#x2F;components&#x2F;Student.vue&#39;\n\nexport default &#123;\n  name: &#39;App&#39;,\n  components: &#123;\n    School,\n    Student\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>School.vue，使用 props 接收传进来的数据</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;!-- 组件的结构 --&gt;\n  &lt;div class&#x3D;&quot;demo&quot;&gt;\n    &lt;h2&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学校地址：&#123;&#123;schoolAddress&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt; &#123;&#123;age + 1&#125;&#125; &lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;showName&quot;&gt;点我提示学校名&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default (&#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;School&#39;,\n  data() &#123;\n    return &#123;\n      info: &#39;原生信息&#39;\n    &#125;\n  &#125;,\n  &#x2F;&#x2F; 接收数据\n  &#x2F;&#x2F; props: [&#39;schoolName&#39;, &#39;schoolAddress&#39;, &#39;age&#39;],\n  props: &#123;\n    schoolName: &#123;\n      type: String, &#x2F;&#x2F; 类型\n      required: true, &#x2F;&#x2F; 必要性\n      default: &#39;Vue&#39; &#x2F;&#x2F; 默认值\n    &#125;,\n    schoolAddress: String,\n    age: Number\n  &#125;\n&#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>展示将传进来的数据</strong><br><img src=\"https://img-blog.csdnimg.cn/aed583cfb54c484ba61ef3c67d765664.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-3-mixin（混入-x2F-合）\"><a href=\"#5-3-mixin（混入-x2F-合）\" class=\"headerlink\" title=\"5.3 mixin（混入&#x2F;合）\"></a>5.3 mixin（混入&#x2F;合）</h2><h3 id=\"5-3-1-概念\"><a href=\"#5-3-1-概念\" class=\"headerlink\" title=\"5.3.1 概念\"></a>5.3.1 概念</h3><p><strong>可以把多个组件共用的配置提取成一个混入对象</strong></p>\n<ol>\n<li>定义混入：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&#123;\n   data()&#123;....&#125;,\n   methods:&#123;....&#125;\n   ....\n&#125;</code></pre></li>\n<li>使用混入：<br><strong>全局混入：Vue.mixin(xxx)，会给所有都加上混入</strong><br>局部混入：mixins:[‘xxx’]</li>\n</ol>\n<h3 id=\"5-3-2-使用\"><a href=\"#5-3-2-使用\" class=\"headerlink\" title=\"5.3.2 使用\"></a>5.3.2 使用</h3><p><strong>定义混入，mixin.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const mixin1 &#x3D; &#123;\n\tmethods: &#123;\n\t\tshowName()&#123;\n\t\t\talert(this.name)\n\t\t&#125;\n\t&#125;,\n\tmounted() &#123;\n\t\tconsole.log(&#39;你好啊！&#39;)\n\t&#125;,\n&#125;\nexport const mixin2 &#x3D; &#123;\n\tdata() &#123;\n\t\treturn &#123;\n\t\t\tx:100,\n\t\t\ty:200\n\t\t&#125;\n\t&#125;,\n&#125;</code></pre>\n\n<p><strong>使用局部混入，School.vue</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nimport &#123; mixin1, mixin2 &#125; from &#39;..&#x2F;mixin.js&#39;;\nexport default (&#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;School&#39;,\n  data() &#123;\n    return &#123;\n      info: &#39;原生信息&#39;\n    &#125;\n  &#125;,\n  &#x2F;&#x2F; 使用局部混入\n  mixins: [mixin1, mixin2],\n  props: [&#39;schoolName&#39;, &#39;schoolAddress&#39;, &#39;age&#39;],\n&#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/2576778c96c14f458431db01d1f32bf8.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/fcb0c267b96e46379b4a40b26ae2d8f5.png\" alt=\"在这里插入图片描述\"><br><strong>使用全局混入，main.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\nimport &#123; mixin1, mixin2 &#125; from &#39;.&#x2F;mixin&#39;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n&#x2F;&#x2F; 全局混入\nVue.mixin(mixin1)\nVue.mixin(mixin2)\n\nnew Vue(&#123;\n  render:h &#x3D;&gt; h(App)\n&#125;).$mount(&#39;#app&#39;)</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/61f9866af05f46fa961fa5cdf550e7d6.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"6-插件\"><a href=\"#6-插件\" class=\"headerlink\" title=\"6. 插件\"></a>6. 插件</h1><h2 id=\"6-1-概念\"><a href=\"#6-1-概念\" class=\"headerlink\" title=\"6.1 概念\"></a>6.1 概念</h2><p><strong>用于增强 Vue，包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据</strong></p>\n<ol>\n<li>定义插件：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对象.install &#x3D; function (Vue, options) &#123;\n\t&#x2F;&#x2F; 1. 添加全局过滤器\n\tVue.filter(....)\n\t&#x2F;&#x2F; 2. 添加全局指令\n\tVue.directive(....)\n\t&#x2F;&#x2F; 3. 配置全局混入(合)\n\tVue.mixin(....)\n\t&#x2F;&#x2F; 4. 添加实例方法\n\tVue.prototype.$myMethod &#x3D; function () &#123;...&#125;\n\t&#x2F;&#x2F; 5. 给 Vue 原型上添加一个方法（vm 和 vc 都能用）\n\tVue.prototype.$myProperty &#x3D; xxxx\n&#125;</code></pre></li>\n<li><strong>使用插件：Vue.use()</strong></li>\n</ol>\n<h2 id=\"6-2-使用\"><a href=\"#6-2-使用\" class=\"headerlink\" title=\"6.2 使用\"></a>6.2 使用</h2><p><strong>定义一个插件 plugins.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n\tinstall(Vue, x, y, z)&#123;\n\n\t\tconsole.log(Vue, x, y, z)\n\t\t&#x2F;&#x2F;全局过滤器\n\t\tVue.filter(&#39;mySlice&#39;,function(value)&#123;\n\t\t\treturn value.slice(0,  4)\n\t\t&#125;)\n\n\t\t&#x2F;&#x2F;定义全局指令\n\t\tVue.directive(&#39;fbind&#39;,&#123;\n\t\t\t&#x2F;&#x2F;指令与元素成功绑定时（一上来）\n\t\t\tbind(element,binding)&#123;\n\t\t\t\telement.value &#x3D; binding.value\n\t\t\t&#125;,\n\t\t\t&#x2F;&#x2F;指令所在元素被插入页面时\n\t\t\tinserted(element)&#123;\n\t\t\t\telement.focus()\n\t\t\t&#125;,\n\t\t\t&#x2F;&#x2F;指令所在的模板被重新解析时\n\t\t\tupdate(element,binding)&#123;\n\t\t\t\telement.value &#x3D; binding.value\n\t\t\t&#125;\n\t\t&#125;)\n\n\t\t&#x2F;&#x2F;定义混入\n\t\tVue.mixin(&#123;\n\t\t\tdata() &#123;\n\t\t\t\treturn &#123;\n\t\t\t\t\tx:100,\n\t\t\t\t\ty:200\n\t\t\t\t&#125;\n\t\t\t&#125;,\n\t\t&#125;)\n\n\t\t&#x2F;&#x2F; 给 Vue原型上添加一个方法（vm 和 vc 都能用）\n\t\tVue.prototype.hello &#x3D; ()&#x3D;&gt;&#123;alert(&#39;你好啊&#39;)&#125;\n\t&#125;\n&#125;</code></pre>\n\n<p><strong>使用插件，main.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\nimport plugins from &#39;.&#x2F;plugins&#39;;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n&#x2F;&#x2F; 使用插件，传入三个值\nVue.use(plugins, 1, 2, 3)\n\nnew Vue(&#123;\n  render:h &#x3D;&gt; h(App)\n&#125;).$mount(&#39;#app&#39;)</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/8cb091fb7cff46949e66b5d79d26d551.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"7-scoped-样式\"><a href=\"#7-scoped-样式\" class=\"headerlink\" title=\"7. scoped 样式\"></a>7. scoped 样式</h1><p><strong>让样式在局部生效，防止冲突。写法：<code>&lt;style scoped&gt;</code></strong></p>\n<p>组件中所写的样式最后都是会汇总到一起的，假如存在重名的情况，则会产生样式冲突，后引入的组件的样式会覆盖前面引入的组件中的重名样式。使用 scoped 可以让样式只在该组件作用域内生效</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;&lt;&#x2F;template&gt;\n&lt;script&gt;&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n#app &#123;\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h1 id=\"8-组件化案例\"><a href=\"#8-组件化案例\" class=\"headerlink\" title=\"8. 组件化案例\"></a>8. 组件化案例</h1><ol>\n<li>组件化编码流程：<ol>\n<li>拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突</li>\n<li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<ol>\n<li>一个组件在用：放在组件自身即可</li>\n<li>一些组件在用：放在他们共同的父组件上（<strong>状态提升</strong>）</li>\n</ol>\n</li>\n<li>实现交互：从绑定事件开始</li>\n</ol>\n</li>\n<li>props 适用于：<ol>\n<li>父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件 通信</li>\n<li><strong>子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</strong></li>\n</ol>\n</li>\n<li>使用 v-model 时：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的</li>\n<li>props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/0162dc7e70a54b32b07ae9acb05baf78.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"8-1-定义-components\"><a href=\"#8-1-定义-components\" class=\"headerlink\" title=\"8.1 定义 components\"></a>8.1 定义 components</h2><p><strong>MyHeader.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;todo-header&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot;\n           placeholder&#x3D;&quot;请输入你的任务名称，按回车键确认&quot;\n           v-model&#x3D;&quot;name&quot;\n           @keyup.enter&#x3D;&quot;add&quot; &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport &#123; nanoid &#125; from &#39;nanoid&#39;\n\nexport default &#123;\n  name: &#39;MyHeader&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    add() &#123;\n      &#x2F;&#x2F; 校验数据，输入不能为空\n      if (!this.name.trim()) return alert(&#39;输入不能为空&#39;);\n      &#x2F;&#x2F; 将用户的输入包装成一个 todo 对象\n      const todoObj &#x3D; &#123; id: nanoid(), name: this.name, done: false &#125;;\n      &#x2F;&#x2F; 调用 App 加到 vc 上的方法，添加一个 todo 对象\n      this.addTodo(todoObj);\n      &#x2F;&#x2F; 清空输入\n      this.name &#x3D; &#39;&#39;;\n    &#125;\n  &#125;,\n  props: [&#39;addTodo&#39;],\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>MyList.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;ul class&#x3D;&quot;todo-main&quot;&gt;\n    &lt;!-- 展示 App 传过来的数据， MyItem 组件，传入数据和方法 --&gt;\n    &lt;MyItem v-for&#x3D;&quot;todoObj in todoList&quot;\n            :key&#x3D;&quot;todoObj.id&quot;\n            :todo&#x3D;&quot;todoObj&quot;\n            :checkTodo&#x3D;&quot;checkTodo&quot;\n            :deleteTodo&#x3D;&quot;deleteTodo&quot; &#x2F;&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport MyItem from &#39;.&#x2F;MyItem.vue&#39;;\n\nexport default &#123;\n  name: &#39;MyList&#39;,\n  &#x2F;&#x2F; 接收 App 传过来的数据，根据 :xxx&#x3D;&#39;&#39; 的 xxx 名称来接收\n  props: [&#39;todoList&#39;, &#39;checkTodo&#39;, &#39;deleteTodo&#39;],\n  components: &#123;\n    MyItem\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>MyItem.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;li&gt;\n    &lt;label&gt;\n      &lt;input type&#x3D;&quot;checkbox&quot;\n             :checked&#x3D;&#39;todo.done&#39;\n             @change&#x3D;&quot;handleCheck(todo.id)&quot; &#x2F;&gt;\n      &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，修改了props --&gt;\n      &lt;!-- &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;todo.done&quot;&#x2F;&gt; --&gt;\n      &lt;span&gt;&#123;&#123;todo.name&#125;&#125;&lt;&#x2F;span&gt;\n    &lt;&#x2F;label&gt;\n    &lt;button class&#x3D;&quot;btn btn-danger&quot; @click&#x3D;&quot;handleDelete(todo.id)&quot;&gt;删除&lt;&#x2F;button&gt;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script scoped&gt;\nexport default &#123;\n  name: &#39;MyItem&#39;,\n  methods: &#123;\n    handleCheck(id) &#123;\n      &#x2F;&#x2F; 调用 App 组件的方法，将 todo.done 值取反\n      this.checkTodo(id);\n    &#125;,\n    &#x2F;&#x2F; 调用 App 组件的方法，删除一个 todo\n    handleDelete(id) &#123;\n      this.deleteTodo(id);\n    &#125;\n  &#125;,\n  props: [&#39;todo&#39;, &#39;checkTodo&#39;, &#39;deleteTodo&#39;],\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>MyFooter.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;todo-footer&quot;\n       v-show&#x3D;&quot;total&quot;&gt;\n    &lt;label&gt;\n      &lt;!-- &lt;input type&#x3D;&quot;checkbox&quot; :checked&#x3D;&quot;isAll&quot; @change&#x3D;&quot;checkAll&quot; &#x2F;&gt; --&gt;\n      &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;isAll&quot;&gt;\n    &lt;&#x2F;label&gt;\n    &lt;span&gt;\n      &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125; &lt;&#x2F;span&gt; &#x2F; 全部&#123;&#123;total&#125;&#125;\n    &lt;&#x2F;span&gt;\n    &lt;button class&#x3D;&quot;btn btn-danger&quot; @click&#x3D;&quot;clearAll&quot;&gt;清除已完成任务&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;MyFooter&#39;,\n  computed: &#123;\n    total() &#123;\n      return this.todos.length\n    &#125;,\n    doneTotal() &#123;\n      &#x2F;&#x2F; return this.todos.reduce((pre, current) &#x3D;&gt; &#123;\n      &#x2F;&#x2F;   return pre + (current.done &#x3D;&#x3D;&#x3D; true ? 1 : 0);\n      &#x2F;&#x2F; &#125;, 0)\n      return this.todos.reduce((pre, current) &#x3D;&gt; pre + (current.done &#x3D;&#x3D;&#x3D; true ? 1 : 0), 0)\n    &#125;,\n    isAll: &#123;\n      get() &#123;\n        return this.doneTotal &#x3D;&#x3D;&#x3D; this.total &amp;&amp; this.total &gt; 0\n      &#125;,\n      set(value) &#123;\n        this.checkAllTodo(value);\n      &#125;\n    &#125;\n  &#125;,\n  methods: &#123;\n    clearAll() &#123;\n      this.clearAllTodo();\n    &#125;\n  &#125;,\n  props: [&#39;todos&#39;, &#39;checkAllTodo&#39;, &#39;clearAllTodo&#39;]\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"8-2-App-vue\"><a href=\"#8-2-App-vue\" class=\"headerlink\" title=\"8.2 App.vue\"></a>8.2 App.vue</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div class&#x3D;&quot;todo-container&quot;&gt;\n      &lt;div class&#x3D;&quot;todo-wrap&quot;&gt;\n        &lt;MyHeader :addTodo&#x3D;&quot;addTodo&quot; &#x2F;&gt;\n        &lt;!-- 传递 todos 给 MyList，名称为 todoList，要用数据绑定，使 &#39;&#39; 里的内容为表达式 --&gt;\n        &lt;MyList :todoList&#x3D;&quot;todos&quot;\n                :checkTodo&#x3D;&quot;checkTodo&quot;\n                :deleteTodo&#x3D;&quot;deleteTodo&quot; &#x2F;&gt;\n        &lt;MyFooter :todos&#x3D;&quot;todos&quot;\n                  :checkAllTodo&#x3D;&quot;checkAllTodo&quot;\n                  :clearAllTodo&#x3D;&quot;clearAllTodo&quot; &#x2F;&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport MyHeader from &#39;.&#x2F;components&#x2F;MyHeader.vue&#39;;\nimport MyFooter from &#39;.&#x2F;components&#x2F;MyFooter.vue&#39;;\nimport MyList from &#39;.&#x2F;components&#x2F;MyList.vue&#39;;\n\nexport default &#123;\n  name: &#39;App&#39;,\n  data() &#123;\n    return &#123;\n      todos: [\n        &#123; id: &#39;1001&#39;, name: &#39;吃饭&#39;, done: true &#125;,\n        &#123; id: &#39;1002&#39;, name: &#39;睡觉&#39;, done: false &#125;,\n        &#123; id: &#39;1003&#39;, name: &#39;学习&#39;, done: true &#125;,\n      ]\n    &#125;\n  &#125;,\n  methods: &#123;\n    &#x2F;&#x2F; 添加一个 todo\n    addTodo(todoObj) &#123;\n      this.todos.unshift(todoObj)\n    &#125;,\n    &#x2F;&#x2F; 勾选或取消勾选一个 todo\n    checkTodo(id) &#123;\n      this.todos.forEach(todo &#x3D;&gt; &#123;\n        if (todo.id &#x3D;&#x3D;&#x3D; id) todo.done &#x3D; !todo.done;\n      &#125;)\n    &#125;,\n    &#x2F;&#x2F; 删除一个 todo\n    deleteTodo(id) &#123;\n      if (confirm(&#39;确定删除吗？&#39;)) &#123;\n        this.todos &#x3D; this.todos.filter(todo &#x3D;&gt; &#123;\n          return todo.id !&#x3D;&#x3D; id;\n        &#125;)\n      &#125;\n    &#125;,\n    &#x2F;&#x2F; 全选或全不选\n    checkAllTodo(done) &#123;\n      this.todos.forEach(todo &#x3D;&gt; &#123;\n        todo.done &#x3D; done;\n      &#125;)\n    &#125;,\n    &#x2F;&#x2F; 清除所有已经完成的 todo\n    clearAllTodo() &#123;\n      this.todos &#x3D; this.todos.filter(todo &#x3D;&gt; !todo.done)\n    &#125;\n  &#125;,\n  components: &#123;\n    MyHeader,\n    MyFooter,\n    MyList\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"8-3-reduce-方法\"><a href=\"#8-3-reduce-方法\" class=\"headerlink\" title=\"8.3 reduce 方法\"></a>8.3 reduce 方法</h2><p><strong>pre 初始为 0 ，之后为上一次这个函数的返回值，current 为当前对象</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.todos.reduce((pre, current) &#x3D;&gt; &#123;\n\tconsole.log(&#39;@&#39;, pre);\n\tconsole.log(&#39;@&#39;, current);\n\treturn pre + 1;\n&#125;, 0)</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/4f8558f7c79c4d45a676373e5e8858e9.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"9-webStorage-浏览器本地存储\"><a href=\"#9-webStorage-浏览器本地存储\" class=\"headerlink\" title=\"9. webStorage 浏览器本地存储\"></a>9. webStorage 浏览器本地存储</h1><h2 id=\"9-1-概念\"><a href=\"#9-1-概念\" class=\"headerlink\" title=\"9.1 概念\"></a>9.1 概念</h2><ol>\n<li>存储内容大小一般支持 5MB 左右（不同浏览器可能不一样）</li>\n<li><strong>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制</strong></li>\n<li>相关API：<ol>\n<li><strong><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></strong><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li>\n<li><strong><code>xxxxxStorage.getItem(&#39;person&#39;);</code></strong><br>该方法接受一个键名作为参数，返回键名对应的值</li>\n<li><strong><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></strong><br>该方法接受一个键名作为参数，并把该键名从存储中删除</li>\n<li><strong><code>xxxxxStorage.clear()</code></strong><br>该方法会清空存储中的所有数据</li>\n</ol>\n</li>\n<li>备注：<ol>\n<li><strong>SessionStorage 存储的内容会随着浏览器窗口关闭而消失</strong></li>\n<li><strong>LocalStorage 存储的内容，需要手动清除才会消失</strong></li>\n<li>xxxxxStorage.getItem(xxx) 如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null</li>\n<li><strong>JSON.parse(null) 的结果依然是 null</strong></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"9-2-纯-HTML-使用\"><a href=\"#9-2-纯-HTML-使用\" class=\"headerlink\" title=\"9.2 纯 HTML 使用\"></a>9.2 纯 HTML 使用</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;div id&#x3D;&quot;root&quot;&gt;\n    &lt;h2&gt;浏览器本地存储&lt;&#x2F;h2&gt;\n    &lt;button onclick&#x3D;&quot;saveData()&quot;&gt;点击存储数据&lt;&#x2F;button&gt;\n    &lt;button onclick&#x3D;&quot;getData()&quot;&gt;点击读取数据&lt;&#x2F;button&gt;\n    &lt;button onclick&#x3D;&quot;deleteData()&quot;&gt;点击删除数据&lt;&#x2F;button&gt;\n    &lt;button onclick&#x3D;&quot;clearData()&quot;&gt;点击清空数据&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    let person &#x3D; &#123;name: &#39;张三&#39;, age: 18&#125;;\n    function saveData()&#123;\n        localStorage.setItem(&#39;msg&#39;, &#39;hello&#39;);\n        localStorage.setItem(&#39;key&#39;, &#39;value&#39;);\n        localStorage.setItem(&#39;person&#39;, JSON.stringify(person))\n    &#125;\n    function getData()&#123;\n\t\tconsole.log(localStorage.getItem(&#39;msg&#39;))\n\t\tconsole.log(localStorage.getItem(&#39;key&#39;))\n\n\t\tconst result &#x3D; localStorage.getItem(&#39;person&#39;)\n\t\tconsole.log(JSON.parse(result))\n\t&#125;\n\tfunction deleteData()&#123;\n\t\tlocalStorage.removeItem(&#39;key&#39;)\n\t&#125;\n\tfunction clearData()&#123;\n\t\tlocalStorage.clear()\n\t&#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p><strong>存储数据</strong><br><img src=\"https://img-blog.csdnimg.cn/b984e4835e9b45fbbd4d22d7c965c874.png\" alt=\"在这里插入图片描述\"><br><strong>读取数据</strong><br><img src=\"https://img-blog.csdnimg.cn/29f2453d425a45afb0e8623a21cf434e.png\" alt=\"在这里插入图片描述\"><br><strong>删除数据</strong><br><img src=\"https://img-blog.csdnimg.cn/f1f63eb93c7849a283af6c92b8ab12a4.png\" alt=\"在这里插入图片描述\"><br><strong>清空数据</strong><br><img src=\"https://img-blog.csdnimg.cn/6cc22a8629984fc88c3219afd9fc396d.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"9-3-Vue-中使用\"><a href=\"#9-3-Vue-中使用\" class=\"headerlink\" title=\"9.3 Vue 中使用\"></a>9.3 Vue 中使用</h2><p>将组件化案例中写死的 todos 改为从浏览器本地存储中读取，读取不到时就为空数组，然后使用侦听器对 todos 进行监视，每当 todos 发生变化，就把 todos 重新存储到浏览器本地存储</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nexport default &#123;\n  name: &#39;App&#39;,\n  data() &#123;\n    return &#123;\n      &#x2F;&#x2F; 从浏览器本地存储中读取\n      todos: JSON.parse(localStorage.getItem(&#39;todos&#39;)) || []\n    &#125;\n  &#125;,\n  watch: &#123;\n  \t&#x2F;&#x2F; 需要开启深度监视，监视里面每一个对象的变化\n    todos: &#123;\n      deep: true,\n      handler(value) &#123;\n        localStorage.setItem(&#39;todos&#39;, JSON.stringify(value));\n      &#125;\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h1 id=\"10-组件自定义事件\"><a href=\"#10-组件自定义事件\" class=\"headerlink\" title=\"10. 组件自定义事件\"></a>10. 组件自定义事件</h1><h2 id=\"10-1-概念\"><a href=\"#10-1-概念\" class=\"headerlink\" title=\"10.1 概念\"></a>10.1 概念</h2><ol>\n<li><strong>一种组件间通信的方式，适用于：子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></li>\n<li><strong>使用场景：Fu 是父组件，Zi 是子组件，Zi 想给 Fu 传数据，那么就要在 Fu 中给 Zi 绑定自定义事件（事件的回调也在 Fu 中）</strong></li>\n<li>绑定自定义事件：<ol>\n<li>第一种方式，在父组件中：<code>&lt;Demo @fan=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:fan=&quot;test&quot;/&gt;</code>，<strong>fan 表示自定义事件名，test 表示回调函数</strong></li>\n<li>第二种方式，在父组件中：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;Demo ref&#x3D;&quot;de&quot;&#x2F;&gt;\n......\nmounted()&#123;\n  &#x2F;&#x2F; ‘fan’ 表示自定义事件名，this.test 表示回调函数\n  this.$refs.de.$on(&#39;fan&#39;,this.test)\n&#125;</code></pre></li>\n<li>若想让自定义事件只能触发一次，可以使用 once 修饰符，或 $once 方法</li>\n</ol>\n</li>\n<li><strong>触发自定义事件：this.$emit(‘fan’,数据)</strong></li>\n<li><strong>解绑自定义事件 ：this.$off(‘fan’)</strong></li>\n<li><strong>组件上也可以绑定原生 DOM 事件，需要使用 native 修饰符</strong></li>\n<li>注意：<strong>通过 this.$refs.xxx.$on(‘fan’, 回调函数)绑定自定义事件时，回调函数要么配置在 methods 中，要么用箭头函数，否则 this 指向会出问题（这时 this 代表触发自定义事件的组件 Zi，而并非自定义事件和回调函数所在的组件 Fu）</strong></li>\n<li>销毁当前 Student 组件的实例，销毁后所有 Student 实例的自定义事件全都不奏效，<strong>但原生 DOM 事件依然有效</strong></li>\n</ol>\n<h2 id=\"10-2-绑定\"><a href=\"#10-2-绑定\" class=\"headerlink\" title=\"10.2 绑定\"></a>10.2 绑定</h2><p><strong>App.vue，自定义事件</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;h2&gt;接收到的学生名字：&#123;&#123;studentName&#125;&#125; &lt;&#x2F;h2&gt;\n    &lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;\n    &lt;!-- &lt;School :getSchoolName&#x3D;&quot;getSchoolName&quot; &#x2F;&gt; --&gt;\n    &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;\n    &lt;!-- &lt;Student @fan.once&#x3D;&quot;getStudentName&quot; &#x2F;&gt; --&gt;\n\n    &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref），要配合 mounted 绑定自定义事件  --&gt;\n    &lt;Student ref&#x3D;&quot;stu&quot; &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport Student from &#39;.&#x2F;components&#x2F;Student&#39;\n\nexport default &#123;\n  name: &#39;App&#39;,\n  data() &#123;\n    return &#123;\n      studentName: &#39;&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    getSchoolName(name) &#123;\n      console.log(&#39;App收到了学校名：&#39;, name)\n    &#125;,\n    getStudentName(name, ...params) &#123;\n      console.log(&#39;App收到了学生名：&#39;, name, params, this)\n      this.studentName &#x3D; name;\n    &#125;,\n  &#125;,\n  components: &#123; Student &#125;,\n  mounted() &#123;\n    this.$refs.stu.$on(&#39;fan&#39;, this.getStudentName) &#x2F;&#x2F; 绑定自定义事件，配合 ref\n    &#x2F;&#x2F; this.$refs.stu.$once(&#39;fan&#39;, this.getStudentName) &#x2F;&#x2F; 绑定自定义事件（一次性）\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>Student.vue，触发自定义事件</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;student&quot;&gt;\n    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;sendStudentlName&quot;&gt;把学生名给App&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Student&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n      number: 0\n    &#125;\n  &#125;,\n  methods: &#123;\n    sendStudentlName() &#123;\n      &#x2F;&#x2F; 触发 Student组件实例身上的自定义事件 fan\n      this.$emit(&#39;fan&#39;, this.name, 11, 22, 33)\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/d264bc93676c4d1495b8a62d18c66336.png\" alt=\"在这里插入图片描述\"><br><strong>点击将子组件的学生名字传给父组件，同时查看回调函数写在 methods 里的 this</strong><br><img src=\"https://img-blog.csdnimg.cn/ec594ca94a9742a3b90b57b09973f1f6.png\" alt=\"在这里插入图片描述\"><br><strong>查看回调函数直接写在 this.$refs.xxx.$on(‘组件名’, 回调函数) 里的 this</strong><br><img src=\"https://img-blog.csdnimg.cn/471335b99f804aec85773d789a0e45ce.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"10-3-解绑和销毁\"><a href=\"#10-3-解绑和销毁\" class=\"headerlink\" title=\"10.3 解绑和销毁\"></a>10.3 解绑和销毁</h2><p>销毁当前 Student 组件的实例，销毁后所有 Student 实例的自定义事件全都不奏效，<strong>但原生 DOM 事件依然有效</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;student&quot;&gt;\n    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123;number&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;add&quot;&gt;点我number++&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;sendStudentlName&quot;&gt;把学生名给App&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;unbind&quot;&gt;解绑atguigu事件&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;death&quot;&gt;销毁当前Student组件的实例(vc)&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Student&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n      number: 0\n    &#125;\n  &#125;,\n  methods: &#123;\n    sendStudentlName() &#123;\n      &#x2F;&#x2F; 触发 Student组件实例身上的自定义事件 fan\n      this.$emit(&#39;fan&#39;, this.name, 11, 22, 33)\n    &#125;,\n    unbind() &#123;\n      this.$off(&#39;fan&#39;);\n      &#x2F;&#x2F; this.$off([&#39;fan&#39;,&#39;demo&#39;]) &#x2F;&#x2F; 解绑多个自定义事件\n      &#x2F;&#x2F; this.$off() &#x2F;&#x2F; 解绑所有的自定义事件\n    &#125;,\n    death() &#123;\n      &#x2F;&#x2F; 销毁了当前Student组件的实例，销毁后所有 Student 实例的自定义事件全都不奏效\n      this.$destroy();\n    &#125;,\n    add() &#123;\n      console.log(&#39;add回调被调用了&#39;)\n      this.number++\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/3830b93636c1455789c2a957fa7aad23.png\" alt=\"在这里插入图片描述\"><br><strong>使用自定义事件</strong><br><img src=\"https://img-blog.csdnimg.cn/8b1a291337f7426d9cb6fe4280209313.png\" alt=\"在这里插入图片描述\"><br><strong>解绑自定义事件，此时该自定义事件不奏效</strong><br><img src=\"https://img-blog.csdnimg.cn/d5435ac4d5a54262bc275240eeda8066.png\" alt=\"在这里插入图片描述\"><br><strong>销毁实例，此时自定义事件全都不奏效，但原生 DOM 事件仍奏效</strong><br><img src=\"https://img-blog.csdnimg.cn/75e68817586c43fba00542abb5e593a1.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/ba9275aa55bc4f1e81d2b3a9b6da7a0d.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"11-全局事件总线（GlobalEventBus）\"><a href=\"#11-全局事件总线（GlobalEventBus）\" class=\"headerlink\" title=\"11. 全局事件总线（GlobalEventBus）\"></a>11. 全局事件总线（GlobalEventBus）</h1><h2 id=\"11-1-概念\"><a href=\"#11-1-概念\" class=\"headerlink\" title=\"11.1 概念\"></a>11.1 概念</h2><p><strong>一种组件间通信的方式，适用于任意组件间通信</strong></p>\n<ol>\n<li>安装全局事件总线：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">new Vue(&#123;\n\t......\n\tbeforeCreate() &#123;\n\t\t&#x2F;&#x2F; 安装全局事件总线，$bus就是当前应用的vm\n\t\tVue.prototype.$bus &#x3D; this\n\t&#125;,\n\t......\n&#125;) </code></pre></li>\n<li>使用事件总线：<ol>\n<li>接收数据：A组件想接收数据，则在A组件中给 $bus 绑定自定义事件，事件的回调留在A组件自身<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods()&#123;\n    demo(data)&#123;......&#125;\n&#125;\n......\nmounted() &#123;\n    this.$bus.$on(&#39;xxxx&#39;,this.demo)\n&#125;</code></pre></li>\n<li><strong>提供数据：this.$bus.$emit(‘xxxx’, 数据)</strong></li>\n<li><strong>最好在 beforeDestroy 钩子中，用 $off 去解绑当前组件所用到的事件</strong></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"11-2-使用\"><a href=\"#11-2-使用\" class=\"headerlink\" title=\"11.2 使用\"></a>11.2 使用</h2><p><strong>Student.vue，向 School.vue 传递数据，使用 this.$bus.$emit(‘xxx’, data) 触发自定义事件</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;student&quot;&gt;\n    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Student&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    sendStudentName() &#123;\n      this.$bus.$emit(&#39;hello&#39;, this.name);\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;</code></pre>\n\n<p><strong>School.vue，接收从 Student.vue 传过来的数据，使用 this.$bus.$on(‘xxx’, data &#x3D;&gt; { })) 监听自定义事件进行接收</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;school&quot;&gt;\n    &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;收到的学生姓名：&#123;&#123;studentName&#125;&#125; &lt;&#x2F;h2&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;School&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;Vue&#39;,\n      address: &#39;北京&#39;,\n      studentName: &#39;&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    &#x2F;&#x2F; getName(data) &#123;\n    &#x2F;&#x2F;   console.log(&#39;School 组件收到了数据：&#39;, data);\n    &#x2F;&#x2F;   this.studentName &#x3D; data;\n    &#x2F;&#x2F; &#125;\n  &#125;,\n  mounted() &#123;\n    &#x2F;&#x2F; this.$bus.$on(&#39;hello&#39;, this.getName)\n    this.$bus.$on(&#39;hello&#39;, data &#x3D;&gt; &#123;\n      console.log(&#39;School 组件收到了数据：&#39;, data);\n      this.studentName &#x3D; data;\n    &#125;);\n  &#125;,\n  &#x2F;&#x2F; 解绑事件\n  beforeDestroy() &#123;\n    this.$bus.$off(&#39;hello&#39;);\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/3fdb00a088104516932ba20b887414ae.png\" alt=\"在这里插入图片描述\"><br><strong>点击传递数据</strong><br><img src=\"https://img-blog.csdnimg.cn/0c7f375de3d14f9287388ed4bd367814.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"12-消息订阅与发布（pubsub）\"><a href=\"#12-消息订阅与发布（pubsub）\" class=\"headerlink\" title=\"12. 消息订阅与发布（pubsub）\"></a>12. 消息订阅与发布（pubsub）</h1><h2 id=\"12-1-概念\"><a href=\"#12-1-概念\" class=\"headerlink\" title=\"12.1 概念\"></a>12.1 概念</h2><p><strong>一种组件间通信的方式，适用于任意组件间通信</strong></p>\n<ol>\n<li><strong>安装 ：<code>pubsub：npm install pubsub-j</code></strong></li>\n<li><strong>引入 ：<code>import pubsub from &#39;pubsub-js&#39;</code></strong></li>\n<li>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods()&#123;\n\tdemo(MsgName, data)&#123;......&#125;\n&#125;\n......\nmounted() &#123;\n\tthis.pid &#x3D; pubsub.subscribe(&#39;xxx&#39;,this.demo) &#x2F;&#x2F; 订阅消息\n&#125;</code></pre></li>\n<li><strong>提供数据：pubsub.publish(‘xxx’,数据)</strong></li>\n<li>最好在 beforeDestroy 钩子中，用 <strong>pubSub.unsubscribe(pid)</strong> 去取消订阅</li>\n</ol>\n<h2 id=\"12-2-使用\"><a href=\"#12-2-使用\" class=\"headerlink\" title=\"12.2 使用\"></a>12.2 使用</h2><p><strong>Student.vue，提供数据（发布），使用 pubsub.publish(‘xxx’, data)</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;student&quot;&gt;\n    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport pubsub from &#39;pubsub-js&#39;;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Student&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;张三&#39;,\n      sex: &#39;男&#39;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    sendStudentName() &#123;\n      &#x2F;&#x2F; this.$bus.$emit(&#39;hello&#39;, this.name);\n      pubsub.publish(&#39;hello&#39;, this.name)\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;</code></pre>\n\n<p><strong>School.vue，接收数据（订阅），使用 pubsub.subscribe(‘xxx’, (msgName, data) &#x3D;&gt; {  })</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;school&quot;&gt;\n    &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;收到的学生姓名：&#123;&#123;studentName&#125;&#125; &lt;&#x2F;h2&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport pubsub from &#39;pubsub-js&#39;;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;School&#39;,\n  data() &#123;\n    return &#123;\n      name: &#39;Vue&#39;,\n      address: &#39;北京&#39;,\n      studentName: &#39;&#39;\n    &#125;\n  &#125;,\n  mounted() &#123;\n    &#x2F;&#x2F; this.$bus.$on(&#39;hello&#39;, data &#x3D;&gt; &#123;\n    &#x2F;&#x2F;   console.log(&#39;School 组件收到了数据：&#39;, data);\n    &#x2F;&#x2F;   this.studentName &#x3D; data;\n    &#x2F;&#x2F; &#125;);\n    this.pubId &#x3D; pubsub.subscribe(&#39;hello&#39;, (msgName, data) &#x3D;&gt; &#123;\n      console.log(&#39;有人发布了 hello 消息，hello 消息的回调函数执行了&#39;, msgName, data);\n      this.studentName &#x3D; data;\n    &#125;)\n  &#125;,\n  beforeDestroy() &#123;\n    &#x2F;&#x2F; this.$bus.$off(&#39;hello&#39;);\n    pubsub.unsubscribe(this.pubId)\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/8581e9c71494463ab91bd73994d85c7f.png\" alt=\"在这里插入图片描述\"><strong>点击传递数据</strong><br><img src=\"https://img-blog.csdnimg.cn/d426074a34e745a091a3a3f7c8f6b62c.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"13-nextTick\"><a href=\"#13-nextTick\" class=\"headerlink\" title=\"13. nextTick\"></a>13. nextTick</h1><p><strong>在下一次 DOM 更新结束后执行其指定的回调，当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行，语法：this.$nextTick(回调函数)</strong></p>\n<p><strong>修改组件化案例，添加一个编辑的功能，MyItem.vue 添加编辑功能和焦点事件，省略其他代码</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;li&gt;\n    &lt;label&gt;\n      &lt;span v-show&#x3D;&quot;!todo.isEdit&quot;&gt;&#123;&#123;todo.name&#125;&#125;&lt;&#x2F;span&gt;\n      &lt;input v-show&#x3D;&quot;todo.isEdit&quot;\n             type&#x3D;&quot;text&quot;\n             :value&#x3D;&quot;todo.name&quot;\n             @blur&#x3D;&quot;handleBlur(todo, $event)&quot;\n             ref&#x3D;&quot;inputName&quot;&gt;\n    &lt;&#x2F;label&gt;\n    &lt;button class&#x3D;&quot;btn btn-danger&quot; @click&#x3D;&quot;handleDelete(todo.id)&quot;&gt;删除&lt;&#x2F;button&gt;\n    &lt;button class&#x3D;&quot;btn btn-editor&quot; @click&#x3D;&quot;handleEdit(todo)&quot;&gt;编辑&lt;&#x2F;button&gt;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script scoped&gt;\nexport default &#123;\n  name: &#39;MyItem&#39;,\n  methods: &#123;\n    &#x2F;&#x2F; 编辑\n    handleEdit(todo) &#123;\n      &#x2F;&#x2F; if(todo.hasOwnProperty(&#39;isEdit&#39;)) &#123;\n      &#x2F;&#x2F; 点击编辑，假如有 isEdit 属性，则设置为 true，让其显示\n      if (Object.prototype.hasOwnProperty.call(todo, &#39;isEdit&#39;)) &#123;\n        todo.isEdit &#x3D; true;\n      &#125; else &#123;\n        &#x2F;&#x2F; 否则给其添加一个 isedit 属性，设置为 true\n        this.$set(todo, &#39;isEdit&#39;, true);\n      &#125;\n      &#x2F;&#x2F; 在显示输入框之后，获取输入框焦点，配合 blur 使用\n      this.$nextTick(function () &#123;\n        this.$refs.inputName.focus();\n      &#125;)\n    &#125;,\n    &#x2F;&#x2F; 失去焦点回调（真正执行修改逻辑）\n    handleBlur(todo, event) &#123;\n      &#x2F;&#x2F; 失去焦点，将 isEdit 设置为 false，隐藏输入框，显示&lt;span&gt;\n      todo.isEdit &#x3D; false;\n      &#x2F;&#x2F; 进行空值判断\n      if (!event.target.value.trim()) return alert(&#39;输入不能为空&#39;);\n      &#x2F;&#x2F; 传递修改的值给 App\n      this.$bus.$emit(&#39;updateTodo&#39;, todo.id, event.target.value)\n    &#125;\n  &#125;,\n  props: [&#39;todo&#39;],\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;</code></pre>\n\n<p><strong>App.vue，省略其他代码</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;App&#39;,\n  mounted() &#123;\n    &#x2F;&#x2F; 更新，接收传过来的值\n    this.$bus.$on(&#39;updateTodo&#39;, (id, name) &#x3D;&gt; &#123;\n      this.todos.forEach((todo) &#x3D;&gt; &#123;\n        if (todo.id &#x3D;&#x3D;&#x3D; id) todo.name &#x3D; name;\n      &#125;)\n    &#125;)\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<h1 id=\"14-Vue-封装的过度与动画-transition\"><a href=\"#14-Vue-封装的过度与动画-transition\" class=\"headerlink\" title=\"14. Vue 封装的过度与动画 transition\"></a>14. Vue 封装的过度与动画 transition</h1><h2 id=\"14-1-概念\"><a href=\"#14-1-概念\" class=\"headerlink\" title=\"14.1 概念\"></a>14.1 概念</h2><p><strong>在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名</strong><br><img src=\"https://img-blog.csdnimg.cn/71329cb893da480eba97f7ae43f1b307.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>准备好样式：<ol>\n<li>元素进入的样式（<strong>未设置 name 属性，默认为 v-xxx</strong>）：<ol>\n<li>v-enter：进入的起点，<strong>定义进入过渡的开始状态</strong>。在元素被插入之前生效，在元素被插入之后的下一帧移除</li>\n<li>v-enter-active：进入过程中，<strong>定义进入过渡生效时的状态</strong>。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数</li>\n<li>v-enter-to：进入的终点，<strong>定义进入过渡的结束状态</strong>。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡&#x2F;动画完成之后移除</li>\n</ol>\n</li>\n<li>元素离开的样式：<ol>\n<li>v-leave：离开的起点，<strong>定义离开过渡的开始状态</strong>。在离开过渡被触发时立刻生效，下一帧被移除</li>\n<li>v-leave-active：离开过程中，<strong>定义离开过渡生效时的状态</strong>。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数</li>\n<li>v-leave-to：离开的终点，<strong>定义离开过渡的结束状态</strong>。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡&#x2F;动画完成之后移除</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>使用 &lt;transition&gt; 包裹要过度的元素，并配置 name 属性：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;transition name&#x3D;&quot;hello&quot;&gt;\n   \t&lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;\n&lt;&#x2F;transition&gt;</code></pre></li>\n<li><strong>若有多个元素需要过度，则需要使用：&lt;transition-group&gt;，且每个元素都要指定 key 值</strong></li>\n<li>自定义过渡的类名<br><img src=\"https://img-blog.csdnimg.cn/2bcd83526e8c43dd9a649d2dcb03658d.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h2 id=\"14-2-动画效果\"><a href=\"#14-2-动画效果\" class=\"headerlink\" title=\"14.2 动画效果\"></a>14.2 动画效果</h2><p>先创建动画，然后使用 <strong>&lt;transition&gt; … &lt;&#x2F;transition&gt;<strong>，将需要动画过度的 … 包裹起来，</strong>用 .xxx-enter-active 表示进来的时候的效果，.xxx-leave-active 表示离开的时候的效果，xxx 可以在 &lt;transition&gt; 里用 name 属性指定，同时还可以用 apper 设置动画一进来就加载</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;显示&#x2F;隐藏&lt;&#x2F;button&gt;\n    &lt;!-- name 表示设置动画样式的名称，appper 表示一进来就加载动画 --&gt;\n    &lt;transition name&#x3D;&quot;hello&quot; appear&gt;\n      &lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;\n    &lt;&#x2F;transition&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Test&#39;,\n  data() &#123;\n    return &#123;\n      isShow: true\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n&#x2F;* 创建动画 *&#x2F;\n@keyframes fan &#123;\n  from &#123;\n    transform: translateX(-100%);\n  &#125;\n  to &#123;\n    transform: translateX(0px);\n  &#125;\n&#125; \n&#x2F;* 来的时候的效果 *&#x2F;\n.hello-enter-active &#123;\n  animation: fan 0.5s linear;\n&#125;\n&#x2F;* 离开的时候的效果 *&#x2F;\n.hello-leave-active &#123;\n  animation: fan 0.5s linear reverse;\n&#125;\n\nh1 &#123;\n  background-color: orange;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"14-3-过度效果\"><a href=\"#14-3-过度效果\" class=\"headerlink\" title=\"14.3 过度效果\"></a>14.3 过度效果</h2><p><strong>&lt;transition&gt;&lt;&#x2F;transition&gt; 只能使用一个元素，多个元素使用 <code>&lt;transition-group&gt;</code></strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;显示&#x2F;隐藏&lt;&#x2F;button&gt;\n    &lt;transition-group name&#x3D;&quot;hello&quot; appear&gt;\n      &lt;!-- 设置交替显示 --&gt;\n      &lt;h1 v-show&#x3D;&quot;!isShow&quot; key&#x3D;&quot;1&quot;&gt;你好啊！&lt;&#x2F;h1&gt;\n      &lt;h1 v-show&#x3D;&quot;isShow&quot; key&#x3D;&quot;2&quot;&gt;Fan！&lt;&#x2F;h1&gt;\n    &lt;&#x2F;transition-group&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Test&#39;,\n  data() &#123;\n    return &#123;\n      isShow: true\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\nh1 &#123;\n  background-color: orange;\n&#125;\n&#x2F;* 进入的起点、离开的终点 *&#x2F;\n.hello-enter, .hello-leave-to &#123;\n  transform: translateX(-100%);\n&#125;\n.hello-enter-active, .hello-leave-active &#123;\n  transition: 0.5s linear;\n&#125;\n&#x2F;* 进入的终点、离开的起点 *&#x2F;\n.hello-enter-to, .hello-leave &#123;\n  transform: translateX(0);\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"14-4-集成第三方库-Animate-css\"><a href=\"#14-4-集成第三方库-Animate-css\" class=\"headerlink\" title=\"14.4 集成第三方库 Animate.css\"></a>14.4 集成第三方库 <a href=\"https://animate.style/\">Animate.css</a></h2><ol>\n<li><strong>安装：<code>npm install animate.css --save</code></strong></li>\n<li><strong>引入：<code>import &#39;animate.css&#39;;</code></strong></li>\n<li><strong>name 设置为 animate__animated 前缀加名字，然后使用自定义类名配合使用</strong></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;显示&#x2F;隐藏&lt;&#x2F;button&gt;\n    &lt;transition appear\n                name&#x3D;&quot;animate__animated animate__bounce&quot;\n                enter-active-class&#x3D;&quot;animate__swing&quot;\n                leave-active-class&#x3D;&quot;animate__backOutUp&quot;&gt;\n      &lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;\n    &lt;&#x2F;transition&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport &#39;animate.css&#39;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Test&#39;,\n  data() &#123;\n    return &#123;\n      isShow: true\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\nh1 &#123;\n  background-color: orange;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h1 id=\"15-Vue-中的-ajax\"><a href=\"#15-Vue-中的-ajax\" class=\"headerlink\" title=\"15. Vue 中的 ajax\"></a>15. Vue 中的 ajax</h1><h2 id=\"15-1-请求方式\"><a href=\"#15-1-请求方式\" class=\"headerlink\" title=\"15.1 请求方式\"></a>15.1 请求方式</h2><p><strong>发 ajax 请求的方式：</strong></p>\n<ol>\n<li><strong>xhr（ new XMLHttpRequest() ）：xhr.open(); xhr.send();</strong></li>\n<li><strong>JQuery：封装（很多 DOM 操作），$.get，$.post</strong></li>\n<li><strong>Axios：封装，</strong> 体积小</li>\n<li>fetch：与 xhr 同级，会包装两层，同时兼容性差</li>\n<li>vue-resource ：Vue 里的插件库</li>\n</ol>\n<h2 id=\"15-2-解决-ajax-请求跨域问题\"><a href=\"#15-2-解决-ajax-请求跨域问题\" class=\"headerlink\" title=\"15.2 解决 ajax 请求跨域问题\"></a>15.2 解决 ajax 请求跨域问题</h2><ol>\n<li>cors（Cross-origin resource sharing）：跨域资源共享，需要后端加上HTTP 头</li>\n<li>jsonp：只能解决 get 请求</li>\n<li><strong>代理服务器</strong></li>\n</ol>\n<h3 id=\"15-2-1-代理方式一\"><a href=\"#15-2-1-代理方式一\" class=\"headerlink\" title=\"15.2.1 代理方式一\"></a>15.2.1 代理方式一</h3><p><strong>在 vue.config.js 中添加如下配置：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">devServer:&#123;\n\tproxy:&quot;http:&#x2F;&#x2F;localhost:5000&quot;\n&#125;</code></pre>\n\n<ol>\n<li>优点：配置简单，请求资源时直接发给前端（8080）即可，会代理到 5000</li>\n<li>缺点：<strong>不能配置多个代理，不能灵活的控制请求是否走代理</strong></li>\n<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时（<strong>没有匹配到静态文件的请求</strong>），那么该请求会转发给服务器 （优先匹配前端资源）</li>\n</ol>\n<p><strong>发送请求</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt; &lt;button @click&#x3D;&quot;getStudents&quot;&gt;获取学生信息&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nimport axios from &#39;axios&#39; &#x2F;&#x2F; 引入 axios\nexport default &#123;\n  name: &#39;App&#39;,\n  methods: &#123;\n    getStudents() &#123;\n      axios.get(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;students&#39;).then(\n        response &#x3D;&gt; &#123;\n          console.log(&#39;请求成功了&#39;, response.data)\n        &#125;,\n        error &#x3D;&gt; &#123;\n          console.log(&#39;请求失败了&#39;, error.message)\n        &#125;\n      )\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"15-2-2-代理方式二\"><a href=\"#15-2-2-代理方式二\" class=\"headerlink\" title=\"15.2.2 代理方式二\"></a>15.2.2 代理方式二</h3><p>编写 vue.config.js 配置具体代理规则：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123; defineConfig &#125; &#x3D; require(&#39;@vue&#x2F;cli-service&#39;)\nmodule.exports &#x3D; defineConfig(&#123;\n  devServer: &#123;\n    proxy: &#123;\n      &#39;&#x2F;fan&#39;: &#123; &#x2F;&#x2F; 匹配所有以 &#39;&#x2F;fan&#39;开头的请求路径\n        target: &#39;http:&#x2F;&#x2F;localhost:5000&#39;, &#x2F;&#x2F; 代理目标的基础路径\n        pathRewriter: &#123;\n          &#x2F;&#x2F; 请求默认会加上拦截的前缀，设置转发请求时去掉前缀 &#39;&#x2F;fan&#39;\n          &#39;^ &#x2F;fan&#39;: &#39;&#39;\n        &#125;,\n        ws: true, &#x2F;&#x2F; 用于支持 WebSocket\n        &#x2F;&#x2F; 默认值为 true，服务器收到的请求头中的 host 为：localhost:5000，代理目标的地址\n        &#x2F;&#x2F; 设置为 false 时，服务器收到的请求头中的 host 为：localhost:8080，代理服务器的地址\n        changeOrigin: true &#x2F;&#x2F; 用于控制请求头中的 host 值\n      &#125;,\n      &#39;&#x2F;foo&#39;: &#123;\n        target: &#39;&lt;other_url&gt;&#39;\n      &#125;\n    &#125;\n  &#125;\n&#125;)</code></pre>\n\n<ol>\n<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li>\n<li>缺点：配置略微繁琐，<strong>请求资源时必须加前缀</strong></li>\n</ol>\n<p><strong>发送请求，url 加上前缀</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt; &lt;button @click&#x3D;&quot;getStudents&quot;&gt;获取学生信息&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nimport axios from &#39;axios&#39; &#x2F;&#x2F; 引入 axios\nexport default &#123;\n  name: &#39;App&#39;,\n  methods: &#123;\n    getStudents() &#123;\n      &#x2F;&#x2F; 加上前缀 &#x2F;fan，才会被匹配到走代理\n      axios.get(&#39;&#x2F;fan&#x2F;students&#39;).then(\n        response &#x3D;&gt; &#123;\n          console.log(&#39;请求成功了&#39;, response.data)\n        &#125;,\n        error &#x3D;&gt; &#123;\n          console.log(&#39;请求失败了&#39;, error.message)\n        &#125;\n      )\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"15-3-使用\"><a href=\"#15-3-使用\" class=\"headerlink\" title=\"15.3 使用\"></a>15.3 使用</h2><p><img src=\"https://img-blog.csdnimg.cn/75a6b06b7d5340dc87b0ad0c6eff5072.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/83f81fc6c03446348e3af5bb059f66e4.png\" alt=\"在这里插入图片描述\"><br><strong>安装 Axios：<code>npm install axios --save</code></strong><br><strong>单组件引入：<code>import axios from &#39;axios&#39;</code>，直接使用 <code>axios</code></strong><br><strong>main.js 全局引入：<code>Vue.prototype.$axios = axios</code>，使用 <code>this.$axios</code> 来使用 Axios</strong></p>\n<p><strong>Search.vue，搜索框，将 ajax 请求到的数据传给 List.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;section class&#x3D;&quot;jumbotron&quot;&gt;\n    &lt;h3 class&#x3D;&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;&#x2F;h3&gt;\n    &lt;div&gt;\n      &lt;input type&#x3D;&quot;text&quot;\n             placeholder&#x3D;&quot;enter the name you search&quot;\n             v-model&#x3D;&quot;keyWord&quot; &#x2F;&gt; \n      &lt;button @click&#x3D;&quot;searchUsers&quot;&gt;Search&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;section&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport axios from &#39;axios&#39;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Search&#39;,\n  data() &#123;\n    return &#123;\n      keyWord: &#39;&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    searchUsers() &#123;\n      &#x2F;&#x2F; 请求前更新 List 的数据\n      &#x2F;&#x2F; 欢迎词为 true（只有第一次需要欢迎词，后面都不需要），加载中为 false，错误信息为 false，数据为空数组\n      this.$bus.$emit(&#39;updateListData&#39;, &#123; isFirst: true, isLoading: false, errMsg: &#39;&#39;, users: [] &#125;)\n      &#x2F;&#x2F; 向 GitHub 发送 ajax 请求\n      axios.get(&#96;https:&#x2F;&#x2F;api.github.com&#x2F;search&#x2F;users?q&#x3D;$&#123;this.keyWord&#125;&#96;).then(\n        response &#x3D;&gt; &#123;\n          console.log(&#39;请求成功了&#39;)\n          &#x2F;&#x2F; 请求成功后更新 List 的数据，传递给 Lsit组件，不需要欢迎词，\n          this.$bus.$emit(&#39;updateListData&#39;, &#123; isLoading: false, errMsg: &#39;&#39;, users: response.data.items &#125;)\n        &#125;,\n        error &#x3D;&gt; &#123;\n          &#x2F;&#x2F; 请求失败后更新 List 的数据\n          console.log(&#39;请求失败&#39;, error.message);\n          this.$bus.$emit(&#39;updateListData&#39;, &#123; isLoading: false, errMsg: error.message, users: [] &#125;)\n        &#125;\n      )\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>List.vue，接收数据进行展示</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;row&quot;&gt;\n    &lt;!-- 展示用户列表 --&gt;\n    &lt;div v-show&#x3D;&quot;info.users.length&quot;\n         class&#x3D;&quot;card&quot;\n         v-for&#x3D;&quot;user in info.users&quot;\n         :key&#x3D;&quot;user.login&quot;&gt;\n      &lt;a :href&#x3D;&quot;user.html_url&quot; target&#x3D;&quot;_blank&quot;&gt;\n        &lt;img :src&#x3D;&quot;user.avatar_url&quot; style&#x3D;&#39;width: 100px&#39; &#x2F;&gt;\n      &lt;&#x2F;a&gt;\n      &lt;p class&#x3D;&quot;card-text&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;&#x2F;p&gt;\n    &lt;&#x2F;div&gt;\n    &lt;!-- 展示欢迎词 --&gt;\n    &lt;h1 v-show&#x3D;&quot;info.isFirst&quot;&gt;欢迎使用！&lt;&#x2F;h1&gt;\n    &lt;!-- 展示加载中 --&gt;\n    &lt;h1 v-show&#x3D;&quot;info.isLoading&quot;&gt;加载中....&lt;&#x2F;h1&gt;\n    &lt;!-- 展示错误信息 --&gt;\n    &lt;h1 v-show&#x3D;&quot;info.errMsg&quot;&gt;&#123;&#123;info.errMsg&#125;&#125;&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;List&#39;,\n  data() &#123;\n    return &#123;\n      info: &#123;\n        isFirst: true,\n        isLoading: false,\n        errMsg: &#39;&#39;,\n        users: []\n      &#125;\n    &#125;\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;updateListData&#39;, dataObj &#x3D;&gt; &#123;\n      console.log(&#39;List 组件收到了数据&#39;);\n      &#x2F;&#x2F; 设置后面存在的对象属性会覆盖原来的属性，不存在的则不会覆盖，保留原来的属性\n      this.info &#x3D; &#123; ...this.info, ...dataObj &#125;\n    &#125;)\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"15-4-请求携带参数\"><a href=\"#15-4-请求携带参数\" class=\"headerlink\" title=\"15.4 请求携带参数\"></a>15.4 请求携带参数</h2><h3 id=\"15-4-1-Get-请求\"><a href=\"#15-4-1-Get-请求\" class=\"headerlink\" title=\"15.4.1 Get 请求\"></a>15.4.1 Get 请求</h3><p><img src=\"https://img-blog.csdnimg.cn/b54633f0f81b4840b4f22382775fdb6e.png\" alt=\"在这里插入图片描述\"><br><strong>三种方式：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">onSubmit() &#123;\n  &#x2F;&#x2F; axios.get(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;, &#123; params: &#123; recrTitle: &#39;开发&#39; &#125; &#125;).then(\n  &#x2F;&#x2F; axios.get(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test?recrTitle&#x3D;开发&#39;).then(\n  axios(&#123;\n\tmethod: &#39;get&#39;,\n\turl: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;,\n\tparams: &#123;\n\t  recrTitle: &#39;开发&#39;\n\t&#125;,\n\theaders: &#123; token: &#39;&#39;&#125;\n  &#125;).then(\n    response &#x3D;&gt; &#123;\n      this.menuList &#x3D; response.data\n    &#125;\n  )\n&#125;</code></pre>\n\n<p><strong>参数会带在 URL 后面</strong><br><img src=\"https://img-blog.csdnimg.cn/eefbc01851fb45cfad172ac93818838f.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"15-4-2-Post-请求\"><a href=\"#15-4-2-Post-请求\" class=\"headerlink\" title=\"15.4.2 Post 请求\"></a>15.4.2 Post 请求</h3><p><img src=\"https://img-blog.csdnimg.cn/f7b630fb30ee42b6b6ff6facc3142219.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">onSubmit() &#123;\n  &#x2F;&#x2F; axios.post(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;, &#123; recrTitle: &#39;开发&#39; &#125;).then(\n  &#x2F;&#x2F; axios.post(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;, this.formData&#125;).then(\n  axios(&#123;\n\tmethod: &#39;post&#39;,\n\turl: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;,\n\tdata: &#123;\n\t  recrTitle: &#39;开发&#39;\n\t&#125;,\n  &#125;).then(\n    response &#x3D;&gt; &#123;\n      this.menuList &#x3D; response.data\n    &#125;\n  )\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/d4f59dfe2ea34711a3f6eff08d11ecac.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/f4628e1c3a584a9b84b1af4ee3c58ec9.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"15-4-3-Put-请求\"><a href=\"#15-4-3-Put-请求\" class=\"headerlink\" title=\"15.4.3 Put 请求\"></a>15.4.3 Put 请求</h3><p><strong>与 Post 请求同</strong></p>\n<h3 id=\"15-4-4-Delete-请求\"><a href=\"#15-4-4-Delete-请求\" class=\"headerlink\" title=\"15.4.4 Delete 请求\"></a>15.4.4 Delete 请求</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">onSubmit() &#123;\n  &#x2F;&#x2F; axios.delete(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;, &#123; data: &#123; recrTitle: &#39;开发&#39; &#125; &#125;).then(\n  axios(&#123;\n\tmethod: &#39;post&#39;,\n\turl: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;hrms&#x2F;recruitment&#x2F;test&#39;,\n\tdata: &#123;\n\t  recrTitle: &#39;开发&#39;\n\t&#125;,\n  &#125;).then(\n    response &#x3D;&gt; &#123;\n      this.menuList &#x3D; response.data\n    &#125;\n  )\n&#125;</code></pre>\n\n<h2 id=\"15-5-vue-resource（插件库）\"><a href=\"#15-5-vue-resource（插件库）\" class=\"headerlink\" title=\"15.5 vue-resource（插件库）\"></a>15.5 vue-resource（插件库）</h2><ol>\n<li>安装：<code>npm install vue-resource</code></li>\n<li>引入：<code>import vueResource from &#39;vue-resource&#39;</code></li>\n<li>使用：Vue.use(vueResource)</li>\n<li>发送请求时，把 axios 换成 this.$http，其他与axios 同</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.$http.get(&#96;https:&#x2F;&#x2F;api.github.com&#x2F;search&#x2F;users?q&#x3D;$&#123;this.keyWord&#125;&#96;).then(\n\tresponse &#x3D;&gt; &#123;\n\t\tconsole.log(&#39;请求成功了&#39;)\n\t&#125;\n\terror &#x3D;&gt; &#123;\n\t\tconsole.log(&#39;请求失败了&#39;)\n\t&#125;\n)</code></pre>\n\n<h1 id=\"16-插槽\"><a href=\"#16-插槽\" class=\"headerlink\" title=\"16. 插槽\"></a>16. 插槽</h1><p><strong>让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong></p>\n<h2 id=\"16-1-默认插槽\"><a href=\"#16-1-默认插槽\" class=\"headerlink\" title=\"16.1 默认插槽\"></a>16.1 默认插槽</h2><p><strong>Category.vue，定义插槽，子组件</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;category&quot;&gt;\n    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;&#x2F;h3&gt;\n    &lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;\n    &lt;slot&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;&#x2F;slot&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Category&#39;,\n  props: [&#39;title&#39;]\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>App.vue，父组件，填入 html 结构到子组件 Category.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;Category title&#x3D;&quot;美食&quot;&gt;\n      &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;s3.ax1x.com&#x2F;2021&#x2F;01&#x2F;16&#x2F;srJlq0.jpg&quot;\n           alt&#x3D;&quot;&quot;&gt;\n    &lt;&#x2F;Category&gt;\n\n    &lt;Category title&#x3D;&quot;游戏&quot;&gt;\n      &lt;ul&gt;\n        &lt;li v-for&#x3D;&quot;(g,index) in games&quot;\n            :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n    &lt;&#x2F;Category&gt;\n\n    &lt;Category title&#x3D;&quot;电影&quot;&gt;\n      &lt;video controls\n             src&#x3D;&quot;http:&#x2F;&#x2F;clips.vorwaerts-gmbh.de&#x2F;big_buck_bunny.mp4&quot;&gt;&lt;&#x2F;video&gt;\n    &lt;&#x2F;Category&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport Category from &#39;.&#x2F;components&#x2F;Category&#39;\nexport default &#123;\n  name: &#39;App&#39;,\n  components: &#123; Category &#125;,\n  data() &#123;\n    return &#123;\n      games: [&#39;红色警戒&#39;, &#39;穿越火线&#39;, &#39;劲舞团&#39;, &#39;超级玛丽&#39;],\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"16-2-具名插槽\"><a href=\"#16-2-具名插槽\" class=\"headerlink\" title=\"16.2 具名插槽\"></a>16.2 具名插槽</h2><p><strong>Category.vue，定义插槽，使用 slot 给插槽定义名字，假如存在多个插槽时必须定义名字，只有一个插槽可忽略</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;category&quot;&gt;\n    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;&#x2F;h3&gt;\n    &lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;\n    &lt;slot name&#x3D;&quot;center&quot;&gt;Center 我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;&#x2F;slot&gt;\n    &lt;slot name&#x3D;&quot;footer&quot;&gt;Footer 我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;&#x2F;slot&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Category&#39;,\n  props: [&#39;title&#39;]\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>App.vue，父组件，填入 html 结构到子组件 Category.vue，使用 slot 表示填入对应的插槽</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;Category title&#x3D;&quot;美食&quot;&gt;\n      &lt;!-- 填入插槽 center --&gt;\n      &lt;img slot&#x3D;&quot;center&quot;\n           src&#x3D;&quot;https:&#x2F;&#x2F;s3.ax1x.com&#x2F;2021&#x2F;01&#x2F;16&#x2F;srJlq0.jpg&quot;\n           alt&#x3D;&quot;&quot;&gt;\n      &lt;!-- 插槽 footer 未填入，则显示默认值 --&gt;\n    &lt;&#x2F;Category&gt;\n\n    &lt;Category title&#x3D;&quot;游戏&quot;&gt;\n      &lt;!-- 填入插槽 center --&gt;\n      &lt;ul slot&#x3D;&quot;center&quot;&gt;\n        &lt;li v-for&#x3D;&quot;(g,index) in games&quot;\n            :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n      &lt;!-- 填入插槽 footer --&gt;\n      &lt;div class&#x3D;&quot;foot&quot;\n           slot&#x3D;&quot;footer&quot;&gt;\n        &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot;&gt;单机游戏&lt;&#x2F;a&gt;\n        &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot;&gt;热门游戏&lt;&#x2F;a&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;Category&gt;\n\n    &lt;Category title&#x3D;&quot;电影&quot;&gt;\n      &lt;video slot&#x3D;&quot;center&quot;\n             controls\n             src&#x3D;&quot;http:&#x2F;&#x2F;clips.vorwaerts-gmbh.de&#x2F;big_buck_bunny.mp4&quot;&gt;&lt;&#x2F;video&gt;\n      &lt;!-- &lt;template v-slot:footer&gt; --&gt;\n      &lt;template slot&#x3D;&quot;footer&quot;&gt;\n        &lt;div class&#x3D;&quot;foot&quot;&gt;\n          &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot;&gt;经典&lt;&#x2F;a&gt;\n          &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot;&gt;热门&lt;&#x2F;a&gt;\n          &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.fan223.cn&quot;&gt;推荐&lt;&#x2F;a&gt;\n        &lt;&#x2F;div&gt;\n        &lt;h4 align&#x3D;&quot;center&quot;&gt; 欢迎观看！&lt;&#x2F;h4&gt;\n      &lt;&#x2F;template&gt;\n    &lt;&#x2F;Category&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport Category from &#39;.&#x2F;components&#x2F;Category&#39;\nexport default &#123;\n  name: &#39;App&#39;,\n  components: &#123; Category &#125;,\n  data() &#123;\n    return &#123;\n      games: [&#39;红色警戒&#39;, &#39;穿越火线&#39;, &#39;劲舞团&#39;, &#39;超级玛丽&#39;],\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/f18f5ca6b120406eba01d8cdc0918cb2.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"16-3-作用域插槽\"><a href=\"#16-3-作用域插槽\" class=\"headerlink\" title=\"16.3 作用域插槽\"></a>16.3 作用域插槽</h2><p><strong>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</strong></p>\n<p><strong>Category.vue，数据在里面，通过数据绑定，让 App.vue 可以获取到数据，:name&#x3D;‘xxx’，name 表示绑定的名字，xxx 为表达式</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;category&quot;&gt;\n    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;&#x2F;h3&gt;\n    &lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;\n    &lt;slot :games&#x3D;&quot;games&quot;\n          :msg&#x3D;&quot;hello&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;&#x2F;slot&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Category&#39;,\n  props: [&#39;title&#39;],\n  data() &#123;\n    return &#123;\n      games: [&#39;红色警戒&#39;, &#39;穿越火线&#39;, &#39;劲舞团&#39;, &#39;超级玛丽&#39;],\n      hello: &#39;hello&#39;\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>App.vue，使用 scope&#x3D;‘xxx’ 或 slot-scope&#x3D;‘xxx’ 来获取数据对象，然后用该数据对象 xxx.name 获取 Category 组件的数据，或者直接 scope&#x3D;{name} 或 slot-scope&#x3D;{name} 直接获取传过来的数据</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;container&quot;&gt;\n\n    &lt;Category title&#x3D;&quot;游戏&quot;&gt;\n      &lt;!-- &lt;template scope&#x3D;&quot;fan&quot;&gt; --&gt;\n      &lt;!-- 先获取数据对象，名字自定义，然后用该数据对象.name 获取数据，name 为数据绑定时的名字 --&gt;\n      &lt;template slot-scope&#x3D;&quot;fan&quot;&gt;\n        &lt;ul&gt;\n          &lt;li v-for&#x3D;&quot;(g,index) in fan.games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n        &lt;h4&gt; &#123;&#123;fan.msg&#125;&#125; &lt;&#x2F;h4&gt;\n      &lt;&#x2F;template&gt;\n    &lt;&#x2F;Category&gt;\n\n    &lt;Category title&#x3D;&quot;游戏&quot;&gt;\n      &lt;!-- 直接通过 &#123;name&#125; 获取数据 --&gt;\n      &lt;template slot-scope&#x3D;&quot;&#123;games, msg&#125;&quot;&gt;\n        &lt;ol&gt;\n          &lt;li v-for&#x3D;&quot;(g,index) in games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ol&gt;\n        &lt;h4&gt; &#123;&#123;msg&#125;&#125; &lt;&#x2F;h4&gt;\n      &lt;&#x2F;template&gt;\n    &lt;&#x2F;Category&gt;\n\n    &lt;Category title&#x3D;&quot;游戏&quot;&gt;\n      &lt;template slot-scope&#x3D;&quot;fan&quot;&gt;\n        &lt;h4 v-for&#x3D;&quot;(g,index) in fan.games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;\n      &lt;&#x2F;template&gt;\n    &lt;&#x2F;Category&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport Category from &#39;.&#x2F;components&#x2F;Category&#39;\nexport default &#123;\n  name: &#39;App&#39;,\n  components: &#123; Category &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/e764c35df1774d7abfb731b027f0260f.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"17-Vuex\"><a href=\"#17-Vuex\" class=\"headerlink\" title=\"17. Vuex\"></a>17. <a href=\"https://github.com/vuejs/vuex\">Vuex</a></h1><h2 id=\"17-1-概念\"><a href=\"#17-1-概念\" class=\"headerlink\" title=\"17.1 概念\"></a>17.1 概念</h2><p>在 Vue 中<strong>实现集中式状态（数据）管理的一个 Vue 插件</strong>，对 Vue 应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且<strong>适用于任意组件间通信</strong></p>\n<ol>\n<li><strong>多个组件依赖于同一状态</strong></li>\n<li><strong>来自不同组件的行为需要变更同一状态</strong></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/29aa21624e704061af5ce99894a0b631.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/72a71127c12d421984a3a6d844adf2da.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"17-2-Vuex-核心概念和-API\"><a href=\"#17-2-Vuex-核心概念和-API\" class=\"headerlink\" title=\"17.2 Vuex 核心概念和 API\"></a>17.2 Vuex 核心概念和 API</h2><h3 id=\"17-2-1-state\"><a href=\"#17-2-1-state\" class=\"headerlink\" title=\"17.2.1 state\"></a>17.2.1 state</h3><ol>\n<li><p>Vuex 管理的状态对象</p>\n</li>\n<li><p>它应该是唯一的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const state &#x3D; &#123;\n\txxx: initValue\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/c085c4f616fe4cf7b4adf68d143784f4.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n<h3 id=\"17-2-2-actions\"><a href=\"#17-2-2-actions\" class=\"headerlink\" title=\"17.2.2 actions\"></a>17.2.2 actions</h3><ol>\n<li><p>值为一个对象，包含多个响应用户动作的回调函数</p>\n</li>\n<li><p>在组件中使用：$store.dispatch(‘对应的 action 回调名’, 参数) 触发 actions 中的回调</p>\n</li>\n<li><p>通过 commit() 来触发 mutation 中函数的调用, 间接更新 state</p>\n</li>\n<li><p>可以包含异步代码（定时器, ajax 等等）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const actions &#x3D; &#123;\n\tyyy(context, value)&#123;\n\t    if (context.state.xxx % 2) &#123;\n\t      console.log(context, value);\n\t      context.commit(&#39;YYY&#39;, value)\n\t    &#125;\n\t&#125;,\n&#125;</code></pre></li>\n<li><p><strong>context： 上下文，包含多个可能会用到的方法，如 dispatch，可以分发 Action</strong><br><img src=\"https://img-blog.csdnimg.cn/47fe4c170cdc4a47af406cb9172ec0a1.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const actions &#x3D; &#123;\n\tyyy(context, value)&#123;\n\t\tcontext.dispatch(&#39;yyyy&#39;, value);\n\t&#125;,\n\tyyyy(context, value)&#123;\n\t\t......\n\t\tcontext.commit(&#39;YYY&#39;, value)\n\t&#125;,\n&#125;</code></pre></li>\n</ol>\n<h3 id=\"17-2-3-mutations\"><a href=\"#17-2-3-mutations\" class=\"headerlink\" title=\"17.2.3 mutations\"></a>17.2.3 mutations</h3><ol>\n<li>值是一个对象，包含多个直接更新 state 的方法</li>\n<li>在 action 中使用：commit(‘对应的 mutations 方法名’, 参数) 触发 mutations 中的回调</li>\n<li>不能写异步代码、只能单纯的操作 state<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const mutations &#x3D; &#123;\n\tYYY(state, value)&#123;\n\t    state.xxx +&#x3D; value;\n\t&#125;,\n&#125;</code></pre></li>\n</ol>\n<h3 id=\"17-2-4-getters\"><a href=\"#17-2-4-getters\" class=\"headerlink\" title=\"17.2.4 getters\"></a>17.2.4 getters</h3><p><strong>当 state 中的数据需要经过加工后再使用时，使用 getters 加工</strong></p>\n<ol>\n<li>值为一个对象，包含多个用于返回数据的函数</li>\n<li>如何使用？—— $store.getters.xxx<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const getters &#x3D; &#123;\n\tzzz(state)&#123;\n\t    return state.xxx * 10\n\t&#125;,\n&#125;</code></pre></li>\n</ol>\n<h3 id=\"17-2-5-modules\"><a href=\"#17-2-5-modules\" class=\"headerlink\" title=\"17.2.5 modules\"></a>17.2.5 modules</h3><ol>\n<li>包含多个 module，用于模块化</li>\n<li>一个 module 是一个 store 的配置对象</li>\n<li>与一个组件（包含有共享数据）对应</li>\n</ol>\n<h2 id=\"17-3-搭建-Vuex-环境\"><a href=\"#17-3-搭建-Vuex-环境\" class=\"headerlink\" title=\"17.3 搭建 Vuex 环境\"></a>17.3 搭建 Vuex 环境</h2><h3 id=\"17-3-1-安装\"><a href=\"#17-3-1-安装\" class=\"headerlink\" title=\"17.3.1 安装\"></a>17.3.1 安装</h3><p><strong>vue2 中要使用 vuex3 版本，vuex4 只能在 vue3 中使用</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install vuex@3</code></pre>\n\n<h3 id=\"17-3-2-准备-store\"><a href=\"#17-3-2-准备-store\" class=\"headerlink\" title=\"17.3.2 准备 store\"></a>17.3.2 准备 store</h3><p><strong>在 src 目录下创建 store&#x2F;index.js</strong><br><img src=\"https://img-blog.csdnimg.cn/09bcb6683264425e91e47c153036132a.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件用于创建 Vuex 中最为核心的 store\n\n&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 Vuex\nimport Vuex from &#39;vuex&#39;\n&#x2F;&#x2F; 应用 Vuex 插件\nVue.use(Vuex)\n\n&#x2F;&#x2F; 准备 actions——用于响应组件中的动作\nconst actions &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备 mutations——用于操作数据（state）\nconst mutations &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备state——用于存储数据\nconst state &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备getters——用于将state中的数据进行加工\nconst getters &#x3D; &#123;&#125;\n\n&#x2F;&#x2F;创建并暴露 store\nexport default new Vuex.Store(&#123;\n  &#x2F;&#x2F;actions: actions,\n  actions,\n  mutations,\n  state,\n  getters\n&#125;)</code></pre>\n\n<h3 id=\"17-3-3-在-main-js-引入-store\"><a href=\"#17-3-3-在-main-js-引入-store\" class=\"headerlink\" title=\"17.3.3 在 main.js 引入 store\"></a>17.3.3 在 main.js 引入 store</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n\n&#x2F;&#x2F; 引入 store，假如 store 文件夹下为 index.js，则默认会去找，可以不写\n&#x2F;&#x2F; import store from &#39;.&#x2F;store&#x2F;index&#39;\nimport store from &#39;.&#x2F;store&#39;\n\nnew Vue(&#123;\n  render:h &#x3D;&gt; h(App),\n  store, &#x2F;&#x2F; 使用\n  beforeCreate() &#123;\n    Vue.prototype.$bus &#x3D; this;\n  &#125;,\n&#125;).$mount(&#39;#app&#39;)</code></pre>\n\n<p><strong>使用时用 this.$store 来使用 store</strong></p>\n<h2 id=\"17-4-工作流程-x2F-原理\"><a href=\"#17-4-工作流程-x2F-原理\" class=\"headerlink\" title=\"17.4 工作流程&#x2F;原理\"></a>17.4 工作流程&#x2F;原理</h2><p><img src=\"https://img-blog.csdnimg.cn/f0ae96fdadda43cca8f6b079d7f5729b.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>按照流程，数据在 state 中，sum &#x3D; 0</li>\n<li>首先在 Count.vue 中用 <code>this.$store.dispatch(&#39;addOdd&#39;, this.num)</code> 传递函数名和参数给 store 的 actions</li>\n<li>actions 接收到后进行处理（逻辑判断等）后再用 <code>context.commit(&#39;ADD&#39;, value)</code> 传递建议大写的函数名和参数给 mutations</li>\n<li>在 mutations 中对 state 中的数据进行操作</li>\n<li><strong>假如不用在 actions 进行处理（逻辑判断等），可以直接在 Count.vue 中用 <code>this.$store.commit(&#39;REDUCE&#39;, this.num)</code> 传递给 mutations</strong></li>\n</ol>\n<h2 id=\"17-5-使用\"><a href=\"#17-5-使用\" class=\"headerlink\" title=\"17.5 使用\"></a>17.5 使用</h2><p><strong>Count.vue，用于计算的组件，组件中读取 Vuex 中的数据（state）：<code>$store.state.sum</code>，读取加工后的数据（getter）：<code>$store.getters.bigSum</code></strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;当前求和为：&#123;&#123;$store.state.sum&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;h1&gt;放大 10 倍后的值：&#123;&#123;$store.getters.bigSum&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;select v-model.number&#x3D;&quot;num&quot;&gt;\n      &lt;option value&#x3D;&quot;1&quot;&gt;1&lt;&#x2F;option&gt;\n      &lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;\n      &lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;\n    &lt;&#x2F;select&gt;\n    &lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;decrement&quot;&gt;-&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;incrementWait&quot;&gt;等一等再加&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Count&#39;,\n  data() &#123;\n    return &#123;\n      num: 1, &#x2F;&#x2F; 用户选择的数字\n    &#125;\n  &#125;,\n  methods: &#123;\n    increment() &#123;\n      &#x2F;&#x2F; this.$store.dispatch(&#39;add&#39;, this.num)\n      this.$store.commit(&#39;ADD&#39;, this.num) &#x2F;&#x2F; 直接 commit 给 mutations\n    &#125;,\n    decrement() &#123;\n      &#x2F;&#x2F; this.$store.dispatch(&#39;reduce&#39;, this.num)\n      this.$store.commit(&#39;REDUCE&#39;, this.num) &#x2F;&#x2F; 直接 commit 给 mutations\n    &#125;,\n    incrementOdd() &#123;\n      &#x2F;&#x2F; 先 dispatch给 actions 进行处理，然后再 commit 给 mutations\n      this.$store.dispatch(&#39;addOdd&#39;, this.num)\n    &#125;,\n    incrementWait() &#123;\n      this.$store.dispatch(&#39;addWait&#39;, this.num)\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style lang&#x3D;&quot;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>store，即 src&#x2F;store&#x2F;index.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件用于创建 Vuex 中最为核心的 store\n\n&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 Vuex\nimport Vuex from &#39;vuex&#39;\n&#x2F;&#x2F; 应用 Vuex 插件\nVue.use(Vuex)\n\n&#x2F;&#x2F; 准备 actions——用于响应组件中的动作\nconst actions &#x3D; &#123;\n  &#x2F;&#x2F; add(context, value) &#123;\n  &#x2F;&#x2F;   context.commit(&#39;ADD&#39;, value);\n  &#x2F;&#x2F; &#125;,\n  &#x2F;&#x2F; reduce(context, value)&#123;\n  &#x2F;&#x2F;   context.commit(&#39;REDUCE&#39;, value)\n  &#x2F;&#x2F; &#125;,\n  addOdd(context, value)&#123;\n    if (context.state.sum % 2) &#123;\n      context.commit(&#39;ADD&#39;, value)\n    &#125;\n  &#125;,\n  addWait(context, value)&#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      context.commit(&#39;ADD&#39;, value)\n    &#125;, 500);\n  &#125;\n&#125;\n&#x2F;&#x2F; 准备 mutations——用于操作数据（state）\nconst mutations &#x3D; &#123;\n  ADD(state, value)&#123;\n    state.sum +&#x3D; value;\n  &#125;,\n  REDUCE(state, value)&#123;\n    state.sum -&#x3D; value;\n  &#125;,\n&#125;\n&#x2F;&#x2F; 准备state——用于存储数据\nconst state &#x3D; &#123;\n  sum: 0 &#x2F;&#x2F; 和\n&#125;\n&#x2F;&#x2F; 准备getters——用于将state中的数据进行加工\nconst getters &#x3D; &#123;\n\tbigSum(state)&#123;\n\t\treturn state.sum*10\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 创建并暴露 store\nexport default new Vuex.Store(&#123;\n  actions,\n  mutations,\n  state,\n  getters\n&#125;)</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/c39c476b93584a63a23df271be6c1622.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/dd351210b7784b6b9be4cbb2a45d2279.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"17-6-map-方法\"><a href=\"#17-6-map-方法\" class=\"headerlink\" title=\"17.6 map 方法\"></a>17.6 map 方法</h2><ol>\n<li><strong>mapState方法：用于帮助我们映射 state 中的数据为计算属性</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">computed: &#123;\n\t&#x2F;&#x2F; ...Obj，将 Obj 里的每一组 key:value 展开放到该位置\n\t&#x2F;&#x2F; 借助 mapState 生成计算属性：sum、school、subject（对象写法）\n    ...mapState(&#123;sum:&#39;sum&#39;,school:&#39;school&#39;,subject:&#39;subject&#39;&#125;),\n\n\t&#x2F;&#x2F; 借助 mapState 生成计算属性：sum、school、subject（数组写法），名字相同可简写\n\t...mapState([&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),\n&#125;,</code></pre></li>\n<li><strong>mapGetters方法：用于帮助我们映射 getters 中的数据为计算属性</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> computed: &#123;\n\t&#x2F;&#x2F; 借助mapGetters 生成计算属性：bigSum（对象写法）\n\t...mapGetters(&#123;bigSum:&#39;bigSum&#39;&#125;),\n\n\t&#x2F;&#x2F; 借助mapGetters 生成计算属性：bigSum（数组写法），名字相同可简写\n\t...mapGetters([&#39;bigSum&#39;])\n&#125;,</code></pre></li>\n<li><strong>mapActions方法：用于帮助我们生成与 actions 对话的方法，即：包含 <code>$store.dispatch(xxx)</code> 的函数</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods:&#123;\n\t&#x2F;&#x2F; 靠 mapActions 生成：incrementOdd、incrementWait（对象形式）\n\t...mapActions(&#123;incrementOdd:&#39;addOdd&#39;,incrementWait:&#39;addWait&#39;&#125;)\n\n\t&#x2F;&#x2F; 靠 mapActions 生成：incrementOdd、incrementWait（数组形式），名字相同可简写\n\t...mapActions([&#39;addOdd&#39;,&#39;addWait&#39;])\n&#125;</code></pre></li>\n<li><strong>mapMutations方法：用于帮助我们生成与 mutations 对话的方法，即：包含 <code>$store.commit(xxx)</code>的函数</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods:&#123;\n\t&#x2F;&#x2F; 靠 mapActions 生成：increment、decrement（对象形式）\n\t...mapMutations(&#123;increment:&#39;ADD&#39;,decrement:&#39;REDUCE&#39;&#125;),\n\n\t&#x2F;&#x2F; 靠 mapMutations 生成：JIA、JIAN（对象形式），名字相同可简写\n\t...mapMutations([&#39;ADD&#39;,&#39;REDUCE&#39;]),\n&#125;</code></pre></li>\n</ol>\n<p><strong>备注：mapActions与 mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;h1&gt;放大 10 倍后的值：&#123;&#123;$store.getters.bigSum&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;h1&gt;学校：&#123;&#123;school&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;h1&gt;学科：&#123;&#123;subject&#125;&#125;&lt;&#x2F;h1&gt;\n    &lt;select v-model.number&#x3D;&quot;num&quot;&gt;\n      &lt;option value&#x3D;&quot;1&quot;&gt;1&lt;&#x2F;option&gt;\n      &lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;\n      &lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;\n    &lt;&#x2F;select&gt;\n    &lt;!-- 需要传参 --&gt;\n    &lt;button @click&#x3D;&quot;increment(num)&quot;&gt;+&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;decrement(num)&quot;&gt;-&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;incrementOdd(num)&quot;&gt;当前求和为奇数再加&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;incrementWait(num)&quot;&gt;等一等再加&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport &#123; mapState, mapGetters, mapActions, mapMutations &#125; from &#39;vuex&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Count&#39;,\n  data() &#123;\n    return &#123;\n      num: 1, &#x2F;&#x2F; 用户选择的数字\n    &#125;\n  &#125;,\n  methods: &#123;\n    ...mapMutations(&#123; increment: &#39;ADD&#39;, decrement: &#39;REDUCE&#39; &#125;),\n\n    ...mapActions(&#123; incrementOdd: &#39;addOdd&#39;, incrementWait: &#39;addWait&#39; &#125;)\n  &#125;,\n  computed: &#123;\n    ...mapState([&#39;sum&#39;, &#39;school&#39;, &#39;subject&#39;]),\n\n    ...mapGetters([&#39;bigSum&#39;])\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n&lt;style lang&#x3D;&quot;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/f1ab8182391a4d3eb111731f7355a528.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"17-7-模块化-命名空间\"><a href=\"#17-7-模块化-命名空间\" class=\"headerlink\" title=\"17.7 模块化+命名空间\"></a>17.7 模块化+命名空间</h2><p><strong>修改 store</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const countAbout &#x3D; &#123;\n  namespaced:true, &#x2F;&#x2F; 开启命名空间\n  state:&#123;x:1&#125;,\n  mutations: &#123; ... &#125;,\n  actions: &#123; ... &#125;,\n  getters: &#123;\n    bigSum(state)&#123;\n       return state.sum * 10\n    &#125;\n  &#125;\n&#125;\n\nconst personAbout &#x3D; &#123;\n  namespaced:true, &#x2F;&#x2F; 开启命名空间\n  state:&#123; ... &#125;,\n  mutations: &#123; ... &#125;,\n  actions: &#123; ... &#125;\n&#125;\n\nconst store &#x3D; new Vuex.Store(&#123;\n  modules: &#123;\n    countAbout,\n    personAbout\n  &#125;\n&#125;)</code></pre>\n\n<ol>\n<li>开启命名空间后，组件中读取 state 数据<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 方式一：自己直接读取\nthis.$store.state.personAbout.list\n&#x2F;&#x2F; 方式二：借助 mapState读取，在前面加上模块的名字\n...mapState(&#39;countAbout&#39;, [&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),</code></pre></li>\n<li>开启命名空间后，组件中读取 getters 数据<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 方式一：自己直接读取\nthis.$store.getters[&#39;personAbout&#x2F;firstPersonName&#39;]\n&#x2F;&#x2F; 方式二：借助 mapGetters 读取\n...mapGetters(&#39;countAbout&#39;, [&#39;bigSum&#39;])</code></pre></li>\n<li>开启命名空间后，组件中调用 dispatch<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 方式一：自己直接 dispatch\nthis.$store.dispatch(&#39;personAbout&#x2F;addPersonWang&#39;, person)\n&#x2F;&#x2F; 方式二：借助 mapActions\n...mapActions(&#39;countAbout&#39;, &#123;incrementOdd:&#39;addOdd&#39;,incrementWait:&#39;addWait&#39;&#125;)</code></pre></li>\n<li>开启命名空间后，组件中调用commit<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> &#x2F;&#x2F; 方式一：自己直接 commit\nthis.$store.commit(&#39;personAbout&#x2F;ADD_PERSON&#39;, person)\n&#x2F;&#x2F; 方式二：借助 mapMutations\n...mapMutations(&#39;countAbout&#39;, &#123;increment:&#39;ADD&#39;,decrement:&#39;REDUCE&#39;&#125;),</code></pre></li>\n</ol>\n<h1 id=\"18-vue-router-路由\"><a href=\"#18-vue-router-路由\" class=\"headerlink\" title=\"18. vue-router 路由\"></a>18. vue-router 路由</h1><p><strong>一个路由（route）就是一组映射关系（key - value），key 为路径, value 可能是 function 或 componen，多个路由需要路由器（router）进行管理。vue-router 是 vue 的一个插件库，专门用来实现 SPA 应用</strong></p>\n<h2 id=\"18-1-SPA\"><a href=\"#18-1-SPA\" class=\"headerlink\" title=\"18.1 SPA\"></a>18.1 SPA</h2><ol>\n<li><strong>单页 Web 应用（single page web application，SPA）</strong></li>\n<li>整个应用只有一个完整的页面。</li>\n<li><strong>点击页面中的导航链接不会刷新页面，只会做页面的局部更新</strong></li>\n<li><strong>数据需要通过 ajax 请求获取</strong></li>\n</ol>\n<h2 id=\"18-2-路由分类\"><a href=\"#18-2-路由分类\" class=\"headerlink\" title=\"18.2 路由分类\"></a>18.2 路由分类</h2><ol>\n<li>后端路由：<ol>\n<li>理解：<strong>value 是 function, 用于处理客户端提交的请求</strong></li>\n<li>工作过程：服务器接收到一个请求时, 根据请求路径找到匹配的函数来处理请求, 返回响应数据</li>\n</ol>\n</li>\n<li>前端路由：<ol>\n<li>理解：<strong>value 是 component，用于展示页面内容</strong></li>\n<li>工作过程：当浏览器的路径改变时, 对应的组件就会显示</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"18-3-基础使用\"><a href=\"#18-3-基础使用\" class=\"headerlink\" title=\"18.3 基础使用\"></a>18.3 基础使用</h2><ol>\n<li>安装：<code>npm install vue-router@3</code>，当前 vue-router 默认版本为 vue-router4，用在 Vue3 中，Vue2 只能用 vue-router3，安装时需要指定版本</li>\n<li>创建 router 的组件，<strong>路由组件通常存放在 src&#x2F;pages 文件夹，一般组件通常存放在 src&#x2F;components 文件夹</strong><br><img src=\"https://img-blog.csdnimg.cn/a9917b2c0be640f989aca75a92a84ce9.png\" alt=\"在这里插入图片描述\"></li>\n<li><strong>创建路由器，在 src 目录下创建 router&#x2F;index.js</strong><br><img src=\"https://img-blog.csdnimg.cn/9c950106987848dfbb1a4e948456c700.png\" alt=\"在这里插入图片描述\"><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件专门用于创建整个应用的路由器\n&#x2F;&#x2F; 引入VueRouter\nimport VueRouter from &#39;vue-router&#39;\n\n&#x2F;&#x2F; 引入路由组件\nimport Home from &#39;..&#x2F;pages&#x2F;Home.vue&#39;\nimport About from &#39;..&#x2F;pages&#x2F;About.vue&#39;\n\n\n&#x2F;&#x2F; 创建 router 实例对象（路由器），去管理一组一组的路由规则，并暴露出去\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123;\n      path: &#39;&#x2F;about&#39;,\n      component: About\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;home&#39;,\n      component: Home\n    &#125;,\n  ]\n&#125;)</code></pre></li>\n<li><strong>main.js，引入 vue-router，使用该插件</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\n&#x2F;&#x2F; 引入 VueRouter\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入路由器\nimport router from &#39;.&#x2F;router&#x2F;index.js&#39;\n\n&#x2F;&#x2F; 关闭 Vue 的生产提示\nVue.config.productionTip &#x3D; false\n\n&#x2F;&#x2F; 应用插件\nVue.use(VueRouter)\n\n&#x2F;&#x2F;创建vm\nnew Vue(&#123;\n\tel:&#39;#app&#39;,\n\trender: h &#x3D;&gt; h(App),\n\trouter:router\n&#125;)</code></pre></li>\n<li><strong>App.vue，使用 &lt;router-link to&#x3D;”&#x2F;xxx”&gt; 标签实现路由的切换，to 表示路由路径，使用 &lt;router-view&gt; 标签指定组件的呈现位置</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n\t&lt;h2&gt;Vue Router Demo&lt;&#x2F;h2&gt;\n    &lt;div&gt;\n\t\t&lt;!-- 原始 html 中使用a标签实现页面的跳转 --&gt;\n\t\t&lt;!-- &lt;a class&#x3D;&quot;list-group-item active&quot; href&#x3D;&quot;.&#x2F;about.html&quot;&gt;About&lt;&#x2F;a&gt; --&gt;\n\t\t&lt;!-- &lt;a class&#x3D;&quot;list-group-item&quot; href&#x3D;&quot;.&#x2F;home.html&quot;&gt;Home&lt;&#x2F;a&gt; --&gt;\n\n\t\t&lt;!-- Vue中借助 router-link 标签实现路由的切换 --&gt;\n\t\t&lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;\n\t\t&lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;Home&lt;&#x2F;router-link&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;div&gt;\n\t\t&lt;!-- 指定组件的呈现位置 --&gt;\n\t\t&lt;router-view&gt;&lt;&#x2F;router-view&gt;\n\t&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;App&#39;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre></li>\n</ol>\n<p><strong>点击页面中的导航链接不会刷新页面，只会做页面的局部更新</strong><br><img src=\"https://img-blog.csdnimg.cn/30a11cc90d224267935d9f8e3f8aa7b1.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/7a1e9b9b883c4f22948379757899b418.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li><strong>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</strong></li>\n<li>每个组件都有自己的 $route 属性，里面存储着自己的路由信息</li>\n<li><strong>整个应用只有一个 router</strong>，可以通过组件的 $router 属性获取到</li>\n</ol>\n<h2 id=\"18-4-多级（嵌套）路由\"><a href=\"#18-4-多级（嵌套）路由\" class=\"headerlink\" title=\"18.4 多级（嵌套）路由\"></a>18.4 多级（嵌套）路由</h2><ol>\n<li><p><strong>再准备两个路由组件 Message.vue 和 News.vue</strong><br><img src=\"https://img-blog.csdnimg.cn/4187c1fb6cd24a8cb8877e7b676880bd.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><strong>在路由器里配置路由规则，src&#x2F;router&#x2F;index.js，使用 children 属性来配置多级路由</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件专门用于创建整个应用的路由器\n&#x2F;&#x2F; 引入VueRouter\nimport VueRouter from &#39;vue-router&#39;\n\n&#x2F;&#x2F; 引入路由组件\nimport Home from &#39;..&#x2F;pages&#x2F;Home.vue&#39;\nimport About from &#39;..&#x2F;pages&#x2F;About.vue&#39;\nimport News from &#39;..&#x2F;pages&#x2F;News.vue&#39;\nimport Message from &#39;..&#x2F;pages&#x2F;Message.vue&#39;\n\n\n&#x2F;&#x2F; 创建一个路由器\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123;\n      path: &#39;&#x2F;about&#39;,\n      component: About\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;home&#39;, &#x2F;&#x2F; 默认为一级路由\n      component: Home,\n      children: [ &#x2F;&#x2F; children 配置二级路由\n        &#123;\n          path: &#39;news&#39;, &#x2F;&#x2F; 此处前面不要加 &#x2F;，如一定不要写：&#x2F;news\n          component: News,\n        &#125;,\n        &#123;\n          path: &#39;message&#39;,\n          component: Message &#125;,\n      ]\n    &#125;,\n  ]\n&#125;)</code></pre></li>\n<li><p>在 Home.vue 路由组件添加子路由</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Home组件内容&lt;&#x2F;h2&gt;\n    &lt;div&gt; &lt;ul class&#x3D;&quot;nav nav-tabs&quot;&gt;\n        &lt;li&gt;\n          &lt;!-- 跳转（要写完整路径）--&gt;\n          &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;\n        &lt;&#x2F;li&gt;\n        &lt;li&gt;\n          &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;message&quot;&gt;Message&lt;&#x2F;router-link&gt;\n        &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt;\n      &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Home&#39;\n&#125;\n&lt;&#x2F;script&gt;</code></pre></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/0a20c17ab0df48abbc910bc128c3b902.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/7ea484ea57b84c94a9efc3e3ee1cb0a3.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"18-5-路由传参\"><a href=\"#18-5-路由传参\" class=\"headerlink\" title=\"18.5 路由传参\"></a>18.5 路由传参</h2><h3 id=\"18-5-1-路由的query参数\"><a href=\"#18-5-1-路由的query参数\" class=\"headerlink\" title=\"18.5.1 路由的query参数\"></a>18.5.1 路由的query参数</h3><ol>\n<li>传递参数<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;message in messageList&quot; :key&#x3D;&quot;message.id&quot;&gt;\n        &lt;!-- 跳转路由并携带 query 参数，to 的字符串写法 --&gt;\n        &lt;!-- &lt;router-link :to&#x3D;&quot;&#96;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;message.id&#125;&amp;title&#x3D;$&#123;message.title&#125;&#96;&quot;&gt; &#123;&#123; message.title &#125;&#125; &lt;&#x2F;router-link&gt; --&gt;\n\n        &lt;!-- 跳转路由并携带 query 参数，to 的对象写法 --&gt;\n        &lt;router-link :to&#x3D;&quot;&#123;\n            path:&#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,\n            query:&#123;\n              id: message.id,\n              title: message.title\n            &#125;\n          &#125;&quot;&gt; &#123;&#123;message.title&#125;&#125; &lt;&#x2F;router-link&gt;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Message&#39;,\n  data() &#123;\n    return &#123;\n      messageList: [\n        &#123; id: &#39;001&#39;, title: &#39;message001&#39; &#125;,\n        &#123; id: &#39;002&#39;, title: &#39;message002&#39; &#125;,\n        &#123; id: &#39;003&#39;, title: &#39;message003&#39; &#125;,\n      ]\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre></li>\n<li>接收参数<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;ul&gt;\n  \t&lt;!-- 接收参数 --&gt;\n    &lt;li&gt;消息编号：&#123;&#123;$route.query.id&#125;&#125;&lt;&#x2F;li&gt;\n    &lt;li&gt;消息标题：&#123;&#123;$route.query.title&#125;&#125; &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Detail&#39;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre></li>\n</ol>\n<h3 id=\"18-5-2-命名路由\"><a href=\"#18-5-2-命名路由\" class=\"headerlink\" title=\"18.5.2 命名路由\"></a>18.5.2 命名路由</h3><p><strong>在路由器里（即 src&#x2F;router&#x2F;index.js）使用 name 属性给路由命名</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件专门用于创建整个应用的路由器\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入组件\n......\n\n&#x2F;&#x2F; 创建一个路由器\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123; path: &#39;&#x2F;about&#39;, component: About &#125;,\n    &#123; path: &#39;&#x2F;home&#39;, component: Home, children: [\n        &#123; path: &#39;news&#39;, component: News, &#125;,\n        &#123; path: &#39;message&#39;, component: Message,\n          children: [\n            &#123;\n              name: &#39;detail&#39;, &#x2F;&#x2F; 给路由命名\n              path: &#39;detail&#39;,\n              component: Detail,\n            &#125;\n          ]\n        &#125;,\n      ]\n    &#125;,\n  ]\n&#125;)</code></pre>\n\n<p><strong>简化路由的跳转</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;message in messageList&quot; :key&#x3D;&quot;message.id&quot;&gt;\n        &lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;\n        &lt;router-link :to&#x3D;&quot;&#123;\n            name: &#39;detail&#39;,\n            &lt;!-- path:&#39;&#x2F;home&#x2F;message&#x2F;detail&#39;, --&gt;\n            query:&#123;\n              id: message.id,\n              title: message.title\n            &#125;\n          &#125;&quot;&gt; &#123;&#123;message.title&#125;&#125; &lt;&#x2F;router-link&gt;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<h3 id=\"18-5-2-路由的-params-参数\"><a href=\"#18-5-2-路由的-params-参数\" class=\"headerlink\" title=\"18.5.2 路由的 params 参数\"></a>18.5.2 路由的 params 参数</h3><p><strong>路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用命名路由 name 配置</strong></p>\n<ol>\n<li>配置路由，声明接收 params 参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件专门用于创建整个应用的路由器\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入组件\n......\n\n&#x2F;&#x2F; 创建一个路由器\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123; path: &#39;&#x2F;about&#39;, component: About &#125;,\n    &#123; path: &#39;&#x2F;home&#39;, component: Home, children: [\n        &#123; path: &#39;news&#39;, component: News, &#125;,\n        &#123; path: &#39;message&#39;, component: Message,\n          children: [\n            &#123;\n              name: &#39;detail&#39;, &#x2F;&#x2F; 给路由命名\n              path:&#39;detail&#x2F;:id&#x2F;:title&#39;, &#x2F;&#x2F; 使用占位符声明接收 params 参数\n              component: Detail,\n            &#125;\n          ]\n        &#125;,\n      ]\n    &#125;,\n  ]\n&#125;)</code></pre></li>\n<li>传递参数<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;message in messageList&quot; :key&#x3D;&quot;message.id&quot;&gt;\n        &lt;!-- 跳转并携带 params 参数，to 的字符串写法 --&gt;\n\t\t&lt;!-- &lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;message.id&#125;&#x2F;$&#123;message.title&#125;&quot;&gt;&#123;&#123;message.title&#125;&#125;&lt;&#x2F;router-link&gt; --&gt;\n\n        &lt;!-- 跳转路由并携带 params 参数，to 的对象写法 --&gt;\n        &lt;router-link :to&#x3D;&quot;&#123;\n            name: &#39;detail&#39;,\n            params:&#123;\n              id: message.id,\n              title: message.title\n            &#125;\n          &#125;&quot;&gt; &#123;&#123;message.title&#125;&#125; &lt;&#x2F;router-link&gt;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre></li>\n<li>接收参数<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li&gt;消息编号：&#123;&#123;$route.params.id&#125;&#125;&lt;&#x2F;li&gt;\n    &lt;li&gt;消息标题：&#123;&#123;$route.params.title&#125;&#125; &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;</code></pre></li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/1db5082e82764e4e8d3857d73b485553.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/e1d5be4062c24426a0ffcc7722793da7.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"18-6-路由的-props-配置\"><a href=\"#18-6-路由的-props-配置\" class=\"headerlink\" title=\"18.6 路由的 props 配置\"></a>18.6 路由的 props 配置</h2><p><strong>在路由器里（即 src&#x2F;router&#x2F;index.js）使用 name 属性给路由命名</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件专门用于创建整个应用的路由器\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入组件\n......\n\n&#x2F;&#x2F; 创建一个路由器\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123; path: &#39;&#x2F;about&#39;, component: About &#125;,\n    &#123; path: &#39;&#x2F;home&#39;, component: Home, children: [\n        &#123; path: &#39;news&#39;, component: News, &#125;,\n        &#123; path: &#39;message&#39;, component: Message,\n          children: [\n            &#123;\n              name: &#39;detail&#39;, &#x2F;&#x2F; 给路由命名\n              path: &#39;detail&#x2F;:id&#x2F;:title&#39;,\n              component: Detail,\n              &#x2F;&#x2F; 第一种写法：props 值为对象，该对象中所有的 key-value 的组合最终都会通过 props 传给 Detail 组件\n              &#x2F;&#x2F; props:&#123;a:900&#125;\n\n              &#x2F;&#x2F; 第二种写法：props 值为布尔值，布尔值为 true，则把路由收到的所有 params 参数通过 props 传给 Detail 组件\n              &#x2F;&#x2F; props:true\n\n              &#x2F;&#x2F;第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件\n              props($route)&#123; &#x2F;&#x2F; 或者写为 route、&#123;route:&#123;id, title&#125;&#125;\n                return &#123;\n                  id: $route.params.id,\n                  title: $route.params.title\n                &#125;\n              &#125;\n            &#125;\n          ]\n        &#125;,\n      ]\n    &#125;,\n  ]\n&#125;)</code></pre>\n\n<p><strong>让路由组件更方便的收到参数</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;&#x2F;li&gt;\n    &lt;li&gt;消息标题：&#123;&#123;title&#125;&#125; &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Detail&#39;,\n  props: [&#39;id&#39;, &#39;title&#39;],\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"18-7-lt-router-link-gt-的-replace-属性\"><a href=\"#18-7-lt-router-link-gt-的-replace-属性\" class=\"headerlink\" title=\"18.7 &lt;router-link&gt;的 replace 属性\"></a>18.7 &lt;router-link&gt;的 replace 属性</h2><p><strong>控制路由跳转时操作浏览器历史记录的模式</strong></p>\n<ol>\n<li><strong>浏览器的历史记录有两种写入方式：分别为 push 和 replace，push 是追加历史记录，replace 是替换当前记录。路由跳转时候默认为 push</strong></li>\n<li>开启 replace 模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code>，完整写法为：<code>&lt;router-link :replace=&quot;true&quot; .......&gt;News&lt;/router-link&gt;</code></li>\n</ol>\n<h2 id=\"18-8-编程式路由导航\"><a href=\"#18-8-编程式路由导航\" class=\"headerlink\" title=\"18.8 编程式路由导航\"></a>18.8 编程式路由导航</h2><p><strong>不借助 <code>&lt;router-link&gt;</code> 实现路由跳转，让路由跳转更加灵活</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;message in messageList&quot; :key&#x3D;&quot;message.id&quot;&gt;\n        &lt;!-- 跳转路由并携带 params 参数，to的对象写法 --&gt;\n        &lt;router-link :to&#x3D;&quot;&#123;\n            name: &#39;detail&#39;,\n            params:&#123;\n              id: message.id,\n              title: message.title\n            &#125;\n          &#125;&quot;&gt; &#123;&#123;message.title&#125;&#125; &lt;&#x2F;router-link&gt;\n        &lt;button @click&#x3D;&quot;pushShow(message)&quot;&gt;push查看&lt;&#x2F;button&gt;\n        &lt;button&gt;replace查看&lt;&#x2F;button&gt;\n      &lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Message&#39;,\n  methods: &#123;\n    pushShow(message) &#123;\n      this.$router.push(&#123;\n        name: &#39;detail&#39;,\n        params: &#123;\n          id: message.id,\n          title: message.title\n        &#125;\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>使用 push 和 replace 方法来进行跳转操作，可用于 button 按钮</strong><br><img src=\"https://img-blog.csdnimg.cn/f5dab09d438f46e5b2fe6c557de33b71.png\" alt=\"在这里插入图片描述\"><br><strong>控制前进和后退</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.$router.forward() &#x2F;&#x2F; 前进\nthis.$router.back() &#x2F;&#x2F; 后退\nthis.$router.go() &#x2F;&#x2F; 可前进也可后退，传入参数为前进或后退的步数</code></pre>\n\n<h2 id=\"18-9-缓存路由组件\"><a href=\"#18-9-缓存路由组件\" class=\"headerlink\" title=\"18.9 缓存路由组件\"></a>18.9 缓存路由组件</h2><p><strong>让不展示的路由组件保持挂载，不被销毁，在组件的呈现位置包上 <code>&lt;keep-alive&gt;</code> 标签，include 属性表示组件名</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Home组件内容&lt;&#x2F;h2&gt;\n    &lt;div&gt;\n      &lt;ul class&#x3D;&quot;nav nav-tabs&quot;&gt;\n        &lt;li&gt;\n          &lt;router-link class&#x3D;&quot;list-group-item&quot; active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;\n        &lt;&#x2F;li&gt;\n        &lt;li&gt;\n          &lt;router-link class&#x3D;&quot;list-group-item&quot; active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&#x2F;message&quot;&gt;Message&lt;&#x2F;router-link&gt;\n        &lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n      &lt;!-- 缓存多个路由组件 --&gt;\n\t  &lt;!-- &lt;keep-alive :include&#x3D;&quot;[&#39;News&#39;,&#39;Message&#39;]&quot;&gt; --&gt;\n      &lt;!-- 缓存一个路由组件 --&gt;\n\t  &lt;keep-alive include&#x3D;&quot;News&quot;&gt; \n\t\t&lt;router-view&gt;&lt;&#x2F;router-view&gt;\n\t  &lt;&#x2F;keep-alive&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<p><strong>切换其他组件再回来，内容还在</strong><br><img src=\"https://img-blog.csdnimg.cn/fc107c622cf940d38c93f434294b5583.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"18-10-路由组件的生命周期钩子\"><a href=\"#18-10-路由组件的生命周期钩子\" class=\"headerlink\" title=\"18.10 路由组件的生命周期钩子\"></a>18.10 路由组件的生命周期钩子</h2><p><strong>路由组件所独有的两个钩子，用于捕获路由组件的激活状态</strong></p>\n<ol>\n<li><strong>activated ：路由组件被激活时触发</strong></li>\n<li><strong>deactivated ：路由组件非激活时触发</strong></li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n\texport default &#123;\n\t\tname:&#39;News&#39;,\n\t\tdata() &#123;\n\t\t\treturn &#123;\n\t\t\t\topacity:1\n\t\t\t&#125;\n\t\t&#125;,\n\t\tactivated() &#123;\n\t\t\tconsole.log(&#39;News组件被激活了&#39;)\n\t\t\tthis.timer &#x3D; setInterval(() &#x3D;&gt; &#123;\n\t\t\t\tthis.opacity -&#x3D; 0.01\n\t\t\t\tif(this.opacity &lt;&#x3D; 0) this.opacity &#x3D; 1\n\t\t\t&#125;,16)\n\t\t&#125;,\n\t\tdeactivated() &#123;\n\t\t\tconsole.log(&#39;News组件失活了&#39;)\n\t\t\tclearInterval(this.timer)\n\t\t&#125;,\n\t&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"18-11-路由（导航）守卫\"><a href=\"#18-11-路由（导航）守卫\" class=\"headerlink\" title=\"18.11 路由（导航）守卫\"></a>18.11 路由（导航）守卫</h2><p><strong>对路由进行权限控制，分为全局守卫、独享守卫、组件内守卫</strong></p>\n<h3 id=\"18-11-1-meta-路由元信息\"><a href=\"#18-11-1-meta-路由元信息\" class=\"headerlink\" title=\"18.11.1 meta 路由元信息\"></a>18.11.1 meta 路由元信息</h3><p>将任意信息附加到路由上，如过渡名称、谁可以访问路由等。这些事情可以通过接收属性对象的 meta 属性来实现，并且它可以在路由地址和导航守卫上都被访问到：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const router &#x3D;  new VueRouter(&#123;\n\troutes:[\n\t\t&#123;\n\t\t\tname:&#39;guanyu&#39;,\n\t\t\tpath:&#39;&#x2F;about&#39;,\n\t\t\tcomponent:About,\n\t\t\tmeta:&#123;isAuth:true, title:&#39;关于&#39;&#125;\n\t\t&#125;,\n\t]\n&#125;)</code></pre>\n\n<h3 id=\"18-11-2-全局守卫\"><a href=\"#18-11-2-全局守卫\" class=\"headerlink\" title=\"18.11.2 全局守卫\"></a>18.11.2 全局守卫</h3><p><strong>在路由器 src&#x2F;router&#x2F;index.js 定义全局守卫，分为全局前置守卫和后置守卫，可以通过路由元信息存储的内容来进行验证</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该文件专门用于创建整个应用的路由器\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入组件\n......\n\n&#x2F;&#x2F; 创建并暴露一个路由器\nconst router &#x3D;  new VueRouter(&#123;\n\troutes:[\n\t\t&#123; name:&#39;guanyu&#39;, path:&#39;&#x2F;about&#39;, component:About, meta:&#123;title:&#39;关于&#39;&#125; &#125;,\n\t\t&#123; name:&#39;zhuye&#39;, path:&#39;&#x2F;home&#39;, component:Home, meta:&#123;title:&#39;主页&#39;&#125;,\n\t\t\tchildren:[\n\t\t\t\t&#123; name:&#39;xinwen&#39;, path:&#39;news&#39;, component:News, meta:&#123;isAuth:true,title:&#39;新闻&#39;&#125; &#125;,\n\t\t\t\t&#123; name:&#39;xiaoxi&#39;, path:&#39;message&#39;, component:Message, meta:&#123;isAuth:true,title:&#39;消息&#39;&#125;,\n\t\t\t\t\tchildren:[\n\t\t\t\t\t\t&#123; name:&#39;xiangqing&#39;, path:&#39;detail&#39;, component:Detail, meta:&#123;isAuth:true,title:&#39;详情&#39;&#125;, props:true\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t]\n\t\t\t\t&#125;\n\t\t\t]\n\t\t&#125;\n\t]\n&#125;)\n\n&#x2F;&#x2F; 全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用\nrouter.beforeEach((to, from, next)&#x3D;&gt;&#123;\n\tif(to.meta.isAuth)&#123; &#x2F;&#x2F; 判断是否需要鉴权\n\t\tif(localStorage.getItem(&#39;school&#39;)&#x3D;&#x3D;&#x3D;&#39;vue&#39;)&#123;\n\t\t\tnext()\n\t\t&#125;else&#123;\n\t\t\talert(&#39;学校名不对，无权限查看！&#39;)\n\t\t&#125;\n\t&#125;else&#123;\n\t\tnext()\n\t&#125;\n&#125;)\n\n&#x2F;&#x2F;全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用\nrouter.afterEach((to, from)&#x3D;&gt;&#123;\n\tdocument.title &#x3D; to.meta.title || &#39;系统&#39;\n&#125;)\n\nexport default router</code></pre>\n\n<p><strong>参数 To 和 From</strong><br><img src=\"https://img-blog.csdnimg.cn/b7f2dea24b704d01a9ba4a901ec9d26c.png\" alt=\"在这里插入图片描述\"><br><strong>点击 News，进行权限判断</strong><br><img src=\"https://img-blog.csdnimg.cn/3934a651f17d4969b38c182441b46865.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"18-11-3-独享守卫\"><a href=\"#18-11-3-独享守卫\" class=\"headerlink\" title=\"18.11.3 独享守卫\"></a>18.11.3 独享守卫</h3><p><strong>只有前置守卫，没有后置</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const router &#x3D;  new VueRouter(&#123;\n\troutes:[\n\t\t&#123;\n\t\t\tname:&#39;zhuye&#39;, path:&#39;&#x2F;home&#39;, component:Home, meta:&#123;title:&#39;主页&#39;&#125;,\n\t\t\tchildren:[\n\t\t\t\t&#123;\n\t\t\t\t\tname:&#39;xinwen&#39;,\n\t\t\t\t\tpath:&#39;news&#39;,\n\t\t\t\t\tcomponent:News,\n\t\t\t\t\tmeta:&#123;isAuth:true,title:&#39;新闻&#39;&#125;,\n\t\t\t\t\tbeforeEnter: (to, from, next) &#x3D;&gt; &#123;\n\t\t\t\t\t\tif(to.meta.isAuth)&#123; &#x2F;&#x2F; 判断是否需要鉴权\n\t\t\t\t\t\t\tif(localStorage.getItem(&#39;school&#39;)&#x3D;&#x3D;&#x3D;&#39;vue&#39;)&#123;\n\t\t\t\t\t\t\t\tnext()\n\t\t\t\t\t\t\t&#125;else&#123;\n\t\t\t\t\t\t\t\talert(&#39;学校名不对，无权限查看！&#39;)\n\t\t\t\t\t\t\t&#125;\n\t\t\t\t\t\t&#125;else&#123;\n\t\t\t\t\t\t\tnext()\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;,\n\t\t\t]\n\t\t&#125;\n\t]\n&#125;)\n&#x2F;&#x2F; 全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用\nrouter.afterEach((to,from)&#x3D;&gt;&#123;\n\tdocument.title &#x3D; to.meta.title || &#39;系统&#39;\n&#125;)\nexport default router</code></pre>\n\n<h3 id=\"18-11-4-组件内守卫\"><a href=\"#18-11-4-组件内守卫\" class=\"headerlink\" title=\"18.11.4 组件内守卫\"></a>18.11.4 组件内守卫</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n\texport default &#123;\n\t\tname:&#39;About&#39;,\n\t\t&#x2F;&#x2F; 通过路由规则，进入该组件时被调用\n\t\tbeforeRouteEnter (to, from, next) &#123;\n\t\t\tif(to.meta.isAuth)&#123; &#x2F;&#x2F;判断是否需要鉴权\n\t\t\t\tif(localStorage.getItem(&#39;school&#39;)&#x3D;&#x3D;&#x3D;&#39;vue&#39;)&#123;\n\t\t\t\t\tnext()\n\t\t\t\t&#125;else&#123;\n\t\t\t\t\talert(&#39;学校名不对，无权限查看！&#39;)\n\t\t\t\t&#125;\n\t\t\t&#125;else&#123;\n\t\t\t\tnext()\n\t\t\t&#125;\n\t\t&#125;,\n\t\t&#x2F;&#x2F; 通过路由规则，离开该组件时被调用\n\t\tbeforeRouteLeave (to, from, next) &#123;\n\t\t\tnext()\n\t\t&#125;\n\t&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"18-12-路由器的两种工作模式\"><a href=\"#18-12-路由器的两种工作模式\" class=\"headerlink\" title=\"18.12 路由器的两种工作模式\"></a>18.12 路由器的两种工作模式</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建并暴露一个路由器\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; mode: &#39;history&#39;\n  mode: &#39;hash&#39;,\n\troutes:[\n\t\t&#123;\n\t\t\tname:&#39;guanyu&#39;,\n\t\t\tpath:&#39;&#x2F;about&#39;,\n\t\t\tcomponent:About,\n\t\t\tmeta:&#123;title:&#39;关于&#39;&#125;\n\t\t&#125;,\n\t]\n&#125;)</code></pre>\n\n<ol>\n<li>hash 模式：<ol>\n<li># 及其后面的内容就是 hash 值，但地址中永远带着 # 号，不美观</li>\n<li>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器，兼容性较好</li>\n<li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法</li>\n</ol>\n</li>\n<li>history 模式：<ol>\n<li>地址干净，美观</li>\n<li>兼容性和 hash 模式相比略差</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"19-Vue-UI-组件库\"><a href=\"#19-Vue-UI-组件库\" class=\"headerlink\" title=\"19. Vue UI 组件库\"></a>19. Vue UI 组件库</h1><h2 id=\"19-1-移动端常用-UI-组件库\"><a href=\"#19-1-移动端常用-UI-组件库\" class=\"headerlink\" title=\"19.1 移动端常用 UI 组件库\"></a>19.1 移动端常用 UI 组件库</h2><ol>\n<li><strong>Vant</strong> ：<a href=\"https://youzan.github.io/vant\">https://youzan.github.io/vant</a></li>\n<li><strong>Cube UI</strong> ：<a href=\"https://didi.github.io/cube-ui\">https://didi.github.io/cube-ui</a></li>\n<li><strong>Mint UI</strong> ：<a href=\"http://mint-ui.github.io/\">http://mint-ui.github.io</a></li>\n</ol>\n<h2 id=\"19-2-PC-端常用-UI-组件库\"><a href=\"#19-2-PC-端常用-UI-组件库\" class=\"headerlink\" title=\"19.2 PC 端常用 UI 组件库\"></a>19.2 PC 端常用 UI 组件库</h2><ol>\n<li><strong>Element UI</strong> ：<a href=\"https://element.eleme.cn/\">https://element.eleme.cn</a></li>\n<li><strong>IView UI</strong> ：<a href=\"https://www.iviewui.com/\">https://www.iviewui.com</a></li>\n</ol>\n<h2 id=\"19-3-Element-UI\"><a href=\"#19-3-Element-UI\" class=\"headerlink\" title=\"19.3 Element UI\"></a>19.3 Element UI</h2><p><strong>详见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/124464590\">https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;124464590</a></strong></p>\n","feature":false,"text":"1. Vue CLI 脚手架1.1 安装npm install -g @vue&#x2F;cli # OR yarn global add @vue&#x2F;cli 1.2 升级npm update -g @vue&#x2F;cli # 或者 yarn global upgra...","link":"","photos":[],"count_time":{"symbolsCount":"86k","symbolsTime":"1:18"},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Vue-CLI-%E8%84%9A%E6%89%8B%E6%9E%B6\"><span class=\"toc-text\">1. Vue CLI 脚手架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.1 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%8D%87%E7%BA%A7\"><span class=\"toc-text\">1.2 升级</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1.3 创建一个项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.4 目录结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">1.5 运行</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Demo-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">2. Demo 案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-components\"><span class=\"toc-text\">2.1 components</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-App-vue\"><span class=\"toc-text\">2.2 App.vue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-main-js\"><span class=\"toc-text\">2.3 main.js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-index-html\"><span class=\"toc-text\">2.4 index.html</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-render-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. render 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%BC%95%E5%85%A5%E5%AE%8C%E6%95%B4%E7%89%88%E7%9A%84-vue-js\"><span class=\"toc-text\">3.1 引入完整版的 vue.js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8-render-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.2 使用 render 函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">4. 配置文件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-ref-%E3%80%81props-%E4%B8%8E-mixin\"><span class=\"toc-text\">5. ref 、props 与 mixin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-ref\"><span class=\"toc-text\">5.1 ref</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-props\"><span class=\"toc-text\">5.2 props</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">5.2.1 概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">5.2.2 使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-mixin%EF%BC%88%E6%B7%B7%E5%85%A5-x2F-%E5%90%88%EF%BC%89\"><span class=\"toc-text\">5.3 mixin（混入&#x2F;合）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">5.3.1 概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">5.3.2 使用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">6. 插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">6.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">6.2 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-scoped-%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">7. scoped 样式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E7%BB%84%E4%BB%B6%E5%8C%96%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">8. 组件化案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E5%AE%9A%E4%B9%89-components\"><span class=\"toc-text\">8.1 定义 components</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-App-vue\"><span class=\"toc-text\">8.2 App.vue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-reduce-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">8.3 reduce 方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-webStorage-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">9. webStorage 浏览器本地存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">9.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-2-%E7%BA%AF-HTML-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">9.2 纯 HTML 使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-3-Vue-%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">9.3 Vue 中使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">10. 组件自定义事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">10.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">10.2 绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-3-%E8%A7%A3%E7%BB%91%E5%92%8C%E9%94%80%E6%AF%81\"><span class=\"toc-text\">10.3 解绑和销毁</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%EF%BC%88GlobalEventBus%EF%BC%89\"><span class=\"toc-text\">11. 全局事件总线（GlobalEventBus）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">11.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">11.2 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83%EF%BC%88pubsub%EF%BC%89\"><span class=\"toc-text\">12. 消息订阅与发布（pubsub）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">12.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">12.2 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#13-nextTick\"><span class=\"toc-text\">13. nextTick</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#14-Vue-%E5%B0%81%E8%A3%85%E7%9A%84%E8%BF%87%E5%BA%A6%E4%B8%8E%E5%8A%A8%E7%94%BB-transition\"><span class=\"toc-text\">14. Vue 封装的过度与动画 transition</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">14.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-2-%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">14.2 动画效果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-3-%E8%BF%87%E5%BA%A6%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">14.3 过度效果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-4-%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-Animate-css\"><span class=\"toc-text\">14.4 集成第三方库 Animate.css</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#15-Vue-%E4%B8%AD%E7%9A%84-ajax\"><span class=\"toc-text\">15. Vue 中的 ajax</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-1-%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">15.1 请求方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-2-%E8%A7%A3%E5%86%B3-ajax-%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">15.2 解决 ajax 请求跨域问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-1-%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%80\"><span class=\"toc-text\">15.2.1 代理方式一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-2-%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F%E4%BA%8C\"><span class=\"toc-text\">15.2.2 代理方式二</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-3-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">15.3 使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-4-%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">15.4 请求携带参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-4-1-Get-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">15.4.1 Get 请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-4-2-Post-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">15.4.2 Post 请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-4-3-Put-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">15.4.3 Put 请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-4-4-Delete-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">15.4.4 Delete 请求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-5-vue-resource%EF%BC%88%E6%8F%92%E4%BB%B6%E5%BA%93%EF%BC%89\"><span class=\"toc-text\">15.5 vue-resource（插件库）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#16-%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">16. 插槽</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-1-%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">16.1 默认插槽</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-2-%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">16.2 具名插槽</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-3-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">16.3 作用域插槽</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#17-Vuex\"><span class=\"toc-text\">17. Vuex</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">17.1 概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-2-Vuex-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%92%8C-API\"><span class=\"toc-text\">17.2 Vuex 核心概念和 API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-2-1-state\"><span class=\"toc-text\">17.2.1 state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-2-2-actions\"><span class=\"toc-text\">17.2.2 actions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-2-3-mutations\"><span class=\"toc-text\">17.2.3 mutations</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-2-4-getters\"><span class=\"toc-text\">17.2.4 getters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-2-5-modules\"><span class=\"toc-text\">17.2.5 modules</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-3-%E6%90%AD%E5%BB%BA-Vuex-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">17.3 搭建 Vuex 环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-3-1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">17.3.1 安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-3-2-%E5%87%86%E5%A4%87-store\"><span class=\"toc-text\">17.3.2 准备 store</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-3-3-%E5%9C%A8-main-js-%E5%BC%95%E5%85%A5-store\"><span class=\"toc-text\">17.3.3 在 main.js 引入 store</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-4-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-x2F-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">17.4 工作流程&#x2F;原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-5-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">17.5 使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-6-map-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">17.6 map 方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-7-%E6%A8%A1%E5%9D%97%E5%8C%96-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">17.7 模块化+命名空间</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#18-vue-router-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">18. vue-router 路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-1-SPA\"><span class=\"toc-text\">18.1 SPA</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-2-%E8%B7%AF%E7%94%B1%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">18.2 路由分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-3-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">18.3 基础使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-4-%E5%A4%9A%E7%BA%A7%EF%BC%88%E5%B5%8C%E5%A5%97%EF%BC%89%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">18.4 多级（嵌套）路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-5-%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82\"><span class=\"toc-text\">18.5 路由传参</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-5-1-%E8%B7%AF%E7%94%B1%E7%9A%84query%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">18.5.1 路由的query参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-5-2-%E5%91%BD%E5%90%8D%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">18.5.2 命名路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-5-2-%E8%B7%AF%E7%94%B1%E7%9A%84-params-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">18.5.2 路由的 params 参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-6-%E8%B7%AF%E7%94%B1%E7%9A%84-props-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">18.6 路由的 props 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-7-lt-router-link-gt-%E7%9A%84-replace-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">18.7 &lt;router-link&gt;的 replace 属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-8-%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">18.8 编程式路由导航</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-9-%E7%BC%93%E5%AD%98%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">18.9 缓存路由组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-10-%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">18.10 路由组件的生命周期钩子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-11-%E8%B7%AF%E7%94%B1%EF%BC%88%E5%AF%BC%E8%88%AA%EF%BC%89%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">18.11 路由（导航）守卫</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-11-1-meta-%E8%B7%AF%E7%94%B1%E5%85%83%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">18.11.1 meta 路由元信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-11-2-%E5%85%A8%E5%B1%80%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">18.11.2 全局守卫</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-11-3-%E7%8B%AC%E4%BA%AB%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">18.11.3 独享守卫</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-11-4-%E7%BB%84%E4%BB%B6%E5%86%85%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">18.11.4 组件内守卫</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-12-%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">18.12 路由器的两种工作模式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#19-Vue-UI-%E7%BB%84%E4%BB%B6%E5%BA%93\"><span class=\"toc-text\">19. Vue UI 组件库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#19-1-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8-UI-%E7%BB%84%E4%BB%B6%E5%BA%93\"><span class=\"toc-text\">19.1 移动端常用 UI 组件库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#19-2-PC-%E7%AB%AF%E5%B8%B8%E7%94%A8-UI-%E7%BB%84%E4%BB%B6%E5%BA%93\"><span class=\"toc-text\">19.2 PC 端常用 UI 组件库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#19-3-Element-UI\"><span class=\"toc-text\">19.3 Element UI</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"AutoHotkey 使用总结","uid":"65f75b6b84cce39d7f43815b1be7dc49","slug":"BlogRepository/其他实践/AutoHotkey 使用总结","date":"2022-04-01T03:52:10.000Z","updated":"2023-03-13T19:13:04.944Z","comments":true,"path":"api/articles/BlogRepository/其他实践/AutoHotkey 使用总结.json","keywords":null,"cover":"https://cover.png","text":"1. 下载官网下载地址：https://www.autohotkey.com/ 点击下载最新版本 得到 exe 文件 2. 安装双击 exe 文件进行安装，默认安装路径，点击 Install 安装完成 3. 使用官方文档地址：Quick Reference | AutoHotke...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"其他实践","slug":"其他实践","count":4,"path":"api/categories/其他实践.json"}],"tags":[{"name":"Windows","slug":"Windows","count":3,"path":"api/tags/Windows.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Vue2 总结（Basic）","uid":"9d80fc9fd98eea4d38697140d0ff638e","slug":"BlogRepository/Vue/Vue2 总结（Basic）","date":"2022-03-28T02:38:54.000Z","updated":"2023-03-13T19:13:04.944Z","comments":true,"path":"api/articles/BlogRepository/Vue/Vue2 总结（Basic）.json","keywords":null,"cover":"https://cover.png","text":"1. 简介1.1 特点 遵循 MVVM 模式 编码简洁, 体积小, 运行效率高, 适合移动&#x2F;PC 端开发 它本身只关注 UI, 也可以引入其它第三方库开发项目 1.2 与其它 JS 框架的关联 借鉴 Angular 的模板和数据绑定技术 借鉴 React 的组件化和虚拟...","link":"","photos":[],"count_time":{"symbolsCount":"60k","symbolsTime":"55 mins."},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}