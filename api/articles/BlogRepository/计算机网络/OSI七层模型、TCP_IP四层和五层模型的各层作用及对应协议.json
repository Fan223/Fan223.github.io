{"title":"OSI七层模型、TCP/IP四层和五层模型的各层作用及对应协议","uid":"6ce853e2be25e958aefcb6cbbd6efe7a","slug":"BlogRepository/计算机网络/OSI七层模型、TCP_IP四层和五层模型的各层作用及对应协议","date":"2022-03-10T11:46:56.000Z","updated":"2023-03-13T19:13:04.964Z","comments":true,"path":"api/articles/BlogRepository/计算机网络/OSI七层模型、TCP_IP四层和五层模型的各层作用及对应协议.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-各模型分层对应关系及协议\"><a href=\"#1-各模型分层对应关系及协议\" class=\"headerlink\" title=\"1. 各模型分层对应关系及协议\"></a>1. 各模型分层对应关系及协议</h1><p><img src=\"https://img-blog.csdnimg.cn/50e700b930dd45cc916a73bb36c3e070.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-各层作用\"><a href=\"#2-各层作用\" class=\"headerlink\" title=\"2. 各层作用\"></a>2. 各层作用</h1><h2 id=\"2-1-物理层\"><a href=\"#2-1-物理层\" class=\"headerlink\" title=\"2.1 物理层\"></a>2.1 物理层</h2><p>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特</p>\n<h2 id=\"2-2-数据链路层\"><a href=\"#2-2-数据链路层\" class=\"headerlink\" title=\"2.2 数据链路层\"></a>2.2 数据链路层</h2><p>将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。数据链路层又分为2个子层：</p>\n<ul>\n<li>逻辑链路控制子层（LLC）：处理 CSMA&#x2F;CD 算法、数据出错校验、成帧等</li>\n<li>媒体访问控制子层（MAC）：定义了一些字段使上层协议能共享数据链路层，非必需</li>\n</ul>\n<h2 id=\"2-3-网络层\"><a href=\"#2-3-网络层\" class=\"headerlink\" title=\"2.3 网络层\"></a>2.3 网络层</h2><p>本层通过 IP 寻址来建立两个节点之间的连接，为远端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的 IP 层。这一层就是我们经常说的 IP 协议层。IP 协议是 Internet 的基础</p>\n<h2 id=\"2-4-传输层\"><a href=\"#2-4-传输层\" class=\"headerlink\" title=\"2.4 传输层\"></a>2.4 传输层</h2><p>传输层建立了主机端到端的连接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节， 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP就是在这一层。端口号既是这里的“端”。常常把这一层数据叫做段</p>\n<ul>\n<li>TCP（transmission control protocol –传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）</li>\n<li>UDP（user datagram protocol–用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）</li>\n</ul>\n<h2 id=\"2-5会话层\"><a href=\"#2-5会话层\" class=\"headerlink\" title=\"2.5会话层\"></a>2.5会话层</h2><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。通过运输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）</p>\n<h2 id=\"2-6-表示层\"><a href=\"#2-6-表示层\" class=\"headerlink\" title=\"2.6 表示层\"></a>2.6 表示层</h2><p>表示层提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取</p>\n<h2 id=\"2-7-应用层\"><a href=\"#2-7-应用层\" class=\"headerlink\" title=\"2.7 应用层\"></a>2.7 应用层</h2><p>最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务</p>\n","feature":false,"text":"1. 各模型分层对应关系及协议 2. 各层作用2.1 物理层主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":1,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"TCP/IP","slug":"TCP-IP","count":1,"path":"api/tags/TCP-IP.json"},{"name":"网络协议","slug":"网络协议","count":1,"path":"api/tags/网络协议.json"},{"name":"网络","slug":"网络","count":1,"path":"api/tags/网络.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%90%84%E6%A8%A1%E5%9E%8B%E5%88%86%E5%B1%82%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">1. 各模型分层对应关系及协议</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%90%84%E5%B1%82%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2. 各层作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E7%89%A9%E7%90%86%E5%B1%82\"><span class=\"toc-text\">2.1 物理层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82\"><span class=\"toc-text\">2.2 数据链路层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E7%BD%91%E7%BB%9C%E5%B1%82\"><span class=\"toc-text\">2.3 网络层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E4%BC%A0%E8%BE%93%E5%B1%82\"><span class=\"toc-text\">2.4 传输层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5%E4%BC%9A%E8%AF%9D%E5%B1%82\"><span class=\"toc-text\">2.5会话层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E8%A1%A8%E7%A4%BA%E5%B1%82\"><span class=\"toc-text\">2.6 表示层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-%E5%BA%94%E7%94%A8%E5%B1%82\"><span class=\"toc-text\">2.7 应用层</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Node.js 多版本安装及 NPM 镜像配置","uid":"cb51a2133d61232dd118d1d3d5ca5ed4","slug":"BlogRepository/开发工具及环境/Node.js 多版本安装及 NPM 镜像配置","date":"2022-03-10T12:23:09.000Z","updated":"2023-03-13T19:13:04.955Z","comments":true,"path":"api/articles/BlogRepository/开发工具及环境/Node.js 多版本安装及 NPM 镜像配置.json","keywords":null,"cover":"https://cover.png","text":"1. 安装多版本 Node.js1.1 下载首先去官网下载需要的 Node.js 版本，点击其他下载可以下载其他版本的 Node.js 1.2 安装下载完成后先安装低版本的 Node.js，点击 Next接受，Next可以按需修改安装路径，NextNextNext最后安装完成。会...","link":"","photos":[],"count_time":{"symbolsCount":892,"symbolsTime":"1 mins."},"categories":[{"name":"开发工具及环境","slug":"开发工具及环境","count":11,"path":"api/categories/开发工具及环境.json"}],"tags":[{"name":"NPM","slug":"NPM","count":1,"path":"api/tags/NPM.json"},{"name":"Node.js","slug":"Node-js","count":1,"path":"api/tags/Node-js.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Dubbo总结（分布式理论 + 使用）","uid":"4e9d049749f532005151e72d3b86b285","slug":"BlogRepository/开发技术及框架/Dubbo总结（分布式理论 + 使用）","date":"2022-03-08T16:24:40.000Z","updated":"2023-03-13T19:13:04.956Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/Dubbo总结（分布式理论 + 使用）.json","keywords":null,"cover":"https://cover.png","text":"1. 分布式基础理论1.1 什么是分布式系统？分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统。分布式系统（distributed system）是建立在网络之上的软件系统 随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":8,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"Dubbo","slug":"Dubbo","count":1,"path":"api/tags/Dubbo.json"},{"name":"架构","slug":"架构","count":1,"path":"api/tags/架构.json"},{"name":"分布式","slug":"分布式","count":1,"path":"api/tags/分布式.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}