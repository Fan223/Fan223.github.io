{"title":"Redis 序列化规则及重定义","uid":"39438e0eff462191bb311410e951b530","slug":"BlogRepository/Redis/Redis 序列化规则及重定义","date":"2022-05-03T22:56:01.000Z","updated":"2023-03-13T19:13:04.933Z","comments":true,"path":"api/articles/BlogRepository/Redis/Redis 序列化规则及重定义.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-JdkSerializationRedisSerializer\"><a href=\"#1-JdkSerializationRedisSerializer\" class=\"headerlink\" title=\"1. JdkSerializationRedisSerializer\"></a>1. JdkSerializationRedisSerializer</h1><p><strong>RestTemplate 默认的序列化方式，当存储时 Key 会变成一串字符串</strong></p>\n<ul>\n<li><strong>优点</strong><br>反序列化时不需要提供类型信息(class)，</li>\n<li><strong>缺点</strong><ul>\n<li>需要实现Serializable接口</li>\n<li>存储的为二进制数据</li>\n<li>序列化后的结果非常庞大，是JSON格式的5倍左右，这样就会消耗redis服务器的大量内存</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-StringRedisSerializer\"><a href=\"#2-StringRedisSerializer\" class=\"headerlink\" title=\"2. StringRedisSerializer\"></a>2. StringRedisSerializer</h1><p><strong>StringRedisTemplate 默认的序列化方式，key 和 Value 都会采用此方式进行序列化，是被推荐使用的，对开发者友好，轻量级，效率也比较高</strong></p>\n<h1 id=\"3-GenericToStringSerializer\"><a href=\"#3-GenericToStringSerializer\" class=\"headerlink\" title=\"3. GenericToStringSerializer\"></a>3. GenericToStringSerializer</h1><p>需要调用者给传一个对象到字符串互转的 Converter</p>\n<h1 id=\"4-Jackson2JsonRedisSerializer\"><a href=\"#4-Jackson2JsonRedisSerializer\" class=\"headerlink\" title=\"4. Jackson2JsonRedisSerializer\"></a>4. Jackson2JsonRedisSerializer</h1><ul>\n<li><strong>优点</strong><br>速度快，序列化后的字符串短小精悍，不需要实现 Serializable 接口</li>\n<li><strong>缺点</strong><br>此类的构造函数中有一个类型参数，必须提供要序列化对象的类型信息(.class对象），其在反序列化过程中用到了类型信息</li>\n</ul>\n<p>一般传入的都是 <code>Object.class</code> 类型。假如存储的是带泛型的 List 对象，序列化带泛型的数据时，会以 Map 的结构进行存储；进行反序列化时不能将 Map 解析成对象，从 Redis 获取的值为 LinkedHashMap 类型，此时进行转换的话会报错（可以使用 GenericJackson2JsonRedisSerializer 解决这个问题）</p>\n<p><strong>RedisTemplate 的 Key 序列化规则为 StringRedisSerializer，Value 的序列化规则为 Jackson2JsonRedisSerializer</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class RedisConfig &#123;\n\n    @Bean\n    RedisTemplate redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n        RedisTemplate redisTemplate &#x3D; new RedisTemplate();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);\n\n        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);\n\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n  \n        return redisTemplate;\n    &#125;\n&#125;\n</code></pre>\n\n<h1 id=\"5-GenericJackson2JsonRedisSerializer\"><a href=\"#5-GenericJackson2JsonRedisSerializer\" class=\"headerlink\" title=\"5. GenericJackson2JsonRedisSerializer\"></a>5. GenericJackson2JsonRedisSerializer</h1><p><strong>与 Jackson2JsonRedisSerializer 大致相同，但会额外存储序列化对象的包命和类名，反序列化时以这个作为标识就可以反序列化成指定的对象</strong></p>\n<p><strong>RedisTemplate 的 Key 序列化规则为 StringRedisSerializer，Value 的序列化规则为 GenericJackson2JsonRedisSerializer</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class RedisConfig &#123;\n\n    @Bean\n    RedisTemplate redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n        RedisTemplate redisTemplate &#x3D; new RedisTemplate();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer();\n        GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer &#x3D; new GenericJackson2JsonRedisSerializer();\n\n        &#x2F;&#x2F; 配置序列化\n        redisTemplate.setDefaultSerializer(genericJackson2JsonRedisSerializer);\n\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);\n\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);\n\n        return redisTemplate;\n    &#125;\n&#125;</code></pre>\n","feature":false,"text":"1. JdkSerializationRedisSerializerRestTemplate 默认的序列化方式，当存储时 Key 会变成一串字符串 优点反序列化时不需要提供类型信息(class)， 缺点 需要实现Serializable接口 存储的为二进制数据 序列化后的结果非常...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"Redis","slug":"Redis","count":3,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":5,"path":"api/tags/Redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-JdkSerializationRedisSerializer\"><span class=\"toc-text\">1. JdkSerializationRedisSerializer</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-StringRedisSerializer\"><span class=\"toc-text\">2. StringRedisSerializer</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-GenericToStringSerializer\"><span class=\"toc-text\">3. GenericToStringSerializer</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-Jackson2JsonRedisSerializer\"><span class=\"toc-text\">4. Jackson2JsonRedisSerializer</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-GenericJackson2JsonRedisSerializer\"><span class=\"toc-text\">5. GenericJackson2JsonRedisSerializer</span></a></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Spring Security + Vue2 + Element-UI 总结","uid":"d525d12dddb4f5a1f4b9cd14617eb49e","slug":"BlogRepository/开发实践/Spring Security + Vue2 + Element-UI 总结","date":"2022-05-08T20:03:09.000Z","updated":"2023-03-13T19:13:04.948Z","comments":true,"path":"api/articles/BlogRepository/开发实践/Spring Security + Vue2 + Element-UI 总结.json","keywords":null,"cover":"https://cover.png","text":"Vue 基础部分见：https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;123573568Vue 开发部分见：https://blog.csdn.net/ACE_U_005A&#x2F;article&#...","link":"","photos":[],"count_time":{"symbolsCount":"142k","symbolsTime":"2:10"},"categories":[{"name":"开发实践","slug":"开发实践","count":5,"path":"api/categories/开发实践.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"MyBatis-Plus 使用总结","uid":"245a7be88615344e5adce1986b47a4ce","slug":"BlogRepository/开发技术及框架/MyBatis-Plus 使用总结","date":"2022-05-03T04:47:04.000Z","updated":"2023-03-13T19:13:04.956Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/MyBatis-Plus 使用总结.json","keywords":null,"cover":"https://cover.png","text":"1. POM 依赖&lt;!-- mybatis-plus --&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mybatis-plus-boot...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":8,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"MyBatis-Plus","slug":"MyBatis-Plus","count":2,"path":"api/tags/MyBatis-Plus.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}