{"title":"Spring Cloud 以及 Spring Cloud Alibaba 使用总结","uid":"f1cea3ae9e9660834ef5c504249979bd","slug":"BlogRepository/Spring/Spring Cloud 以及 Spring Cloud Alibaba 使用总结","date":"2023-01-13T03:54:15.000Z","updated":"2023-03-13T19:13:04.940Z","comments":true,"path":"api/articles/BlogRepository/Spring/Spring Cloud 以及 Spring Cloud Alibaba 使用总结.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-版本对应\"><a href=\"#1-版本对应\" class=\"headerlink\" title=\"1. 版本对应\"></a>1. 版本对应</h1><p>官网版本说明：<a href=\"https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E\">版本说明 · alibaba&#x2F;spring-cloud-alibaba Wiki (github.com)</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2a246d16daf34949b26d1067ce8be2fc.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>这里使用 Spring Boot 2.7.7、Spring Cloud 2021.0.4、Spring Cloud Alibaba 2021.0.4.0，搭配 JDK 8</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;properties&gt;\n        &lt;spring.cloud.version&gt;2021.0.4&lt;&#x2F;spring.cloud.version&gt;\n        &lt;spring.cloud.alibaba.version&gt;2021.0.4.0&lt;&#x2F;spring.cloud.alibaba.version&gt;\n&lt;&#x2F;properties&gt;\n\n&lt;dependencyManagement&gt;\n            &lt;!-- Spring Cloud Dependencies--&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;&#x2F;version&gt;\n                &lt;type&gt;pom&lt;&#x2F;type&gt;\n                &lt;scope&gt;import&lt;&#x2F;scope&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;!-- Spring Cloud Alibaba Dependencies --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;$&#123;spring.cloud.alibaba.version&#125;&lt;&#x2F;version&gt;\n                &lt;type&gt;pom&lt;&#x2F;type&gt;\n                &lt;scope&gt;import&lt;&#x2F;scope&gt;\n            &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencyManagement&gt;</code></pre>\n\n<h1 id=\"2-Nacos\"><a href=\"#2-Nacos\" class=\"headerlink\" title=\"2. Nacos\"></a>2. Nacos</h1><p><strong>见另一篇：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/122816007\">服务器 Nacos 集群搭建及使用总结_凡 223 的博客</a></strong></p>\n<h1 id=\"3-Gateway\"><a href=\"#3-Gateway\" class=\"headerlink\" title=\"3. Gateway\"></a>3. Gateway</h1><h2 id=\"3-1-引入依赖\"><a href=\"#3-1-引入依赖\" class=\"headerlink\" title=\"3.1 引入依赖\"></a>3.1 引入依赖</h2><p>包括 Gateway 网关依赖和 Nacos 服务注册发现的依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"3-2-配置\"><a href=\"#3-2-配置\" class=\"headerlink\" title=\"3.2 配置\"></a>3.2 配置</h2><p>将 Gateway 注册进 Nacos，同时进行 Gateway 相关的配置</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 9000\nspring:\n  application:\n    name: gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 124.222.xxx.90:8848\n    gateway:\n      routes:\n        - id: provider1 # 路由的ID，没有固定规则但要求唯一，建议配合服务名\n          uri: http:&#x2F;&#x2F;localhost:8000  # 匹配提供服务的路由地址\n          # 网关断言匹配\n          predicates:\n            - Path&#x3D;&#x2F;user&#x2F;**    # 路径相匹配的进行路由</code></pre>\n\n<h2 id=\"3-3-启动类\"><a href=\"#3-3-启动类\" class=\"headerlink\" title=\"3.3 启动类\"></a>3.3 启动类</h2><p>启动类添加 <code>@EnableDiscoveryClient</code> 注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableDiscoveryClient\npublic class GatewayApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(GatewayApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-4-服务-Provider-1\"><a href=\"#3-4-服务-Provider-1\" class=\"headerlink\" title=\"3.4 服务 Provider-1\"></a>3.4 服务 Provider-1</h2><p>1、POM</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>2、YAML</p>\n<p>这里的端口与前面 Gateway 的配置文件里的 uri 端口一致</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8000\nspring:\n  application:\n    name: provider\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 124.222.xxx.90:8848</code></pre>\n\n<p>3、启动类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableDiscoveryClient\npublic class Service1Application &#123;\n    public static void main( String[] args ) &#123;\n        SpringApplication.run(Service1Application.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p>4、Controller</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class UserController &#123;\n\n    @GetMapping(&quot;&#x2F;user&#x2F;get&quot;)\n    public String get() &#123;\n        return &quot;provider-1 user get&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;test&quot;)\n    public String test() &#123;\n        return &quot;provider-1 test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-5-查看路由转发\"><a href=\"#3-5-查看路由转发\" class=\"headerlink\" title=\"3.5 查看路由转发\"></a>3.5 查看路由转发</h2><p>分别启动 Gateway 和 Service，可以看到两个服务都注册了进来</p>\n<p><img src=\"https://img-blog.csdnimg.cn/27f6fb0f9ff44053954e01a25c5b5c86.png\" alt=\"在这里插入图片描述\"></p>\n<p>访问 <code>localhost:9000/user/get</code>，通过网关的端口成功调用到服务 Provider-1</p>\n<p><img src=\"https://img-blog.csdnimg.cn/05c95fb93d9e4124a2570bea56c41f12.png\" alt=\"在这里插入图片描述\"></p>\n<p>测试一下 Predicates 的效果，访问 <code>/test</code>，访问失败，路径不匹配</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2a70aa1c7fe541699704dc4d16959609.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-6-动态路由与负载均衡\"><a href=\"#3-6-动态路由与负载均衡\" class=\"headerlink\" title=\"3.6 动态路由与负载均衡\"></a>3.6 动态路由与负载均衡</h2><p>将 3.4 的服务 Provider-1 再复制一份，为 Provider-2，这时就存在了两个服务</p>\n<p><img src=\"https://img-blog.csdnimg.cn/f0ba3ffcdcd8465cb669bcd121f21bad.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/ad434972feb24c8eb221befed0a10333.png\" alt=\"在这里插入图片描述\"></p>\n<p>在 3.2 的配置中，uri 是固定的地址，那如何让 Gateway 转发两个服务或以上呢？</p>\n<p><strong>1、修改配置文件</strong></p>\n<p>开启动态路由，通过服务名来匹配服务</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">server:\n  port: 9000\nspring:\n  application:\n    name: gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 124.222.118.90:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: true # 开启从注册中心动态创建路由的功能, 利用微服务名进行路由\n      routes:\n        - id: provider1 # 路由的ID, 没有固定规则但要求唯一, 建议配合服务名\n          uri: lb:&#x2F;&#x2F;provider  # 匹配提供服务的路由地址\n          # 网关断言匹配\n          predicates:\n            - Path&#x3D;&#x2F;user&#x2F;**    # 路径相匹配的进行路由\n        - id: provider2\n          uri: lb:&#x2F;&#x2F;provider\n          predicates:\n            - Path&#x3D;&#x2F;user&#x2F;**</code></pre>\n\n<p>2、配置中 uri 的协议为 lb，表示启用 Gateway 的负载均衡功能，此时需要引入 <code>spring-cloud-starter-loadbalancer</code> 依赖，版本在最开始已统一定义</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>3、查看路由转发</p>\n<p><img src=\"https://img-blog.csdnimg.cn/3fa8ac429ffd42db9826a229fbaebab7.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/3611b71eb40546049098ca7537e05cab.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-OpenFeign\"><a href=\"#4-OpenFeign\" class=\"headerlink\" title=\"4. OpenFeign\"></a>4. OpenFeign</h1><h2 id=\"4-1-引入依赖\"><a href=\"#4-1-引入依赖\" class=\"headerlink\" title=\"4.1 引入依赖\"></a>4.1 引入依赖</h2><p>这里同样需要引入 <code>spring-cloud-starter-loadbalancer</code> 依赖来实现 OpenFeign 自带的负载均衡</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"4-2-配置\"><a href=\"#4-2-配置\" class=\"headerlink\" title=\"4.2 配置\"></a>4.2 配置</h2><p>服务注册进 Nacos，同时进行 OpenFeign 的相关配置，断路器的配置可见 5.2.2 服务降级的服务调用方部分</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 7000\nspring:\n  application:\n    name: consumer\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 124.222.xxx.90:8848\nfeign:\n  client:\n    config:\n      default:\n        # 日志等级\n        logger-level: full\n        # 超时时间\n        connect-timeout: 1500\n        read-timeout: 1500\n  # 断路器\n  circuitbreaker:\n    enabled: true</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/4a917b2230ad4519b53f7a08963e5e15.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-3-启动类\"><a href=\"#4-3-启动类\" class=\"headerlink\" title=\"4.3 启动类\"></a>4.3 启动类</h2><p>添加 <code>@EnableFeignClients</code> 注解开启 OpenFeign</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableFeignClients\n@EnableDiscoveryClient\npublic class Consumer1Application &#123;\n    public static void main( String[] args ) &#123;\n        SpringApplication.run(Consumer1Application.class, args);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"4-4-FeignService\"><a href=\"#4-4-FeignService\" class=\"headerlink\" title=\"4.4 FeignService\"></a>4.4 FeignService</h2><p>新建一个接口，用于进行调用，在接口上添加 <code>@FeignClient</code> 注解，值为提供服务的服务名，在调用方法上添加对应的地址映射</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@FeignClient(&quot;provider&quot;)\npublic interface FeignService &#123;\n\n    @GetMapping(&quot;&#x2F;user&#x2F;get&quot;)\n    String get();\n&#125;</code></pre>\n\n<h2 id=\"4-5-ConsumerController\"><a href=\"#4-5-ConsumerController\" class=\"headerlink\" title=\"4.5 ConsumerController\"></a>4.5 ConsumerController</h2><p>将 FeignService 注入进来，然后调用方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ConsumerController &#123;\n\n    @Resource\n    private FeignService consumerService;\n\n    @GetMapping(&quot;&#x2F;user&#x2F;get&quot;)\n    public String get() &#123;\n        return consumerService.get();\n    &#125;\n\n    @GetMapping(&quot;&#x2F;test&quot;)\n    public String test() &#123;\n        return &quot;consumer-1 test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"4-6-查看远程调用\"><a href=\"#4-6-查看远程调用\" class=\"headerlink\" title=\"4.6 查看远程调用\"></a>4.6 查看远程调用</h2><p>自带负载均衡功能</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9cf20b7496c44af6800432599db9ccba.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/a935955b4a8b42d994683c6610d03aa2.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"5-Hystrix\"><a href=\"#5-Hystrix\" class=\"headerlink\" title=\"5. Hystrix\"></a>5. Hystrix</h1><p>Hystrix 已经停止更新进入维护阶段</p>\n<h2 id=\"5-1-前期准备\"><a href=\"#5-1-前期准备\" class=\"headerlink\" title=\"5.1 前期准备\"></a>5.1 前期准备</h2><h3 id=\"5-1-1-引入依赖\"><a href=\"#5-1-1-引入依赖\" class=\"headerlink\" title=\"5.1.1 引入依赖\"></a>5.1.1 引入依赖</h3><p>该版本为 Hystrix 的最后一个版本</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2.10.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"5-1-2-配置\"><a href=\"#5-1-2-配置\" class=\"headerlink\" title=\"5.1.2 配置\"></a>5.1.2 配置</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8002\n\nspring:\n  application:\n    name: provider-hystrix\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 124.222.xxx.90:8848</code></pre>\n\n<h3 id=\"5-1-3-启动类\"><a href=\"#5-1-3-启动类\" class=\"headerlink\" title=\"5.1.3 启动类\"></a>5.1.3 启动类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableDiscoveryClient\npublic class HystrixApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(HystrixApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-1-4-HystrixService\"><a href=\"#5-1-4-HystrixService\" class=\"headerlink\" title=\"5.1.4 HystrixService\"></a>5.1.4 HystrixService</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface HystrixService &#123;\n\n    String normal();\n\n    String timeout();\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class HystrixServiceImpl implements HystrixService &#123;\n\n    @Override\n    public String normal() &#123;\n        return &quot;normal&quot;;\n    &#125;\n\n    @Override\n    public String timeout() &#123;\n        try &#123;\n            TimeUnit.SECONDS.sleep(5);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        return &quot;timeout&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-1-5-HystrixController\"><a href=\"#5-1-5-HystrixController\" class=\"headerlink\" title=\"5.1.5 HystrixController\"></a>5.1.5 HystrixController</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class HystrixController &#123;\n\n    @Resource\n    private HystrixService hystrixService;\n\n    @GetMapping(&quot;&#x2F;normal&quot;)\n    public String normal() &#123;\n        return hystrixService.normal();\n    &#125;\n\n    @GetMapping(&quot;&#x2F;timeout&quot;)\n    public String timeout() &#123;\n        return hystrixService.timeout();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-1-6-访问\"><a href=\"#5-1-6-访问\" class=\"headerlink\" title=\"5.1.6 访问\"></a>5.1.6 访问</h3><p>访问 <code>localhost:8002/normal</code>，正常显示</p>\n<p><img src=\"https://img-blog.csdnimg.cn/44e3fbc7f32f4508b92412202693831a.png\" alt=\"在这里插入图片描述\"></p>\n<p>访问 <code>localhost:8002/timeout</code>，等待 5 秒后显示</p>\n<p><img src=\"https://img-blog.csdnimg.cn/730706efc4884b96b71eab841abb165a.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-2-服务降级\"><a href=\"#5-2-服务降级\" class=\"headerlink\" title=\"5.2 服务降级\"></a>5.2 服务降级</h2><h3 id=\"5-2-1-服务提供方\"><a href=\"#5-2-1-服务提供方\" class=\"headerlink\" title=\"5.2.1 服务提供方\"></a>5.2.1 服务提供方</h3><p>1、HystrixService 添加 <code>@HystrixCommand</code> 注解，参数 fallbackMethod 为定义的回调方法，参数 @HystrixProperty 为超时时间</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class HystrixServiceImpl implements HystrixService &#123;\n\n    @Override\n    public String normal() &#123;\n        return &quot;normal&quot;;\n    &#125;\n\n    @HystrixCommand(fallbackMethod &#x3D; &quot;globalFallback&quot;,commandProperties &#x3D; &#123;\n            @HystrixProperty(name&#x3D;&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value&#x3D;&quot;3000&quot;)\n    &#125;)\n    @Override\n    public String timeout() &#123;\n        try &#123;\n            TimeUnit.SECONDS.sleep(5);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n            Thread.currentThread().interrupt();\n        &#125;\n\n        return &quot;timeout&quot;;\n    &#125;\n\n\n    public String globalFallback()&#123;\n        return &quot;&#x2F;(ㄒoㄒ)&#x2F;调用接口超时或异常：\\t&quot;+ &quot;\\t当前线程池名字&quot; + Thread.currentThread().getName();\n    &#125;\n&#125;</code></pre>\n\n<p>2、启动类添加 <code>@EnableHystrix</code> 注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableDiscoveryClient\n@EnableHystrix\npublic class HystrixApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(HystrixApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p>3、再次访问 timeout，触发服务降级</p>\n<p><img src=\"https://img-blog.csdnimg.cn/ebf38bc5ab2c45f28e78457a696e2cf3.png\" alt=\"在这里插入图片描述\">4、统一配置，通过 <code>@DefaultProperties</code> 来进行默认配置，不用每个方法都进行配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\n@DefaultProperties(defaultFallback &#x3D; &quot;globalFallback&quot;, commandProperties &#x3D; &#123;\n        @HystrixProperty(name&#x3D;&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value&#x3D;&quot;3000&quot;)\n&#125;)\npublic class HystrixServiceImpl implements HystrixService &#123;\n\n    @Override\n    public String normal() &#123;\n        return &quot;normal&quot;;\n    &#125;\n\n    @HystrixCommand\n    @Override\n    public String timeout() &#123;\n        try &#123;\n            TimeUnit.SECONDS.sleep(5);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n            Thread.currentThread().interrupt();\n        &#125;\n\n        return &quot;timeout&quot;;\n    &#125;\n\n\n    public String globalFallback()&#123;\n        return &quot;&#x2F;(ㄒoㄒ)&#x2F;调用接口超时或异常：\\t&quot;+ &quot;\\t当前线程池名字&quot; + Thread.currentThread().getName();\n    &#125;\n&#125;</code></pre>\n\n<p>这里是在服务提供方进行了服务降级的处理，假如有其他服务调用该服务，但是服务提供方宕机了，无法触发服务降级（这里首先需要 OpenFeign 的超时时间大于服务提供方返回响应的时间，否则会直接报超时异常），因此调用方也需要进行服务降级的处理，可以配合 OpenFeign 进行处理</p>\n<h3 id=\"5-2-2-服务调用方\"><a href=\"#5-2-2-服务调用方\" class=\"headerlink\" title=\"5.2.2 服务调用方\"></a>5.2.2 服务调用方</h3><p>1、在 OpenFeign 的配置里开启断路器，<strong>开启了断路器之后，会先判断 Hystrix 的超时时间然后再判断 OpenFeign 的超时时间</strong>，Hystrix 默认的超时时间是 1 秒，所以需要重新设置 Hystrix 的超时时间</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">feign:\n  client:\n    config:\n      default:\n        # 日志等级\n        logger-level: full\n        # 超时时间\n        connect-timeout: 1500\n        read-timeout: 1500\n  # 断路器\n  circuitbreaker:\n    enabled: true\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 1500</code></pre>\n\n<p>2、添加依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2.10.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>3、<code>@FeignClient</code> 注解添加 fallback 参数，FallbackServiceImpl 为处理类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@FeignClient(value &#x3D; &quot;provider-hystrix&quot;, fallback &#x3D; FallbackServiceImpl.class)\npublic interface FeignService &#123;\n\n    @GetMapping(&quot;&#x2F;timeout&quot;)\n    String get();\n&#125;</code></pre>\n\n<p>4、FallbackServiceImpl 实现 FeignService，统一为调用接口里的方法进行异常处理</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class FallbackServiceImpl implements FeignService &#123;\n\n    @Override\n    public String get() &#123;\n        return &quot;服务调用失败，提示来自：Consumer-OpenFeign&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>5、关闭服务提供方，调用接口，触发服务调用方的服务降级</p>\n<p><img src=\"https://img-blog.csdnimg.cn/46b9914503144c5c8ec591c9f3fdbf27.png\" alt=\"在这里插入图片描述\"></p>\n<p>假如没有设置断路器，则会显示白页错误</p>\n<p><img src=\"https://img-blog.csdnimg.cn/5d33354343d9427981aec3a92c87ae1f.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-3-服务熔断\"><a href=\"#5-3-服务熔断\" class=\"headerlink\" title=\"5.3 服务熔断\"></a>5.3 服务熔断</h2><p>修改 <code>@HystrixCommand</code> 注解的参数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class HystrixServiceImpl implements HystrixService &#123;\n\n    @HystrixCommand(fallbackMethod &#x3D; &quot;circuitBreakerFallback&quot;, commandProperties &#x3D; &#123;\n            @HystrixProperty(name &#x3D; &quot;circuitBreaker.enabled&quot;, value &#x3D; &quot;true&quot;), &#x2F;&#x2F; 是否开启断路器\n            @HystrixProperty(name &#x3D; &quot;circuitBreaker.requestVolumeThreshold&quot;, value &#x3D; &quot;10&quot;), &#x2F;&#x2F; 设置请求次数\n            @HystrixProperty(name &#x3D; &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value &#x3D; &quot;10000&quot;), &#x2F;&#x2F; 时间窗口期\n            @HystrixProperty(name &#x3D; &quot;circuitBreaker.errorThresholdPercentage&quot;, value &#x3D; &quot;60&quot;), &#x2F;&#x2F; 失败率达到多少后跳闸\n    &#125;)\n    public String circuitBreaker(Integer id) &#123;\n        if (id &lt; 0) &#123;\n            throw new RuntimeException(&quot;******id 不能负数&quot;);\n        &#125;\n        String serialNumber &#x3D; UUID.randomUUID().toString();\n\n        return Thread.currentThread().getName() + &quot;\\t&quot; + &quot;调用成功，流水号: &quot; + serialNumber;\n    &#125;\n\n    public String circuitBreakerFallback(Integer id) &#123;\n        return &quot;id 不能负数，请稍后再试，&#x2F;(ㄒoㄒ)&#x2F;~~   id: &quot; + id;\n    &#125;\n&#125;</code></pre>\n\n<p>涉及到断路器的三个重要参数：<strong>快照时间窗、请求总数阀值、错误百分比阀值</strong></p>\n<ol>\n<li>快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的 10 秒</li>\n<li>请求总数阀值：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为 20，意味着在 10 秒内，如果该 Hystrix 命令的调用次数不足 20 次，即使所有的请求都超时或其他原因失败，断路器都不会打开</li>\n<li>错误百分比阀值：当请求总数在快照时间窗内超过了阀值，比如发生了 30 次调用，如果在这 30 次调用中，有 15 次发生了超时异常，也就是超过 50% 的错误百分比，在默认设定 50% 阀值情况下，这时候就会将断路器打开</li>\n</ol>\n<p><strong>熔断类型：</strong></p>\n<ul>\n<li>打开：请求不再进行调用当前服务，内部设置时钟一般为 MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</li>\n<li>关闭：熔断关闭不会对服务进行熔断</li>\n<li>半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>\n</ul>\n<h2 id=\"5-4-服务监控-HystrixDashboard\"><a href=\"#5-4-服务监控-HystrixDashboard\" class=\"headerlink\" title=\"5.4 服务监控 HystrixDashboard\"></a>5.4 服务监控 HystrixDashboard</h2><p>1、引入依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>2、配置</p>\n<p>这里需要配置允许 hostname，否则会报 Unable to connect to Command Metric Stream</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">server:\n  port: 7001\nhystrix:\n  dashboard:\n    proxy-stream-allow-list: &quot;localhost&quot;</code></pre>\n\n<p>3、启动类</p>\n<p>添加 <code>@EnableHystrixDashboard</code> 注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableHystrixDashboard\npublic class HystrixDashboardApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(HystrixDashboardApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p>4、访问 <code>http://localhost:7001/hystrix</code>，已经可以看到仪表盘</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2e764609f8184ed7a31c7a54832ee640.png\" alt=\"在这里插入图片描述\"></p>\n<p>5、在需要监控的服务，引入 <code>spring-boot-starter-actuator</code> 依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>6、配置监控路径</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n@EnableDiscoveryClient\n@EnableHystrix\npublic class HystrixApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(HystrixApplication.class, args);\n    &#125;\n\n    &#x2F;&#x2F; 配置监控路径\n    @Bean\n    public ServletRegistrationBean getServlet() &#123;\n        HystrixMetricsStreamServlet streamServlet &#x3D; new HystrixMetricsStreamServlet();\n        ServletRegistrationBean registrationBean &#x3D; new ServletRegistrationBean(streamServlet);\n        registrationBean.setLoadOnStartup(1);\n        registrationBean.addUrlMappings(&quot;&#x2F;hystrix.stream&quot;);\n        registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);\n        return registrationBean;\n    &#125;\n&#125;</code></pre>\n\n<p>7、在仪表盘输入需要监控的服务路径</p>\n<p><img src=\"https://img-blog.csdnimg.cn/73388f7f998548199e417760035396e0.png\" alt=\"在这里插入图片描述\"></p>\n<p>8、调用几次接口请求后，即可看到监控图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/5809aeaddbc64d3792e6b921a713812d.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"其他组件的使用待完善\"><a href=\"#其他组件的使用待完善\" class=\"headerlink\" title=\"其他组件的使用待完善\"></a>其他组件的使用待完善</h1>","feature":false,"text":"1. 版本对应官网版本说明：版本说明 · alibaba&#x2F;spring-cloud-alibaba Wiki (github.com) 这里使用 Spring Boot 2.7.7、Spring Cloud 2021.0.4、Spring Cloud Alibaba 2...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94\"><span class=\"toc-text\">1. 版本对应</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Nacos\"><span class=\"toc-text\">2. Nacos</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-Gateway\"><span class=\"toc-text\">3. Gateway</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.2 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">3.3 启动类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E6%9C%8D%E5%8A%A1-Provider-1\"><span class=\"toc-text\">3.4 服务 Provider-1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">3.5 查看路由转发</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">3.6 动态路由与负载均衡</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-OpenFeign\"><span class=\"toc-text\">4. OpenFeign</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">4.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.2 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">4.3 启动类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-FeignService\"><span class=\"toc-text\">4.4 FeignService</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-ConsumerController\"><span class=\"toc-text\">4.5 ConsumerController</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">4.6 查看远程调用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-Hystrix\"><span class=\"toc-text\">5. Hystrix</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\"><span class=\"toc-text\">5.1 前期准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">5.1.1 引入依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-2-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5.1.2 配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-3-%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">5.1.3 启动类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-4-HystrixService\"><span class=\"toc-text\">5.1.4 HystrixService</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-5-HystrixController\"><span class=\"toc-text\">5.1.5 HystrixController</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-6-%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">5.1.6 访问</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7\"><span class=\"toc-text\">5.2 服务降级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E6%96%B9\"><span class=\"toc-text\">5.2.1 服务提供方</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2-%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%96%B9\"><span class=\"toc-text\">5.2.2 服务调用方</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD\"><span class=\"toc-text\">5.3 服务熔断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-4-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7-HystrixDashboard\"><span class=\"toc-text\">5.4 服务监控 HystrixDashboard</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BE%85%E5%AE%8C%E5%96%84\"><span class=\"toc-text\">其他组件的使用待完善</span></a></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Yarn 下载安装及常用配置和命令总结","uid":"db6eec5ece30b9e502959c9b69bfe8c5","slug":"BlogRepository/开发工具及环境/Yarn 下载安装及常用配置和命令总结","date":"2023-01-13T06:47:32.000Z","updated":"2023-03-13T19:13:04.956Z","comments":true,"path":"api/articles/BlogRepository/开发工具及环境/Yarn 下载安装及常用配置和命令总结.json","keywords":null,"cover":"https://cover.png","text":"1. Node.js建议先安装好 Node.js，见另一篇：Node.js 多版本安装及 NPM 镜像配置_凡 223 的博客 2. 下载安装由于 Node.js 自带了一个包管理器 NPM，所以安装 Yarn 更简单的方法是直接使用 npm install --location...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"开发工具及环境","slug":"开发工具及环境","count":11,"path":"api/categories/开发工具及环境.json"}],"tags":[{"name":"开发工具及环境","slug":"开发工具及环境","count":1,"path":"api/tags/开发工具及环境.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"设计模式之美总结（开源实战篇）","uid":"860180e4219f9ce98400fc5559b6d34d","slug":"BlogRepository/设计模式/设计模式之美总结（开源实战篇）","date":"2023-01-10T09:13:05.000Z","updated":"2023-03-13T19:13:04.964Z","comments":true,"path":"api/articles/BlogRepository/设计模式/设计模式之美总结（开源实战篇）.json","keywords":null,"cover":"https://cover.png","text":"设计模式相关的详细知识见如下三篇： 设计模式之美总结（创建型篇）_凡 223 的博客 设计模式之美总结（结构型篇）_凡 223 的博客 设计模式之美总结（行为型篇）_凡 223 的博客 1. Java JDK 应用到的设计模式1.1 工厂模式在 Calendar 类中的应用在前面...","link":"","photos":[],"count_time":{"symbolsCount":"113k","symbolsTime":"1:43"},"categories":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}