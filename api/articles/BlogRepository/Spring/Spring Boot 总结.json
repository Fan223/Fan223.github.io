{"title":"Spring Boot 总结","uid":"2f6fa7c456d90ea78f2273a18fcc64b4","slug":"BlogRepository/Spring/Spring Boot 总结","date":"2022-06-13T18:56:36.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/Spring/Spring Boot 总结.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h1><h2 id=\"1-1-Spring-Boot-优点\"><a href=\"#1-1-Spring-Boot-优点\" class=\"headerlink\" title=\"1.1 Spring Boot 优点\"></a>1.1 Spring Boot 优点</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p></blockquote>\n<p><strong>能快速创建出生产级别的 Spring 应用</strong></p>\n<ul>\n<li>Create stand-alone Spring applications<br><strong>创建独立Spring应用</strong></li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)<br><strong>内嵌 Web 服务器</strong></li>\n<li>Provide opinionated ‘starter’ dependencies to simplify your build configuration<br><strong>自动 starter 依赖，简化构建配置</strong></li>\n<li>Automatically configure Spring and 3rd party libraries whenever possible<br><strong>自动配置 Spring 以及第三方功能</strong></li>\n<li>Provide production-ready features such as metrics, health checks, and externalized configuration<br><strong>提供生产级别的监控、健康检查及外部化配置</strong></li>\n<li>Absolutely no code generation and no requirement for XML configuration<br><strong>无代码生成、无需编写 XML</strong></li>\n</ul>\n<p><strong>Spring Boot 是整合 Spring 技术栈的一站式框架，简化 Spring 技术栈的快速开发脚手架</strong></p>\n<h2 id=\"1-2-Spring-Boot-缺点\"><a href=\"#1-2-Spring-Boot-缺点\" class=\"headerlink\" title=\"1.2 Spring Boot 缺点\"></a>1.2 Spring Boot 缺点</h2><ul>\n<li><strong>迭代快，需要时刻关注变化</strong></li>\n<li><strong>封装太深，内部原理复杂，不容易精通</strong></li>\n</ul>\n<h2 id=\"1-3-微服务概念\"><a href=\"#1-3-微服务概念\" class=\"headerlink\" title=\"1.3 微服务概念\"></a>1.3 微服务概念</h2><p><strong>James Lewis and Martin Fowler (2014)  提出微服务完整概念：<a href=\"https://martinfowler.com/microservices/\">https://martinfowler.com/microservices/</a></strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>In short, the <strong>microservice architectural style</strong> is an approach to developing a single application as <strong>a suite of small services</strong>, each <strong>running in its own process</strong> and communicating with <strong>lightweight</strong> mechanisms, often an <strong>HTTP</strong> resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully <strong>automated deployment</strong> machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be <strong>written in different programming languages</strong> and use different data storage technologies.– James Lewis and Martin Fowler (2014)</p></blockquote>\n<ul>\n<li>微服务是一种架构风格</li>\n<li>一个应用拆分为一组小型服务</li>\n<li>每个服务运行在自己的进程内，也就是可独立部署和升级</li>\n<li>服务之间使用轻量级 HTTP 交互</li>\n<li>服务围绕业务功能拆分</li>\n<li>可以由全自动部署机制独立部署</li>\n<li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li>\n</ul>\n<h2 id=\"1-4-分布式\"><a href=\"#1-4-分布式\" class=\"headerlink\" title=\"1.4 分布式\"></a>1.4 分布式</h2><p><strong>困难：</strong></p>\n<ul>\n<li>远程调用</li>\n<li>服务发现</li>\n<li>负载均衡</li>\n<li>服务容错</li>\n<li>配置管理</li>\n<li>服务监控</li>\n<li>链路追踪</li>\n<li>日志管理</li>\n<li>任务调度</li>\n<li>……</li>\n</ul>\n<p><strong>解决：Spring Boot + Spring Cloud</strong></p>\n<h2 id=\"1-5-云原生（Cloud-Native）\"><a href=\"#1-5-云原生（Cloud-Native）\" class=\"headerlink\" title=\"1.5 云原生（Cloud Native）\"></a>1.5 云原生（Cloud Native）</h2><p><strong>原生应用如何上云。困难：</strong></p>\n<ul>\n<li>服务自愈</li>\n<li>弹性伸缩</li>\n<li>服务隔离</li>\n<li>自动化部署</li>\n<li>灰度发布</li>\n<li>流量治理</li>\n<li>……</li>\n</ul>\n<h1 id=\"2-基础使用\"><a href=\"#2-基础使用\" class=\"headerlink\" title=\"2. 基础使用\"></a>2. 基础使用</h1><h2 id=\"1-1-POM-依赖\"><a href=\"#1-1-POM-依赖\" class=\"headerlink\" title=\"1.1 POM 依赖\"></a>1.1 POM 依赖</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;parent&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.6.2&lt;&#x2F;version&gt;\n\t&lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n&lt;&#x2F;parent&gt;\n\n&lt;dependencies&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n\t&lt;&#x2F;dependency&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n\t\t&lt;scope&gt;test&lt;&#x2F;scope&gt;\n\t&lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<h2 id=\"1-2-创建主程序\"><a href=\"#1-2-创建主程序\" class=\"headerlink\" title=\"1.2 创建主程序\"></a>1.2 创建主程序</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\npublic class SpringbootTestApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(SpringbootTestApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"1-3-配置文件-application-yml\"><a href=\"#1-3-配置文件-application-yml\" class=\"headerlink\" title=\"1.3 配置文件 application.yml\"></a>1.3 配置文件 application.yml</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8081</code></pre>\n\n<h2 id=\"1-4-控制器\"><a href=\"#1-4-控制器\" class=\"headerlink\" title=\"1.4 控制器\"></a>1.4 控制器</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class TestController &#123;\n    @RequestMapping(&quot;&#x2F;index&quot;)\n    @ResponseBody\n    public String index()&#123;\n        return &quot;Hello SpringBoot&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"1-6-启动\"><a href=\"#1-6-启动\" class=\"headerlink\" title=\"1.6 启动\"></a>1.6 启动</h2><p>直接运行 SpringbootTestApplication 主程序的 Main 方法</p>\n<h2 id=\"1-7-简化部署\"><a href=\"#1-7-简化部署\" class=\"headerlink\" title=\"1.7 简化部署\"></a>1.7 简化部署</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;build&gt;\n\t&lt;plugins&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n\t\t\t&lt;configuration&gt;\n\t\t\t\t&lt;excludes&gt;\n\t\t\t\t\t&lt;exclude&gt;\n\t\t\t\t\t\t&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n\t\t\t\t\t\t&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n\t\t\t\t\t&lt;&#x2F;exclude&gt;\n\t\t\t\t&lt;&#x2F;excludes&gt;\n\t\t\t&lt;&#x2F;configuration&gt;\n\t\t&lt;&#x2F;plugin&gt;\n\t&lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p><strong>把项目打成jar包，直接在目标服务器执行即可。<code>java -jar SpringbootTest-0.0.1-SNAPSHOT.jar</code></strong></p>\n<h1 id=\"2-自动配置\"><a href=\"#2-自动配置\" class=\"headerlink\" title=\"2. 自动配置\"></a>2. 自动配置</h1><h2 id=\"2-1-依赖管理\"><a href=\"#2-1-依赖管理\" class=\"headerlink\" title=\"2.1 依赖管理\"></a>2.1 依赖管理</h2><p><strong>父项目做依赖管理</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">依赖管理  \n&lt;parent&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;\n\n它的父项目\n&lt;parent&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n<p><strong>几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制</strong></p>\n<h2 id=\"2-2-开发导入-starter-场景启动器\"><a href=\"#2-2-开发导入-starter-场景启动器\" class=\"headerlink\" title=\"2.2 开发导入 starter 场景启动器\"></a>2.2 开发导入 starter 场景启动器</h2><ol>\n<li><strong>很多 <code>spring-boot-starter-*</code> ： <code>*</code> 就某种场景</strong></li>\n<li>只要引入 starter，这个场景的所有常规需要的依赖都将自动引入</li>\n<li>Spring Boot 所有支持的场景<br><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n<li><strong><code>*-spring-boot-starter</code>： 第三方为我们提供的简化开发的场景启动器</strong></li>\n<li>所有场景启动器最底层的依赖<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;\n\t&lt;scope&gt;compile&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n</ol>\n<h2 id=\"2-3-无需关注版本号，自动版本仲裁\"><a href=\"#2-3-无需关注版本号，自动版本仲裁\" class=\"headerlink\" title=\"2.3 无需关注版本号，自动版本仲裁\"></a>2.3 无需关注版本号，自动版本仲裁</h2><ol>\n<li><strong>引入依赖默认都可以不写版本</strong></li>\n<li><strong>引入非版本仲裁的 jar，要写版本号</strong></li>\n<li><strong>可以修改默认版本号</strong></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">1、查看 spring-boot-dependencies 里面规定当前依赖的版本用的 key。\n2、在当前项目里面重写配置\n&lt;properties&gt;\n\t&lt;mysql.version&gt;8.0.19&lt;&#x2F;mysql.version&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<h2 id=\"2-4-自动配置\"><a href=\"#2-4-自动配置\" class=\"headerlink\" title=\"2.4 自动配置\"></a>2.4 自动配置</h2><ul>\n<li><p><strong>自动配好 Tomcat</strong></p>\n<ul>\n<li>引入 Tomcat 依赖</li>\n<li>配置 Tomcat</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;\n      &lt;scope&gt;compile&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n<li><p><strong>自动配好 SpringMVC</strong></p>\n<ul>\n<li>引入 SpringMVC 全套组件</li>\n<li>自动配好 SpringMVC 常用组件（功能）</li>\n</ul>\n</li>\n<li><p><strong>自动配好 Web 常见功能，如：字符编码问题</strong></p>\n<ul>\n<li>Spring Boot 配置好了所有 Web 开发的常见场景</li>\n</ul>\n</li>\n<li><p><strong>默认的包结构</strong></p>\n<ul>\n<li><strong>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</strong></li>\n<li>无需以前的包扫描配置</li>\n<li>想要改变扫描路径，<code>@SpringBootApplication(scanBasePackages=&quot;fan&quot;)</code> ，扩大层级，<strong>或者 @ComponentScan 指定扫描路径</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n等同于\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(&quot;fan.springboottest&quot;)</code></pre></li>\n<li><p><strong>各种配置拥有默认值</strong></p>\n<ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>\n<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n<li><p><strong>按需加载所有自动配置项</strong></p>\n<ul>\n<li>非常多的 starter</li>\n<li><strong>引入了哪些场景这个场景的自动配置才会开启</strong></li>\n<li><strong>Spring Boot 所有的自动配置功能都在 spring-boot-autoconfigure 包里</strong></li>\n</ul>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<h2 id=\"2-5-自动配置原理\"><a href=\"#2-5-自动配置原理\" class=\"headerlink\" title=\"2.5 自动配置原理\"></a>2.5 自动配置原理</h2><h3 id=\"2-5-1-引导加载自动配置类\"><a href=\"#2-5-1-引导加载自动配置类\" class=\"headerlink\" title=\"2.5.1 引导加载自动配置类\"></a>2.5.1 引导加载自动配置类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters &#x3D; &#123; @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; TypeExcludeFilter.class),\n\t\t@Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; AutoConfigurationExcludeFilter.class) &#125;)\npublic @interface SpringBootApplication&#123;\n&#125;</code></pre>\n\n<ol>\n<li><p><strong>@SpringBootConfiguration</strong><br>@Configuration。代表当前是一个配置类</p>\n</li>\n<li><p><strong>@ComponentScan</strong><br>指定扫描哪些 Spring 注解</p>\n</li>\n<li><p><strong>@EnableAutoConfiguration</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration &#123;\n&#125;</code></pre>\n\n<ul>\n<li><strong>@AutoConfigurationPackage</strong><br><strong>自动配置包，指定了默认的包规则</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Import(AutoConfigurationPackages.Registrar.class)  &#x2F;&#x2F; 给容器中导入一个组件\npublic @interface AutoConfigurationPackage &#123;\n&#125;\n\n&#x2F;&#x2F; 利用 Registrar 给容器中导入一系列组件\n&#x2F;&#x2F; 将指定的一个包下的所有组件导入进来，MainApplication 所在包下</code></pre></li>\n<li><strong>@Import(AutoConfigurationImportSelector.class)</strong><ul>\n<li>利用 <code>getAutoConfigurationEntry(annotationMetadata);</code> 给容器中批量导入一些组件</li>\n<li>调用 <code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code> 获取到所有需要导入到容器中的配置类</li>\n<li>利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader);</code> 得到所有的组件</li>\n<li>从 <code>META-INF/spring.factories</code> 位置来加载一个文件<br>默认扫描当前系统里面所有 <code>META-INF/spring.factories</code> 位置的文件<br><code>spring-boot-autoconfigure-2.6.4.jar</code> 包里面也有 <code>META-INF/spring.factories</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>文件里面写死了 Spring Boot 一启动就要给容器中加载的所有配置类</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">spring-boot-autoconfigure-2.3.4.RELEASE.jar&#x2F;META-INF&#x2F;spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</code></pre>\n\n<h3 id=\"2-5-2-按需开启自动配置\"><a href=\"#2-5-2-按需开启自动配置\" class=\"headerlink\" title=\"2.5.2 按需开启自动配置\"></a>2.5.2 按需开启自动配置</h3><p><strong>虽然 127 个场景的所有自动配置启动的时候默认全部加载。<code>xxxxAutoConfiguration</code></strong><br><strong>按照条件装配规则（@Conditional），最终会按需配置</strong></p>\n<h3 id=\"2-5-3-修改默认配置\"><a href=\"#2-5-3-修改默认配置\" class=\"headerlink\" title=\"2.5.3 修改默认配置\"></a>2.5.3 修改默认配置</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\n@ConditionalOnBean(MultipartResolver.class)  &#x2F;&#x2F; 容器中有这个类型组件\n@ConditionalOnMissingBean(name &#x3D; DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) &#x2F;&#x2F;容器中没有这个名字 multipartResolver 的组件\npublic MultipartResolver multipartResolver(MultipartResolver resolver) &#123;\n    &#x2F;&#x2F; 给 @Bean 标注的方法传入了对象参数，这个参数的值就会从容器中找\n    &#x2F;&#x2F; SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范\n    &#x2F;&#x2F; Detect if the user has created a MultipartResolver but named it incorrectly\n    return resolver;\n&#125;\n给容器中加入了文件上传解析器</code></pre>\n\n<p><strong>Spring Boot 默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\n@ConditionalOnMissingBean\npublic CharacterEncodingFilter characterEncodingFilter() &#123;\n&#125;</code></pre>\n\n<h2 id=\"2-6-小结\"><a href=\"#2-6-小结\" class=\"headerlink\" title=\"2.6 小结\"></a>2.6 小结</h2><ul>\n<li><strong>Spring Boot 先加载所有的自动配置类  xxxxxAutoConfiguration</strong></li>\n<li><strong>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties 里面拿xxxProperties 和配置文件进行了绑定</strong></li>\n<li><strong>生效的配置类就会给容器中装配组件</strong></li>\n<li><strong>只要容器中有这些组件，相当于拥有对应的这些功能</strong></li>\n<li><strong>定制化配置</strong><ul>\n<li><strong>用户直接自己 @Bean 替换底层的组件</strong></li>\n<li><strong>用户去看这个组件是获取的配置文件什么值就去修改</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt; xxxxProperties 里面拿值  —-&gt; application.properties</strong></p>\n<p><strong>最佳实践</strong></p>\n<ol>\n<li><strong>引入场景依赖</strong><br><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n<li>查看自动配置了哪些（选做）<ul>\n<li>自己分析，引入场景对应的自动配置一般都生效了</li>\n<li>配置文件中 debug&#x3D;true 开启自动配置报告。Negative（不生效）\\Positive（生效）</li>\n</ul>\n</li>\n<li>是否需要修改<ul>\n<li>参照文档修改配置项<br><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a><br><strong>分析 xxxxProperties 绑定了配置文件的哪些</strong></li>\n<li>自定义加入或者替换组件<br><strong>@Bean、@Component…</strong></li>\n<li><strong>自定义器  XXXXXCustomizer</strong></li>\n<li>…</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"3-注解与配置绑定\"><a href=\"#3-注解与配置绑定\" class=\"headerlink\" title=\"3. 注解与配置绑定\"></a>3. 注解与配置绑定</h1><h2 id=\"3-1-Configuration-proxyBeanMethods\"><a href=\"#3-1-Configuration-proxyBeanMethods\" class=\"headerlink\" title=\"3.1 @Configuration(proxyBeanMethods)\"></a>3.1 @Configuration(proxyBeanMethods)</h2><p><strong>告诉Spring Boot这是一个配置类 &#x3D;&#x3D; 配置文件，配置类本身也是组件。配置类里面使用 @Bean 标注在方法上给容器注册组件，默认是单实例的</strong></p>\n<p><strong>Full 模式与 Lite 模式</strong></p>\n<ul>\n<li><strong>配置类组件之间无依赖关系用 Lite 模式加速容器启动过程，减少判断</strong></li>\n<li><strong>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用 Full 模式</strong></li>\n</ul>\n<p><strong>proxyBeanMethods：代理 bean 的方法：</strong></p>\n<ul>\n<li><code>Full(proxyBeanMethods = true)</code>【<strong>保证每个 @Bean 方法被调用多少次返回的组件都是单实例的，Spring Boot 总会检查这个组件是否在容器中有，获取的都是之前注册容器中的单实例对象</strong>】</li>\n<li><code>Lite(proxyBeanMethods = false)</code>  【<strong>每个 @Bean 方法被调用多少次返回的组件都是新创建的</strong>】</li>\n</ul>\n<p><strong>组件依赖必须使用Full模式默认。其他默认是否Lite模式</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">配置类\n@Configuration(proxyBeanMethods &#x3D; true &#x2F;*false*&#x2F;) &#x2F;&#x2F; 代理\npublic class MyConfig &#123;\n    @Bean\n    public User user01()&#123;\n        User user &#x3D; new User(&quot;张三&quot;, 17);\n        user.setPet(petCat());\n        return user;\n    &#125;\n    @Bean(&quot;cat&quot;)\n    public Pet petCat()&#123;\n        return new Pet(&quot;tom&quot;,78);\n    &#125;\n&#125;\n\nBean\npublic class User &#123;\n    private String username;\n    private int age;\n    private Pet pet;\n&#125;</code></pre>\n\n<ul>\n<li><strong>默认值为 true。为 false 时，每一次 new 出的对象都是不一样的。</strong> 在 User 类中嵌入 Pet 类，使用 User 类获取到的 Pet 类与直接获取 Pet 类不相等，而且使用两次 new 获取 Pet 类，值也不相等，即每次获取的不是同一个</li>\n<li><strong>为 true 时，无论怎么样获取Pet类，无论获取多少次，都是相等的，即每次获取都是同一个。单实例</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\npublic class SpringinitApplication &#123;\n\n    public static void main(String[] args) &#123;\n        ConfigurableApplicationContext run &#x3D; SpringApplication.run(SpringbootTestApplication.class, args);\n  \n        User user01 &#x3D; (User) run.getBean(&quot;user01&quot;, User.class);\n        System.out.println(user01);\n        System.out.println(&quot;用户的宠物：&quot; + user01.getPet());\n\n        Pet pet &#x3D; (Pet) run.getBean(&quot;cat&quot;,Pet.class);\n        System.out.println(pet);\n\n        System.out.println(user01.getPet() &#x3D;&#x3D; pet);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-2-Conditional\"><a href=\"#3-2-Conditional\" class=\"headerlink\" title=\"3.2 @Conditional\"></a>3.2 @Conditional</h2><p><strong>条件注解，需要某些 Bean 满足某种条件才加载</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; true) &#x2F;&#x2F; 告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件\n&#x2F;&#x2F; @ConditionalOnBean(name &#x3D; &quot;tom&quot;) 存在名称为 tom 的 Bean 才去做某些事情\n@ConditionalOnMissingBean(name &#x3D; &quot;tom&quot;)\npublic class MyConfig &#123;\n    &#x2F;**\n     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象\n     * @return\n     *&#x2F;\n    @Bean &#x2F;&#x2F; 给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例\n    public User user01()&#123;\n        User zhangsan &#x3D; new User(&quot;zhangsan&quot;, 18);\n        &#x2F;&#x2F;user组件依赖了Pet组件\n        zhangsan.setPet(tomcatPet());\n        return zhangsan;\n    &#125;\n    @Bean(&quot;tom22&quot;)\n    public Pet tomcatPet()&#123;\n        return new Pet(&quot;tomcat&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195440.png\"></p>\n<table>\n<thead>\n<tr>\n<th><strong>注解</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>@ConditionalOnProperty</strong></td>\n<td><code>application.properties</code> 或 <code>application.yml</code> 中是否有满足条件的配置</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnBean</strong></td>\n<td>Bean 已经存在应用上下文时才会加载</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnMissingBean</strong></td>\n<td>Bean 不存在应用上下文时才会加载</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnClass</strong></td>\n<td>某个类存在于 classpath 中才加载</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnMissingClass</strong></td>\n<td>某个类不存在于 classpath 中才加载</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnExpression</strong></td>\n<td>当条件为 true 时才加载</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnSingleCandidate</strong></td>\n<td>只有指定类已存在于 BeanFactory 中，并且可以确定单个</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnResource</strong></td>\n<td>加载的 bean 依赖指定资源存在于 classpath</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnJndi</strong></td>\n<td>只有指定的资源通过 JNDI 加载后才加载 bean</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnJava</strong></td>\n<td>只有运行指定版本的 Java 才会加载 Bean</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnWebApplication</strong></td>\n<td>只有运行在 web 应用里才会加载这个 bean</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnNotWebApplication</strong></td>\n<td>只有运行在非 web 应用里才会加载这个 bean</td>\n</tr>\n<tr>\n<td><strong>@ConditionalOnCloudPlatform</strong></td>\n<td>只有运行在指定的云平台上才加载指定的 bean，CloudPlatform 是<code>org.springframework.boot.cloud</code> 下一个 enum 类型的类</td>\n</tr>\n</tbody></table>\n<p><strong>例：</strong></p>\n<p><code>@ConditionalOnProperty</code>：<code>application.properties</code> 或 <code>application.yml</code> 中是否有满足条件的配置</p>\n<p><strong>配置文件：</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">fan.property&#x3D;true</code></pre>\n\n<p><strong>使用：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; @ConditionalOnProperty(prefix &#x3D; &quot;fan&quot;, name &#x3D; &quot;property&quot;, havingValue &#x3D; &quot;true&quot;)\n@ConditionalOnProperty(value &#x3D; &quot;fan.property&quot;, havingValue &#x3D; &quot;true&quot;)</code></pre>\n\n<h2 id=\"3-2-Import、-ImportResource\"><a href=\"#3-2-Import、-ImportResource\" class=\"headerlink\" title=\"3.2 @Import、@ImportResource\"></a>3.2 @Import、@ImportResource</h2><p><strong>@Import：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n@Import(&#123;User.class, DBHelper.class&#125;)</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\npublic class SpringbootTestApplication &#123;\n    public static void main(String[] args) &#123;\n        ConfigurableApplicationContext run &#x3D; SpringApplication.run(SpringbootTestApplication.class, args);\n        String[] users &#x3D; run.getBeanNamesForType(User.class);\n        for (String user : users) &#123;\n            System.out.println(user);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195455.png\"></p>\n<p><strong>@ImportResource：引入自定义配置文件</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ImportResource(&quot;classpath:beans.xml&quot;)</code></pre>\n\n<h2 id=\"3-3-Bean\"><a href=\"#3-3-Bean\" class=\"headerlink\" title=\"3.3 @Bean\"></a>3.3 @Bean</h2><p><strong>设置 Bean，给容器中添加组件，以方法名作为组件的 id，返回类型就是组件类型，返回值就是组件的容器中的实例。配置类里面使用 @Bean 标注在方法上给容器注册组件，默认是单实例的</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic User user01()&#123;\n\tUser user &#x3D; new User(&quot;张三&quot;, 17);\n\tuser.setPet(petCat());\n\treturn user;\n&#125;\n\n@Bean(&quot;cat&quot;)\npublic Pet petCat()&#123;\n\treturn new Pet(&quot;tom&quot;,78);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\npublic class SpringbootTestApplication &#123;\n    public static void main(String[] args) &#123;\n        ConfigurableApplicationContext run &#x3D; SpringApplication.run(SpringbootTestApplication.class, args);\n        String[] beanDefinitionNames &#x3D; run.getBeanDefinitionNames();\n        for (String beanDefinitionName : beanDefinitionNames) &#123;\n            System.out.println(beanDefinitionName); &#x2F;&#x2F; 打印输出所有组件名\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-4-配置绑定\"><a href=\"#3-4-配置绑定\" class=\"headerlink\" title=\"3.4 配置绑定\"></a>3.4 配置绑定</h2><p><strong>如何使用Java读取到配置文件properties或yml中的内容，并且把它封装到JavaBean中，以供随时使用</strong></p>\n<p><strong>@Component + @ConfigurationProperties</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能\n *&#x2F;\n@Data\n@Component &#x2F;&#x2F; 注入容器\n@ConfigurationProperties(prefix &#x3D; &quot;user&quot;)\npublic class User &#123;\n    private Integer id;\n    private String name;\n    private String gender;\n    private String[] hobby;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">user:\n  id: 1\n  name: 张三\n  hobby: [篮球, 游泳]</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class TestController &#123;\n    @Autowired\n    private User user;\n\n    @RequestMapping(&quot;&#x2F;index&quot;)\n    @ResponseBody\n    public User index()&#123;\n        return user;\n    &#125;\n&#125;</code></pre>\n\n<p><strong>@EnableConfigurationProperties + @ConfigurationProperties</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ConfigurationProperties(prefix &#x3D; &quot;user&quot;)\npublic class User &#123;\n    private Integer id;\n    private String name;\n    private String gender;\n    private String[] hobby;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@EnableConfigurationProperties(User.class)\n&#x2F;&#x2F; 1、开启Car配置绑定功能\n&#x2F;&#x2F; 2、把这个Car这个组件自动注册到容器中\npublic class MyConfig &#123;\n&#125;</code></pre>\n\n<h2 id=\"3-5-配置绑定提示\"><a href=\"#3-5-配置绑定提示\" class=\"headerlink\" title=\"3.5 配置绑定提示\"></a>3.5 配置绑定提示</h2><p><strong>自定义的类和配置文件绑定一般没有提示</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n    &lt;optional&gt;true&lt;&#x2F;optional&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                            &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n                        &lt;&#x2F;exclude&gt;\n                    &lt;&#x2F;excludes&gt;\n                &lt;&#x2F;configuration&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<h2 id=\"3-6-Value-与-ConfigurationProperties-对比\"><a href=\"#3-6-Value-与-ConfigurationProperties-对比\" class=\"headerlink\" title=\"3.6 @Value 与 @ ConfigurationProperties 对比\"></a>3.6 @Value 与 @ ConfigurationProperties 对比</h2><p><strong>@Value 和 @ConfigurationProperties 注解都能读取配置文件中的属性值并绑定到 JavaBean 中。当我们只需要读取配置文件中的某一个配置时，可以通过 @Value 注解获取</strong></p>\n<ol>\n<li><p>使用位置不同<br><strong>@ConfigurationProperties：标注在 JavaBean 的类名上</strong><br><strong>@Value：标注在 JavaBean 的属性上</strong></p>\n</li>\n<li><p>功能不同<br><strong>@ConfigurationProperties：用于批量绑定配置文件中的配置</strong><br><strong>@Value：只能一个一个的指定需要绑定的配置</strong></p>\n</li>\n<li><p>松散绑定支持不同<br><strong>@ConfigurationProperties：支持松散绑定（松散语法）</strong>，例如实体类 Person 中有一个属性为 lastName，那么配置文件中的属性名支持以下写法：</p>\n<ul>\n<li>person.firstName</li>\n<li>person.first-name</li>\n<li>person.first_name</li>\n<li>PERSON_FIRST_NAME</li>\n</ul>\n<p><strong>@Vaule：不支持松散绑定</strong></p>\n</li>\n<li><p>应用场景不同<br>@Value 和 @ConfigurationProperties 两个注解之间，并没有明显的优劣之分，它们只是适合的应用场景不同而已。</p>\n<ul>\n<li><strong>若只是获取配置文件中的某项值，则推荐使用 @Value 注解</strong></li>\n<li><strong>若专门编写了一个 JavaBean 来和配置文件进行映射，则建议使用 @ConfigurationProperties 注解</strong></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-7-PropertySource\"><a href=\"#3-7-PropertySource\" class=\"headerlink\" title=\"3.7 @PropertySource\"></a>3.7 @PropertySource</h2><p><strong>如果将所有的配置都集中到 application.properties 或 application.yml 中，那么这个配置文件会十分的臃肿且难以维护，因此我们通常会将与 Spring Boot 无关的配置（例如自定义配置）提取出来，写在一个单独的配置文件中，并在对应的 JavaBean 上使用 @PropertySource 注解指向该配置文件</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195516.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PropertySource(value &#x3D; &quot;classpath:person.properties&quot;) &#x2F;&#x2F;指向对应的配置文件\n@Component\n@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)\npublic class Person &#123;\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Date birth;\n    private Map&lt;String, Object&gt; maps;\n    private List&lt;Object&gt; lists;\n    private Dog dog;\n&#125;</code></pre>\n\n<h1 id=\"4-基本配置\"><a href=\"#4-基本配置\" class=\"headerlink\" title=\"4. 基本配置\"></a>4. 基本配置</h1><h2 id=\"4-1-SpringMVC-的自动配置概览\"><a href=\"#4-1-SpringMVC-的自动配置概览\" class=\"headerlink\" title=\"4.1 SpringMVC 的自动配置概览\"></a>4.1 SpringMVC 的自动配置概览</h2><p>Spring Boot provides auto-configuration for Spring MVC <strong>that works well with most applications.(大多场景我们都无需自定义配置)</strong></p>\n<p><strong>The auto-configuration adds the following features on top of Spring’s defaults（添加如下功能）：</strong></p>\n<ul>\n<li>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<br><strong>内容协商视图解析器和 BeanName 视图解析器</strong></li>\n<li>Support for serving static resources, including support for WebJars (covered later in this document)).<br><strong>静态资源（包括webjars）</strong></li>\n<li>Automatic registration of Converter, GenericConverter, and Formatter beans.<br><strong>自动注册 Converter，GenericConverter，Formatter</strong></li>\n<li>Support for HttpMessageConverters (covered later in this document).<br><strong>支持 HttpMessageConverters （配合内容协商理解原理）</strong></li>\n<li>Automatic registration of MessageCodesResolver (covered later in this document).<br><strong>自动注册 MessageCodesResolver （国际化用）</strong></li>\n<li>Static index.html support.<br><strong>静态 index.html 页支持</strong></li>\n<li>Custom Favicon support (covered later in this document).<br><strong>自定义 Favicon</strong></li>\n<li>Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).<br><strong>自动使用 ConfigurableWebBindingInitializer ，（DataBinder 负责将请求数据绑定到JavaBean上）</strong></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>If you want to keep those Spring Boot MVC customizations and make more MVC customizations (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.<br><strong>不用 @EnableWebMvc 注解。使用 @Configuration + WebMvcConfigurer 自定义规则</strong></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.<br><strong>声明 WebMvcRegistrations 改变默认底层组件</strong></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.<br><strong>使用 @EnableWebMvc + @Configuration + DelegatingWebMvcConfiguration 全面接管 SpringMVC</strong></p></blockquote>\n<h2 id=\"4-2-设置端口\"><a href=\"#4-2-设置端口\" class=\"headerlink\" title=\"4.2 设置端口\"></a>4.2 设置端口</h2><p><strong><a href=\"http://localhost:xxx/aaa.png\">http://localhost:xxx/aaa.png</a></strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: xxxx     &#x2F;&#x2F; 端口号</code></pre>\n\n<h2 id=\"4-3-静态资源访问\"><a href=\"#4-3-静态资源访问\" class=\"headerlink\" title=\"4.3 静态资源访问\"></a>4.3 静态资源访问</h2><p><strong>只要静态资源放在类路径下： <code>called /static (or /public or /resources or /META-INF/resources</code></strong></p>\n<p><strong>它们的优先级顺序为：<code>classpath:/META-INF/resources/ &gt; classpath:/resources/ &gt; classpath:/static/ &gt; classpath:/public/</code></strong></p>\n<p><strong>访问 ： 当前项目根路径&#x2F; + 静态资源名。原理： 静态映射&#x2F;</strong></p>\n<p><strong>请求进来，先去找 Controller 看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应 404 页</strong></p>\n<h3 id=\"4-3-1-改变默认的静态资源路径\"><a href=\"#4-3-1-改变默认的静态资源路径\" class=\"headerlink\" title=\"4.3.1 改变默认的静态资源路径\"></a>4.3.1 改变默认的静态资源路径</h3><p><strong>改变默认的静态资源路径后，原先的默认路径就失效了</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">spring:\n  web:\n    resources:\n      static-locations: [classpath:&#x2F;aaa&#x2F;]\n#      static-locations: classpath:&#x2F;aaa&#x2F; classpath之后的不能加空格</code></pre>\n\n<h3 id=\"4-3-2-静态资源访问前缀\"><a href=\"#4-3-2-静态资源访问前缀\" class=\"headerlink\" title=\"4.3.2 静态资源访问前缀\"></a>4.3.2 静态资源访问前缀</h3><p><strong>设置后在访问的静态资源路径前必须加上 &#x2F;xxx。<code>http://localhost:8080/xxx/aaa.png</code></strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mvc:\n    static-path-pattern: &#x2F;xxx&#x2F;**         &#x2F;&#x2F; 路径 http:&#x2F;&#x2F;localhost:8080&#x2F;xxx&#x2F;**</code></pre>\n\n<h3 id=\"4-3-3-webjar\"><a href=\"#4-3-3-webjar\" class=\"headerlink\" title=\"4.3.3 webjar\"></a>4.3.3 webjar</h3><p><strong>自动映射 &#x2F;webjars&#x2F;。<a href=\"https://www.webjars.org/\">https://www.webjars.org/</a></strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>访问地址：<code>http://localhost:8081/webjars/jquery/3.5.1/jquery.js</code>   后面地址要按照依赖里面的包路径</strong></p>\n<h2 id=\"4-4-浏览器访问路径\"><a href=\"#4-4-浏览器访问路径\" class=\"headerlink\" title=\"4.4 浏览器访问路径\"></a>4.4 浏览器访问路径</h2><p><strong>设置后浏览器访问的路径前必须加上 <code>/xxx</code> 。<code>http://localhost:8080/world/res/aaa.png</code><br><code>/访问路径/静态资源路径</code></strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  servlet:\n    context-path: &#x2F;xxx                   &#x2F;&#x2F; 路径 http:&#x2F;&#x2F;localhost:8080&#x2F;xxx&#x2F;</code></pre>\n\n<h2 id=\"4-5-欢迎页支持\"><a href=\"#4-5-欢迎页支持\" class=\"headerlink\" title=\"4.5 欢迎页支持\"></a>4.5 欢迎页支持</h2><ul>\n<li><p>静态资源路径下  index.html</p>\n<ul>\n<li>可以配置静态资源路径</li>\n<li><strong>但是不可以配置静态资源的访问前缀。否则导致 index.html 不能被默认访问</strong></li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">spring:\n#  mvc:\n#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致welcome page功能失效\n\n  resources:\n    static-locations: [classpath:&#x2F;haha&#x2F;]</code></pre></li>\n<li><p>Controller 能处理 &#x2F;index</p>\n</li>\n</ul>\n<h2 id=\"4-6-自定义-Favicon\"><a href=\"#4-6-自定义-Favicon\" class=\"headerlink\" title=\"4.6 自定义 Favicon\"></a>4.6 自定义 Favicon</h2><p><strong>favicon.ico 放在静态资源目录下即可</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">spring:\n#  mvc:\n#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致 Favicon 功能失效</code></pre>\n\n<h2 id=\"4-7-静态资源配置原理\"><a href=\"#4-7-静态资源配置原理\" class=\"headerlink\" title=\"4.7 静态资源配置原理\"></a>4.7 静态资源配置原理</h2><ul>\n<li><strong>Spring Boot 启动默认加载  xxxAutoConfiguration 类（自动配置类）</strong></li>\n<li><strong>SpringMVC 功能的自动配置类 WebMvcAutoConfiguration，生效</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@ConditionalOnWebApplication(type &#x3D; Type.SERVLET)\n@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class &#125;)\npublic class WebMvcAutoConfiguration &#123;&#125;</code></pre></li>\n<li>给容器中配了什么<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Import(EnableWebMvcConfiguration.class)\n@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)\n@Order(0)\npublic static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;&#125;</code></pre></li>\n<li><strong>配置文件的相关属性和 xxx 进行了绑定。<code>WebMvcProperties==spring.mvc</code>、<code>ResourceProperties==spring.resources</code></strong></li>\n</ul>\n<h3 id=\"4-7-1-配置类只有一个有参构造器\"><a href=\"#4-7-1-配置类只有一个有参构造器\" class=\"headerlink\" title=\"4.7.1 配置类只有一个有参构造器\"></a>4.7.1 配置类只有一个有参构造器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 有参构造器所有参数的值都会从容器中确定\n&#x2F;&#x2F; ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象\n&#x2F;&#x2F; WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象\n&#x2F;&#x2F; ListableBeanFactory beanFactory Spring的beanFactory\n&#x2F;&#x2F; HttpMessageConverters 找到所有的HttpMessageConverters\n&#x2F;&#x2F; ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F; DispatcherServletPath  \n&#x2F;&#x2F; ServletRegistrationBean   给应用注册Servlet、Filter....\npublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,\n\t\t\tListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,\n\t\t\tObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,\n\t\t\tObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,\n\t\t\tObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations) &#123;\n\t\tthis.resourceProperties &#x3D; resourceProperties;\n\t\tthis.mvcProperties &#x3D; mvcProperties;\n\t\tthis.beanFactory &#x3D; beanFactory;\n\t\tthis.messageConvertersProvider &#x3D; messageConvertersProvider;\n\t\tthis.resourceHandlerRegistrationCustomizer &#x3D; resourceHandlerRegistrationCustomizerProvider.getIfAvailable();\n\t\tthis.dispatcherServletPath &#x3D; dispatcherServletPath;\n\t\tthis.servletRegistrations &#x3D; servletRegistrations;\n&#125;</code></pre>\n\n<h3 id=\"4-7-2-资源处理的默认规则\"><a href=\"#4-7-2-资源处理的默认规则\" class=\"headerlink\" title=\"4.7.2 资源处理的默认规则\"></a>4.7.2 资源处理的默认规则</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n\tif (!this.resourceProperties.isAddMappings()) &#123;\n\t\tlogger.debug(&quot;Default resource handling disabled&quot;);\n\t\treturn;\n\t&#125;\n\tDuration cachePeriod &#x3D; this.resourceProperties.getCache().getPeriod();\n\tCacheControl cacheControl &#x3D; this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n\t&#x2F;&#x2F; webjars的规则\n\tif (!registry.hasMappingForPattern(&quot;&#x2F;webjars&#x2F;**&quot;)) &#123;\n\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(&quot;&#x2F;webjars&#x2F;**&quot;)\n\t\t\t\t.addResourceLocations(&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot;)\n\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t&#125;\n  \n\t&#x2F;&#x2F;\n\tString staticPathPattern &#x3D; this.mvcProperties.getStaticPathPattern();\n\tif (!registry.hasMappingForPattern(staticPathPattern)) &#123;\n\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t&#125;\n&#125;</code></pre>\n\n<h4 id=\"禁用所有静态资源规则\"><a href=\"#禁用所有静态资源规则\" class=\"headerlink\" title=\"禁用所有静态资源规则\"></a>禁用所有静态资源规则</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">spring:\n#  mvc:\n#    static-path-pattern: &#x2F;res&#x2F;**\n\n  resources:\n    add-mappings: false   禁用所有静态资源规则</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;spring.resources&quot;, ignoreUnknownFields &#x3D; false)\npublic class ResourceProperties &#123;\n\n\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS &#x3D; &#123; &quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,\n\t\t\t&quot;classpath:&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;static&#x2F;&quot;, &quot;classpath:&#x2F;public&#x2F;&quot; &#125;;\n\n\t&#x2F;**\n\t * Locations of static resources. Defaults to classpath:[&#x2F;META-INF&#x2F;resources&#x2F;,\n\t * &#x2F;resources&#x2F;, &#x2F;static&#x2F;, &#x2F;public&#x2F;].\n\t *&#x2F;\n\tprivate String[] staticLocations &#x3D; CLASSPATH_RESOURCE_LOCATIONS;</code></pre>\n\n<h3 id=\"4-7-3-欢迎页的处理规则\"><a href=\"#4-7-3-欢迎页的处理规则\" class=\"headerlink\" title=\"4.7.3 欢迎页的处理规则\"></a>4.7.3 欢迎页的处理规则</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。\n\n@Bean\npublic WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n\t\tFormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) &#123;\n\tWelcomePageHandlerMapping welcomePageHandlerMapping &#x3D; new WelcomePageHandlerMapping(\n\t\tnew TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n\t\tthis.mvcProperties.getStaticPathPattern());\n\twelcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n\twelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n\treturn welcomePageHandlerMapping;\n&#125;\n\nWelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n\t\tApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;\n\tif (welcomePage.isPresent() &amp;&amp; &quot;&#x2F;**&quot;.equals(staticPathPattern)) &#123;\n\t\t&#x2F;&#x2F; 要用欢迎页功能，必须是 &#x2F;**\n\t\tlogger.info(&quot;Adding welcome page: &quot; + welcomePage.get());\n\t\tsetRootViewName(&quot;forward:index.html&quot;);\n\t&#125; else if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;\n\t\t&#x2F;&#x2F; 调用Controller  &#x2F;index\n\t\tlogger.info(&quot;Adding welcome page template: index&quot;);\n\t\tsetRootViewName(&quot;index&quot;);\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"4-8-设置-Rest-响应方式\"><a href=\"#4-8-设置-Rest-响应方式\" class=\"headerlink\" title=\"4.8 设置 Rest 响应方式\"></a>4.8 设置 Rest 响应方式</h2><h3 id=\"4-8-1-激活-Rest-响应方式\"><a href=\"#4-8-1-激活-Rest-响应方式\" class=\"headerlink\" title=\"4.8.1 激活 Rest 响应方式\"></a>4.8.1 激活 Rest 响应方式</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">激活，设置为true\nspring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true</code></pre>\n\n<h3 id=\"4-8-2-设置配置类，自定义值\"><a href=\"#4-8-2-设置配置类，自定义值\" class=\"headerlink\" title=\"4.8.2 设置配置类，自定义值\"></a>4.8.2 设置配置类，自定义值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic HiddenHttpMethodFilter hiddenHttpMethodFilter()&#123;\n\tHiddenHttpMethodFilter hiddenHttpMethodFilter &#x3D; new HiddenHttpMethodFilter();\n\thiddenHttpMethodFilter.setMethodParam(&quot;xxx&quot;);   &#x2F;&#x2F; 自定义值\n\treturn hiddenHttpMethodFilter;\n&#125;</code></pre>\n\n<h3 id=\"4-8-3-HTML-设置表单提交响应方式，正常-GET-和-POST-提交不改变\"><a href=\"#4-8-3-HTML-设置表单提交响应方式，正常-GET-和-POST-提交不改变\" class=\"headerlink\" title=\"4.8.3 HTML 设置表单提交响应方式，正常 GET 和 POST 提交不改变\"></a>4.8.3 HTML 设置表单提交响应方式，正常 GET 和 POST 提交不改变</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form action&#x3D;&quot;&#x2F;user&quot; method&#x3D;&quot;post&quot;&gt;\n&lt;!--    &lt;input name&#x3D;&quot;_method&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;DELETE&quot;&gt;--&gt;   &#x2F;&#x2F; 默认值为_method\n    &lt;input name&#x3D;&quot;xxx&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;DELETE&quot;&gt;              &#x2F;&#x2F; 设置后自定义值xxx\n    &lt;input value&#x3D;&quot;reset_delete&quot; type&#x3D;&quot;submit&quot;&gt;\n&lt;&#x2F;form&gt;\n\n&lt;form action&#x3D;&quot;&#x2F;user&quot; method&#x3D;&quot;post&quot;&gt;\n&lt;!--    &lt;input name&#x3D;&quot;_method&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;PUT&quot;&gt;--&gt;      &#x2F;&#x2F; 默认值为_method\n    &lt;input name&#x3D;&quot;xxx&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;PUT&quot;&gt;                 &#x2F;&#x2F; 设置后自定义值xxx\n    &lt;input value&#x3D;&quot;reset_put&quot; type&#x3D;&quot;submit&quot;&gt;</code></pre>\n\n<h3 id=\"4-8-4-RestController-类\"><a href=\"#4-8-4-RestController-类\" class=\"headerlink\" title=\"4.8.4 RestController 类\"></a>4.8.4 RestController 类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class Rest_Controller &#123;\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.GET)\n    @GetMapping(&quot;&#x2F;user&quot;)\n    public String getUser()&#123;\n        return &quot;GET-张三&quot;;\n    &#125;\n\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.POST)\n    @PostMapping(&quot;&#x2F;user&quot;)\n    public String saveUser()&#123;\n        return &quot;POST-张三&quot;;\n    &#125;\n\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.PUT)\n    @PutMapping(&quot;&#x2F;user&quot;)\n    public String putUser()&#123;\n        return &quot;PUT-张三&quot;;\n    &#125;\n\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.DELETE)\n    @DeleteMapping(&quot;&#x2F;user&quot;)\n    public String deleteUser()&#123;\n        return &quot;DELETE-张三&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"4-9-设置-Bean-的值\"><a href=\"#4-9-设置-Bean-的值\" class=\"headerlink\" title=\"4.9 设置 Bean 的值\"></a>4.9 设置 Bean 的值</h2><p><strong>YAML 文件，双引号 “张三” 和单引号 ‘张三’ 与直接写 张三 一样，但是 \\n 在单引号中会作为字符串输出，在双引号中会作为换行输出，双引号不会转义，单引号会转义</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">person:\n  user-name: 张三\n  boss: true\n  birth: 2001&#x2F;12&#x2F;5\n  age: 15\n#  String[]\n  interests: #  intersts: [篮球,足球]\n    - 篮球\n    - 足球\n    - 17\n  \n#  List&lt;String&gt;\n  animal: [猫,狗]\n  \n#  score:\n#    english: 80\n#    math: 70\n#  Map&lt;String, Object&gt;\n  score: &#123;math:79,english:80&#125;\n  \n#  Set&lt;Integer&gt;\n  salarys:\n    - 8888\n    - 5555\n  \n  pet:\n    name: 猫\n    weight: 99\n  \n# Map&lt;String, List&lt;Pet&gt;&gt;\n  allPets:\n    sick:\n      - &#123;name: 狗, weight: 88.4&#125;\n      - name: 猫\n        weight: 54.3\n    health: [&#123;name: 乌龟, weight: 55.3&#125;, &#123;name: 鱼, weight: 44.2&#125;]</code></pre>\n\n<p><strong>配置Bean（1）</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Bean\n@Component   &#x2F;&#x2F; 需要加容器\n@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)\npublic class Person &#123;\n    private String userName;\n    private Boolean boss;\n    private Date birth;\n    private Integer age;\n    private Pet pet;\n    private String[] interests;\n    private List&lt;String&gt; animal;\n    private Map&lt;String, Object&gt; score;\n    private Set&lt;Integer&gt; salarys;\n    private Map&lt;String, List&lt;Pet&gt;&gt; allPets;\n&#125;</code></pre>\n\n<p><strong>配置类和Bean（2）</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">配置类\n@Configuration\n@EnableConfigurationProperties(Car.class) &#x2F;&#x2F; 设置了Bean的class，则不需要加容器\npublic class MyConfig &#123;\n&#125;\n\nBean\n&#x2F;&#x2F;@Component\n@ConfigurationProperties(prefix &#x3D; &quot;mycar&quot;)\npublic class Car &#123;\n    private String brand;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class TestController &#123;\n    @Autowired\n    private User user;\n\n    @RequestMapping(&quot;&#x2F;index&quot;)\n    @ResponseBody\n    public User index()&#123;\n        return user;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"5-请求参数处理、数据响应与内容协商\"><a href=\"#5-请求参数处理、数据响应与内容协商\" class=\"headerlink\" title=\"5. 请求参数处理、数据响应与内容协商\"></a>5. 请求参数处理、数据响应与内容协商</h1><h2 id=\"5-1-请求映射\"><a href=\"#5-1-请求映射\" class=\"headerlink\" title=\"5.1 请求映射\"></a>5.1 请求映射</h2><h3 id=\"5-1-1-REST-使用与原理\"><a href=\"#5-1-1-REST-使用与原理\" class=\"headerlink\" title=\"5.1.1 REST 使用与原理\"></a>5.1.1 REST 使用与原理</h3><ul>\n<li><p><strong>@xxxMapping</strong></p>\n</li>\n<li><p><strong>REST 风格支持（使用 HTTP 请求方式动词来表示对资源的操作）</strong></p>\n<ul>\n<li>以前：&#x2F;getUser   获取用户     &#x2F;deleteUser 删除用户    &#x2F;editUser  修改用户       &#x2F;saveUser 保存用户</li>\n<li>现在： &#x2F;user    GET-获取用户    DELETE-删除用户     PUT-修改用户      POST-保存用户</li>\n<li><strong>核心Filter；HiddenHttpMethodFilter</strong><ul>\n<li><strong>用法： 表单 method&#x3D;post，隐藏域  _method&#x3D;put</strong></li>\n<li>Spring Boot 中手动开启</li>\n</ul>\n</li>\n<li>扩展：如何自定义 _method 这个名字</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.GET)\npublic String getUser()&#123;\n\treturn &quot;GET-张三&quot;;\n&#125;\n\n@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.POST)\npublic String saveUser()&#123;\n\treturn &quot;POST-张三&quot;;\n&#125;\n\n\n@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.PUT)\npublic String putUser()&#123;\n\treturn &quot;PUT-张三&quot;;\n&#125;\n\n@RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.DELETE)\npublic String deleteUser()&#123;\n\treturn &quot;DELETE-张三&quot;;\n&#125;\n\n@Bean\n@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n@ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc.hiddenmethod.filter&quot;, name &#x3D; &quot;enabled&quot;, matchIfMissing &#x3D; false)\npublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() &#123;\n\treturn new OrderedHiddenHttpMethodFilter();\n&#125;\n\n\n&#x2F;&#x2F; 自定义filter\n@Bean\npublic HiddenHttpMethodFilter hiddenHttpMethodFilter()&#123;\n\tHiddenHttpMethodFilter methodFilter &#x3D; new HiddenHttpMethodFilter();\n\tmethodFilter.setMethodParam(&quot;_m&quot;); &#x2F;&#x2F; 将_method属性自定义为_m\n\treturn methodFilter;\n&#125;</code></pre></li>\n<li><p><strong>REST 原理（表单提交要使用 REST 的时候）</strong></p>\n<ul>\n<li>表单提交会带上 _method&#x3D;PUT</li>\n<li>请求过来被 HiddenHttpMethodFilter 拦截<ul>\n<li>请求是否正常，并且是 POST<ul>\n<li>获取到 _method 的值</li>\n<li>兼容以下请求：PUT.DELETE.PATCH</li>\n<li>原生request（post），包装模式 requesWrapper 重写了 getMethod 方法，返回的是传入的值</li>\n<li>过滤器链放行的时候用 wrapper。以后的方法调用 getMethod 是调用 requesWrapper 的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>REST 使用客户端工具<br><strong>如 Postman 直接发送 Put、DELETE 等方式请求，无需 Filter</strong></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能</code></pre>\n\n<h3 id=\"5-1-2-请求映射原理\"><a href=\"#5-1-2-请求映射原理\" class=\"headerlink\" title=\"5.1.2 请求映射原理\"></a>5.1.2 请求映射原理</h3><p><img src=\"http://img.fan223.cn/2023/04/20230420195550.png\"></p>\n<p><strong>SpringMVC 功能分析都从 <code>org.springframework.web.servlet.DispatcherServlet-》doDispatch ()</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n\t\tHttpServletRequest processedRequest &#x3D; request;\n\t\tHandlerExecutionChain mappedHandler &#x3D; null;\n\t\tboolean multipartRequestParsed &#x3D; false;\n\n\t\tWebAsyncManager asyncManager &#x3D; WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry &#123;\n\t\t\tModelAndView mv &#x3D; null;\n\t\t\tException dispatchException &#x3D; null;\n\n\t\t\ttry &#123;\n\t\t\t\tprocessedRequest &#x3D; checkMultipart(request);\n\t\t\t\tmultipartRequestParsed &#x3D; (processedRequest !&#x3D; request);\n\n\t\t\t\t&#x2F;&#x2F; 找到当前请求使用哪个Handler（Controller的方法）处理\n\t\t\t\tmappedHandler &#x3D; getHandler(processedRequest);\n      \n                &#x2F;&#x2F; HandlerMapping：处理器映射。&#x2F;xxx-&gt;&gt;xxxx</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195604.png\"></p>\n<p><strong>RequestMappingHandlerMapping：保存了所有 @RequestMapping 和 handler 的映射规则</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195618.png\"></p>\n<p><strong>所有的请求映射都在 HandlerMapping 中</strong></p>\n<ul>\n<li>Spring Boot 自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到 index.html；</li>\n<li>Spring Boot 自动配置了默认 的 RequestMappingHandlerMapping</li>\n<li>请求进来，挨个尝试所有的 HandlerMapping 看是否有请求信息。<ul>\n<li>如果有就找到这个请求对应的 handler</li>\n<li>如果没有就是下一个 HandlerMapping</li>\n</ul>\n</li>\n<li>需要一些自定义的映射处理，我们也可以自己给容器中放 HandlerMapping。<strong>自定义 HandlerMapping</strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;\n\tif (this.handlerMappings !&#x3D; null) &#123;\n\t\tfor (HandlerMapping mapping : this.handlerMappings) &#123;\n\t\t\tHandlerExecutionChain handler &#x3D; mapping.getHandler(request);\n\t\t\tif (handler !&#x3D; null) &#123;\n\t\t\t\treturn handler;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn null;\n&#125;</code></pre>\n\n<h2 id=\"5-2-获取请求参数-Param-的值\"><a href=\"#5-2-获取请求参数-Param-的值\" class=\"headerlink\" title=\"5.2 获取请求参数 Param 的值\"></a>5.2 获取请求参数 Param 的值</h2><h3 id=\"5-2-1-PathVariable\"><a href=\"#5-2-1-PathVariable\" class=\"headerlink\" title=\"5.2.1 @PathVariable\"></a>5.2.1 @PathVariable</h3><p><strong>获取路径中 <code>&#123;xxx&#125;</code> 的值。<code>http://localhost:8080/car/111/owner/zhangsan</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;car&#x2F;&#123;id&#125;&#x2F;owner&#x2F;&#123;username&#125;&quot;)\npublic void getCar(@PathVariable(&quot;id&quot;) int id,\n                   @PathVariable(&quot;username&quot;) String username,\n                   @PathVariable Map&lt;String,String&gt; pv)</code></pre>\n\n<h3 id=\"5-2-2-RequestHeader\"><a href=\"#5-2-2-RequestHeader\" class=\"headerlink\" title=\"5.2.2 @RequestHeader\"></a>5.2.2 @RequestHeader</h3><p><strong>获取请求头的值</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;car&#x2F;&#123;id&#125;&#x2F;owner&#x2F;&#123;username&#125;&quot;)\npublic void get(@RequestHeader(&quot;User-Agent&quot;) String userAgent,\n                @RequestHeader Map&lt;String,String&gt; header）&#123;\n\tMap&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n\tmap.put(&quot;userAgent&quot;,userAgent);\n\tmap.put(&quot;headers&quot;,header);\n\treturn map;\n&#125;</code></pre>\n\n<h3 id=\"5-2-3-CookieValue\"><a href=\"#5-2-3-CookieValue\" class=\"headerlink\" title=\"5.2.3 @CookieValue\"></a>5.2.3 @CookieValue</h3><p><strong>获取 Cookie 的值</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;car&#x2F;&#123;id&#125;&#x2F;owner&#x2F;&#123;username&#125;&quot;)\npublic void get(@CookieValue(&quot;xxx&quot;) String cookie1, &#x2F;&#x2F; xxx为cookie名\n                @CookieValue(&quot;xxx&quot;) Cookie cookie）&#123;\n\tString s &#x3D; cookie.getName() + cookie.getValue()\n&#125;</code></pre>\n\n<h3 id=\"5-2-4-RequestParam\"><a href=\"#5-2-4-RequestParam\" class=\"headerlink\" title=\"5.2.4 @RequestParam\"></a>5.2.4 @RequestParam</h3><p><strong>获取传递参数的值。<code>http://localhost:8080/car/111/owner/zhangsan?age=18&amp;inters=sing&amp;inters=play</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;car&#x2F;&#123;id&#125;&#x2F;owner&#x2F;&#123;username&#125;&quot;)\npublic void get(@RequestParam(&quot;age&quot;) int age,\n                @RequestParam(&quot;inters&quot;) List&lt;String&gt; inters,\n                @RequestParam Map&lt;String,String&gt; param）&#123;\n&#125;</code></pre>\n\n<h2 id=\"5-3-获取-Request-域中的值\"><a href=\"#5-3-获取-Request-域中的值\" class=\"headerlink\" title=\"5.3 获取 Request 域中的值\"></a>5.3 获取 Request 域中的值</h2><h3 id=\"5-3-1-跳转-forward-x2F-xxx\"><a href=\"#5-3-1-跳转-forward-x2F-xxx\" class=\"headerlink\" title=\"5.3.1 跳转 forward:&#x2F;xxx\"></a>5.3.1 跳转 forward:&#x2F;xxx</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;goto&quot;)\npublic String gotoPage(HttpServletRequest request)&#123;\n    request.setAttribute(&quot;code&quot;,200);\n    return &quot;forward:&#x2F;success&quot;;\n&#125;\n\n@ResponseBody\n@RequestMapping(&quot;&#x2F;success&quot;)\npublic Map success(@RequestAttribute(value &#x3D; &quot;msg&quot;,required &#x3D; false) String msg,\n                   @RequestAttribute(&quot;code&quot;) int code)&#123;\n  \n&#125;</code></pre>\n\n<h3 id=\"5-3-2-RequestAttribute\"><a href=\"#5-3-2-RequestAttribute\" class=\"headerlink\" title=\"5.3.2 @RequestAttribute\"></a>5.3.2 @RequestAttribute</h3><p><strong>获取 request 请求域的值，也可通过 HttpServletRequest 直接获取 request，然后通过 request 获取值。设置 required &#x3D; false，获取的值为非必须，即请求域中可以不存在该值</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;success&quot;)\npublic Map success(@RequestAttribute(value &#x3D; &quot;msg&quot;,required &#x3D; false) String msg,\n                   @RequestAttribute(&quot;code&quot;) int code,\n                   HttpServletRequest request)&#123;\n  \n    Object msg1 &#x3D; request.getAttribute(&quot;msg&quot;);\n    Object code1 &#x3D; request.getAttribute(&quot;code&quot;);\n&#125;</code></pre>\n\n<h3 id=\"5-3-3-request-请求域对象\"><a href=\"#5-3-3-request-请求域对象\" class=\"headerlink\" title=\"5.3.3 request 请求域对象\"></a>5.3.3 request 请求域对象</h3><p><strong>在 request 请求域中，可以传递 Map、Model 和 request、response 对象，同时 Map 和 Model 对象都可以直接通过 request 在请求域中获取到。传递的 Map 和 Model 底层其实是一个对象</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;goto&quot;)\npublic String gotoPage(HttpServletRequest request,\n                       Map&lt;String,Object&gt; map,\n                       Model model,\n                       HttpServletResponse response)&#123;\n    map.put(&quot;map&quot;,&quot;map&quot;);\n    model.addAttribute(&quot;model&quot;,&quot;model&quot;);\n    request.setAttribute(&quot;code&quot;,200);\n\n    Cookie cookie &#x3D; new Cookie(&quot;c1&quot;,&quot;v1&quot;);\n    response.addCookie(cookie);\n\n    return &quot;forward:&#x2F;success&quot;;\n&#125;\n\n@ResponseBody\n@RequestMapping(&quot;&#x2F;success&quot;)\npublic Map success(HttpServletRequest request,\n                  @CookieValue(&quot;c1&quot;) String c1)&#123;\n    Object map &#x3D; request.getAttribute(&quot;map&quot;);\n    Object model &#x3D; request.getAttribute(&quot;model&quot;);\n    Object code &#x3D; request.getAttribute(&quot;code&quot;);\n&#125;</code></pre>\n\n<h2 id=\"5-4-矩阵变量\"><a href=\"#5-4-矩阵变量\" class=\"headerlink\" title=\"5.4 矩阵变量\"></a>5.4 矩阵变量</h2><ol>\n<li><strong>语法： 请求路径：<code>/cars/sell;low=34;brand=byd,audi,yd</code></strong></li>\n<li>Spring Boot 默认是禁用了矩阵变量的功能<br>手动开启：原理。对于路径的处理，UrlPathHelper 进行解析。<br>removeSemicolonContent（移除分号内容） 支持矩阵变量的</li>\n<li><strong>矩阵变量必须有 URL 路径变量才能被解析</strong></li>\n</ol>\n<h3 id=\"假如-Cookie-被禁用了，Session-里的内容怎么使用\"><a href=\"#假如-Cookie-被禁用了，Session-里的内容怎么使用\" class=\"headerlink\" title=\"假如 Cookie 被禁用了，Session 里的内容怎么使用\"></a>假如 Cookie 被禁用了，Session 里的内容怎么使用</h3><p><strong>session.set(a,b)   —&gt; jsessionid   —&gt; cookie   —&gt; 每次发送请求携带</strong></p>\n<p><strong>url 重写：<code>/abc;jsessionid=xxx</code>   把 Cookie 的值使用矩阵变量进行传递</strong></p>\n<h3 id=\"5-4-1-配置类开启矩阵变量\"><a href=\"#5-4-1-配置类开启矩阵变量\" class=\"headerlink\" title=\"5.4.1 配置类开启矩阵变量\"></a>5.4.1 配置类开启矩阵变量</h3><p><strong>默认移除 url 地址中的 ; 符号，设置值为 false 则开启矩阵变量</strong></p>\n<ol>\n<li><strong>实现 WebMvcConfigurer 接口，注入 Bean</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyConfig implements WebMvcConfigurer&#123;\n    @Bean\n\tpublic WebMvcConfigurer webMvcConfigurer()&#123;\n\t\treturn new WebMvcConfigurer() &#123;\n\t\t\t@Override\n\t\t\tpublic void configurePathMatch(PathMatchConfigurer configurer) &#123;\n\t\t\t\tUrlPathHelper urlPathHelper &#x3D; new UrlPathHelper();\n\t\t\t\turlPathHelper.setRemoveSemicolonContent(false);\n\t\t\t\tconfigurer.setUrlPathHelper(urlPathHelper);\n\t\t\t&#125;\n\t\t&#125;;\n\t&#125;\n&#125;</code></pre></li>\n<li><strong>实现 WebMvcConfigurer 接口，重写 configurePathMatch 方法</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyConfig implements WebMvcConfigurer&#123;\n    @Override\n    public void configurePathMatch(PathMatchConfigurer configurer) &#123;\n        UrlPathHelper urlPathHelper &#x3D; new UrlPathHelper();\n        urlPathHelper.setRemoveSemicolonContent(false);\n        configurer.setUrlPathHelper(urlPathHelper);\n    &#125;\n&#125;</code></pre></li>\n</ol>\n<h3 id=\"5-4-2-获取矩阵变量\"><a href=\"#5-4-2-获取矩阵变量\" class=\"headerlink\" title=\"5.4.2  获取矩阵变量\"></a>5.4.2  获取矩阵变量</h3><p><strong><code>http://localhost:8080/cars/sell;low=34;brand=byd,audi,yd</code><br><code>http://localhost:8080/cars/sell;low=34;brand=byd;brand=audi;brand=yd</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;cars&#x2F;&#123;path&#125;&quot;) &#x2F;&#x2F; 包括后面的分号内容也算路径\npublic Map&lt;String,Object&gt; carsSell(@MatrixVariable(&quot;low&quot;) Integer low,\n                                   @MatrixVariable(&quot;brand&quot;) List&lt;String&gt; brand,\n                                   @PathVariable(&quot;path&quot;) String path)&#123;\n  \n&#125;</code></pre>\n\n<p><strong><code>http://localhost:8080/boss/1;age=10/2;age=20</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;boss&#x2F;&#123;bossId&#125;&#x2F;&#123;empId&#125;&quot;)\npublic Map&lt;String,Object&gt; boss(@MatrixVariable(value &#x3D; &quot;age&quot;,pathVar &#x3D; &quot;bossId&quot;) int bossAge,\n                               @MatrixVariable(value &#x3D; &quot;age&quot;,pathVar &#x3D; &quot;empId&quot;) int empAge)&#123;\n   \n&#125;</code></pre>\n\n<h2 id=\"5-5-Servlet-API\"><a href=\"#5-5-Servlet-API\" class=\"headerlink\" title=\"5.5 Servlet API\"></a>5.5 Servlet API</h2><p><strong>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</strong></p>\n<p><strong>ServletRequestMethodArgumentResolver  以上的部分参数：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic boolean supportsParameter(MethodParameter parameter) &#123;\n\t\tClass&lt;?&gt; paramType &#x3D; parameter.getParameterType();\n\t\treturn (WebRequest.class.isAssignableFrom(paramType) ||\n\t\t\t\tServletRequest.class.isAssignableFrom(paramType) ||\n\t\t\t\tMultipartRequest.class.isAssignableFrom(paramType) ||\n\t\t\t\tHttpSession.class.isAssignableFrom(paramType) ||\n\t\t\t\t(pushBuilder !&#x3D; null &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||\n\t\t\t\tPrincipal.class.isAssignableFrom(paramType) ||\n\t\t\t\tInputStream.class.isAssignableFrom(paramType) ||\n\t\t\t\tReader.class.isAssignableFrom(paramType) ||\n\t\t\t\tHttpMethod.class &#x3D;&#x3D; paramType ||\n\t\t\t\tLocale.class &#x3D;&#x3D; paramType ||\n\t\t\t\tTimeZone.class &#x3D;&#x3D; paramType ||\n\t\t\t\tZoneId.class &#x3D;&#x3D; paramType);\n&#125;</code></pre>\n\n<h2 id=\"5-6-复杂参数\"><a href=\"#5-6-复杂参数\" class=\"headerlink\" title=\"5.6 复杂参数\"></a>5.6 复杂参数</h2><p><strong>Map、Model（map、model里面的数据会被放在request的请求域  request.setAttribute）</strong>、Errors&#x2F;BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、ServletResponse（response）、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Map&lt;String,Object&gt; map,  Model model, HttpServletRequest request 都是可以给request域中放数据，\nrequest.getAttribute();</code></pre>\n\n<p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel（）；—&gt; BindingAwareModelMap 是 Model 也是 Map</p>\n<p><strong>mavContainer.getModel(); 获取到值的</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195644.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195700.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195712.png\"></p>\n<h2 id=\"5-6-POJO-数据绑定\"><a href=\"#5-6-POJO-数据绑定\" class=\"headerlink\" title=\"5.6 POJO 数据绑定\"></a>5.6 POJO 数据绑定</h2><p><strong>可以自动类型转换与格式化，可以级联封装，ServletModelAttributeMethodProcessor</strong></p>\n<h3 id=\"5-6-1-普通数据绑定\"><a href=\"#5-6-1-普通数据绑定\" class=\"headerlink\" title=\"5.6.1 普通数据绑定\"></a>5.6.1 普通数据绑定</h3><p><strong>HTML 页面，提交后可自动绑定到 Person 类</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form action&#x3D;&quot;&#x2F;saveUser&quot; method&#x3D;&quot;post&quot;&gt;\n    姓名：&lt;input name&#x3D;&quot;username&quot; value&#x3D;&quot;zhangsan&quot; &#x2F;&gt; &lt;br&gt;\n    年龄：&lt;input name&#x3D;&quot;age&quot; value&#x3D;&quot;16&quot;&gt;&lt;br&gt;\n&lt;!--    宠物姓名：&lt;input name&#x3D;&quot;pet.name&quot; value&#x3D;&quot;猫&quot;&gt;&lt;br&gt;--&gt;\n&lt;!--    宠物年龄：&lt;input name&#x3D;&quot;pet.age&quot; value&#x3D;&quot;18&quot;&gt;--&gt;\n    &lt;input name&#x3D;&quot;pet&quot; value&#x3D;&quot;狗,3&quot;&gt;\n    &lt;input type&#x3D;&quot;submit&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<p><strong>Controller 类</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Bean\npublic class Person &#123;\n    private String username;\n    private int age;\n    private Pet pet;\n&#125;\n\nController\n@ResponseBody\n@RequestMapping(&quot;&#x2F;saveUser&quot;)\npublic Person saveUser(Person person)&#123;\n    return person;\n&#125;</code></pre>\n\n<h3 id=\"5-6-2-自定义数据绑定\"><a href=\"#5-6-2-自定义数据绑定\" class=\"headerlink\" title=\"5.6.2 自定义数据绑定\"></a>5.6.2 自定义数据绑定</h3><p><strong><code>&lt;input name=&quot;pet&quot; value=&quot;狗,3&quot;&gt;</code>，配置类设置 convert，将传进来的值以 <code>，</code> 进行分割，第一个为姓名，第二个为年龄</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic WebMvcConfigurer webMvcConfigurer()&#123;\n    return new WebMvcConfigurer() &#123;\n\t\t@Override\n\t\tpublic void addFormatters(FormatterRegistry registry) &#123;\n\t\t\tregistry.addConverter(new Converter&lt;String, Pet&gt;() &#123;\n\t\t\t\t@Override\n\t\t\t\tpublic Pet convert(String s) &#123;\n\t\t\t\t\tif (!s.isEmpty())&#123;\n\t\t\t\t\t\tPet pet &#x3D; new Pet();\n\t\t\t\t\t\tString[] split &#x3D; s.split(&quot;,&quot;);\n\t\t\t\t\t\tpet.setName(split[0]);\n\t\t\t\t\t\tpet.setAge(Integer.parseInt(split[1]));\n\t\t\t\t\t\treturn pet;\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn null;\n\t\t\t\t&#125;\n\t\t\t&#125;);\n\t\t&#125;\n\t&#125;;\n&#125;</code></pre>\n\n<h2 id=\"5-7-参数处理原理\"><a href=\"#5-7-参数处理原理\" class=\"headerlink\" title=\"5.7 参数处理原理\"></a>5.7 参数处理原理</h2><ul>\n<li>HandlerMapping 中找到能处理请求的 Handler（Controller.method()）</li>\n<li>为当前 Handler 找一个适配器 HandlerAdapter； RequestMappingHandlerAdapter</li>\n<li>适配器执行目标方法并确定方法参数的每一个值</li>\n</ul>\n<h3 id=\"5-7-1-HandlerAdapter\"><a href=\"#5-7-1-HandlerAdapter\" class=\"headerlink\" title=\"5.7.1 HandlerAdapter\"></a>5.7.1 HandlerAdapter</h3><p><img src=\"http://img.fan223.cn/2023/04/20230420195727.png\"></p>\n<p>0 - 支持方法上标注 @RequestMapping<br>1 - 支持函数式编程的<br>xxxxxx</p>\n<h3 id=\"5-7-2-执行目标方法\"><a href=\"#5-7-2-执行目标方法\" class=\"headerlink\" title=\"5.7.2 执行目标方法\"></a>5.7.2 执行目标方法</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; Actually invoke the handler.\n&#x2F;&#x2F;DispatcherServlet -- doDispatch\nmv &#x3D; ha.handle(processedRequest, response, mappedHandler.getHandler());</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">mav &#x3D; invokeHandlerMethod(request, response, handlerMethod); &#x2F;&#x2F;执行目标方法\n\n&#x2F;&#x2F;ServletInvocableHandlerMethod\nObject returnValue &#x3D; invokeForRequest(webRequest, mavContainer, providedArgs);\n&#x2F;&#x2F;获取方法的参数值\nObject[] args &#x3D; getMethodArgumentValues(request, mavContainer, providedArgs);</code></pre>\n\n<h3 id=\"5-7-3-参数解析器-HandlerMethodArgumentResolver\"><a href=\"#5-7-3-参数解析器-HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"5.7.3 参数解析器 HandlerMethodArgumentResolver\"></a>5.7.3 参数解析器 HandlerMethodArgumentResolver</h3><ul>\n<li>确定将要执行的目标方法的每一个参数的值是什么</li>\n<li>SpringMVC 目标方法能写多少种参数类型。取决于参数解析器</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195750.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195801.png\"></p>\n<ul>\n<li>当前解析器是否支持解析这种参数</li>\n<li>支持就调用 resolveArgument</li>\n</ul>\n<h3 id=\"5-6-4-返回值处理器\"><a href=\"#5-6-4-返回值处理器\" class=\"headerlink\" title=\"5.6.4 返回值处理器\"></a>5.6.4 返回值处理器</h3><p><img src=\"http://img.fan223.cn/2023/04/20230420195812.png\"></p>\n<h3 id=\"5-6-5-如何确定目标方法每一个参数的值\"><a href=\"#5-6-5-如何确定目标方法每一个参数的值\" class=\"headerlink\" title=\"5.6.5 如何确定目标方法每一个参数的值\"></a>5.6.5 如何确定目标方法每一个参数的值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;InvocableHandlerMethod&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nprotected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception &#123;\n\n\t\tMethodParameter[] parameters &#x3D; getMethodParameters();\n\t\tif (ObjectUtils.isEmpty(parameters)) &#123;\n\t\t\treturn EMPTY_ARGS;\n\t\t&#125;\n\n\t\tObject[] args &#x3D; new Object[parameters.length];\n\t\tfor (int i &#x3D; 0; i &lt; parameters.length; i++) &#123;\n\t\t\tMethodParameter parameter &#x3D; parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] &#x3D; findProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] !&#x3D; null) &#123;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\tif (!this.resolvers.supportsParameter(parameter)) &#123;\n\t\t\t\tthrow new IllegalStateException(formatArgumentError(parameter, &quot;No suitable resolver&quot;));\n\t\t\t&#125;\n\t\t\ttry &#123;\n\t\t\t\targs[i] &#x3D; this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t&#125;\n\t\t\tcatch (Exception ex) &#123;\n\t\t\t\t&#x2F;&#x2F; Leave stack trace for later, exception may actually be resolved and handled...\n\t\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\t\tString exMsg &#x3D; ex.getMessage();\n\t\t\t\t\tif (exMsg !&#x3D; null &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;\n\t\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t\tthrow ex;\n\t\t\t&#125;\n\t\t&#125;\n\t\treturn args;\n&#125;</code></pre>\n\n<h4 id=\"5-6-5-1-挨个判断所有参数解析器那个支持解析这个参数\"><a href=\"#5-6-5-1-挨个判断所有参数解析器那个支持解析这个参数\" class=\"headerlink\" title=\"5.6.5.1 挨个判断所有参数解析器那个支持解析这个参数\"></a>5.6.5.1 挨个判断所有参数解析器那个支持解析这个参数</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Nullable\nprivate HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) &#123;\n\tHandlerMethodArgumentResolver result &#x3D; this.argumentResolverCache.get(parameter);\n\tif (result &#x3D;&#x3D; null) &#123;\n\t\tfor (HandlerMethodArgumentResolver resolver : this.argumentResolvers) &#123;\n\t\t\tif (resolver.supportsParameter(parameter)) &#123;\n\t\t\t\tresult &#x3D; resolver;\n\t\t\t\tthis.argumentResolverCache.put(parameter, result);\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn result;\n&#125;</code></pre>\n\n<h4 id=\"5-6-5-2-解析这个参数的值\"><a href=\"#5-6-5-2-解析这个参数的值\" class=\"headerlink\" title=\"5.6.5.2 解析这个参数的值\"></a>5.6.5.2 解析这个参数的值</h4><p><strong>调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可</strong></p>\n<h4 id=\"5-6-5-3-自定义类型参数-封装-POJO\"><a href=\"#5-6-5-3-自定义类型参数-封装-POJO\" class=\"headerlink\" title=\"5.6.5.3 自定义类型参数 封装 POJO\"></a>5.6.5.3 自定义类型参数 封装 POJO</h4><p><strong>ServletModelAttributeMethodProcessor  这个参数处理器支持是否为简单类型</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static boolean isSimpleValueType(Class&lt;?&gt; type) &#123;\n\t\treturn (Void.class !&#x3D; type &amp;&amp; void.class !&#x3D; type &amp;&amp;\n\t\t\t\t(ClassUtils.isPrimitiveOrWrapper(type) ||\n\t\t\t\tEnum.class.isAssignableFrom(type) ||\n\t\t\t\tCharSequence.class.isAssignableFrom(type) ||\n\t\t\t\tNumber.class.isAssignableFrom(type) ||\n\t\t\t\tDate.class.isAssignableFrom(type) ||\n\t\t\t\tTemporal.class.isAssignableFrom(type) ||\n\t\t\t\tURI.class &#x3D;&#x3D; type ||\n\t\t\t\tURL.class &#x3D;&#x3D; type ||\n\t\t\t\tLocale.class &#x3D;&#x3D; type ||\n\t\t\t\tClass.class &#x3D;&#x3D; type));\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n@Nullable\npublic final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception &#123;\n\n\t\tAssert.state(mavContainer !&#x3D; null, &quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;);\n\t\tAssert.state(binderFactory !&#x3D; null, &quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;);\n\n\t\tString name &#x3D; ModelFactory.getNameForParameter(parameter);\n\t\tModelAttribute ann &#x3D; parameter.getParameterAnnotation(ModelAttribute.class);\n\t\tif (ann !&#x3D; null) &#123;\n\t\t\tmavContainer.setBinding(name, ann.binding());\n\t\t&#125;\n\n\t\tObject attribute &#x3D; null;\n\t\tBindingResult bindingResult &#x3D; null;\n\n\t\tif (mavContainer.containsAttribute(name)) &#123;\n\t\t\tattribute &#x3D; mavContainer.getModel().get(name);\n\t\t&#125;\n\t\telse &#123;\n\t\t\t&#x2F;&#x2F; Create attribute instance\n\t\t\ttry &#123;\n\t\t\t\tattribute &#x3D; createAttribute(name, parameter, binderFactory, webRequest);\n\t\t\t&#125;\n\t\t\tcatch (BindException ex) &#123;\n\t\t\t\tif (isBindExceptionRequired(parameter)) &#123;\n\t\t\t\t\t&#x2F;&#x2F; No BindingResult parameter -&gt; fail with BindException\n\t\t\t\t\tthrow ex;\n\t\t\t\t&#125;\n\t\t\t\t&#x2F;&#x2F; Otherwise, expose null&#x2F;empty value and associated BindingResult\n\t\t\t\tif (parameter.getParameterType() &#x3D;&#x3D; Optional.class) &#123;\n\t\t\t\t\tattribute &#x3D; Optional.empty();\n\t\t\t\t&#125;\n\t\t\t\tbindingResult &#x3D; ex.getBindingResult();\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tif (bindingResult &#x3D;&#x3D; null) &#123;\n\t\t\t&#x2F;&#x2F; Bean property binding and validation;\n\t\t\t&#x2F;&#x2F; skipped in case of binding failure on construction.\n\t\t\tWebDataBinder binder &#x3D; binderFactory.createBinder(webRequest, attribute, name);\n\t\t\tif (binder.getTarget() !&#x3D; null) &#123;\n\t\t\t\tif (!mavContainer.isBindingDisabled(name)) &#123;\n\t\t\t\t\tbindRequestParameters(binder, webRequest);\n\t\t\t\t&#125;\n\t\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\t\tif (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;\n\t\t\t\t\tthrow new BindException(binder.getBindingResult());\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\t&#x2F;&#x2F; Value type adaptation, also covering java.util.Optional\n\t\t\tif (!parameter.getParameterType().isInstance(attribute)) &#123;\n\t\t\t\tattribute &#x3D; binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);\n\t\t\t&#125;\n\t\t\tbindingResult &#x3D; binder.getBindingResult();\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; Add resolved attribute and BindingResult at the end of the model\n\t\tMap&lt;String, Object&gt; bindingResultModel &#x3D; bindingResult.getModel();\n\t\tmavContainer.removeAttributes(bindingResultModel);\n\t\tmavContainer.addAllAttributes(bindingResultModel);\n\n\t\treturn attribute;\n&#125;</code></pre>\n\n<ul>\n<li><strong>WebDataBinder binder &#x3D; binderFactory.createBinder(webRequest, attribute, name);</strong></li>\n<li><strong>WebDataBinder：Web 数据绑定器，将请求参数的值绑定到指定的 JavaBean 里面</strong></li>\n<li><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到 JavaBean 中</strong></li>\n</ul>\n<p><strong>GenericConversionService：在设置每一个值的时候，找它里面的所有 converter 哪个可以将这个数据类型（request 带来参数的字符串）转换到指定的类型（JavaBean – Integer）</strong><br>byte – &gt; file</p>\n<p><strong><code>@FunctionalInterfacepublic interface Converter&lt;S, T&gt;</code></strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195826.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195839.png\"></p>\n<p><strong>可以给 WebDataBinder 里面自定义 Converter</strong>。<code>private static final class StringToNumber&lt;T extends Number&gt; implements Converter&lt;String, T&gt;</code></p>\n<p>自定义 Converter</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 1、WebMvcConfigurer定制化SpringMVC的功能\n@Bean\npublic WebMvcConfigurer webMvcConfigurer()&#123;\n        return new WebMvcConfigurer() &#123;\n            @Override\n            public void configurePathMatch(PathMatchConfigurer configurer) &#123;\n                UrlPathHelper urlPathHelper &#x3D; new UrlPathHelper();\n                &#x2F;&#x2F; 不移除；后面的内容。矩阵变量功能就可以生效\n                urlPathHelper.setRemoveSemicolonContent(false);\n                configurer.setUrlPathHelper(urlPathHelper);\n            &#125;\n\n            @Override\n            public void addFormatters(FormatterRegistry registry) &#123;\n                registry.addConverter(new Converter&lt;String, Pet&gt;() &#123;\n\n                    @Override\n                    public Pet convert(String source) &#123;\n                        &#x2F;&#x2F; 啊猫,3\n                        if(!StringUtils.isEmpty(source))&#123;\n                            Pet pet &#x3D; new Pet();\n                            String[] split &#x3D; source.split(&quot;,&quot;);\n                            pet.setName(split[0]);\n                            pet.setAge(Integer.parseInt(split[1]));\n                            return pet;\n                        &#125;\n                        return null;\n                    &#125;\n                &#125;);\n            &#125;\n        &#125;;\n&#125;</code></pre>\n\n<h3 id=\"5-6-6-目标方法执行完成\"><a href=\"#5-6-6-目标方法执行完成\" class=\"headerlink\" title=\"5.6.6 目标方法执行完成\"></a>5.6.6 目标方法执行完成</h3><p><strong>将所有的数据都放在 ModelAndViewContainer；包含要去的页面地址 View。还包含 Model 数据</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195853.png\"></p>\n<h3 id=\"5-6-7-处理派发结果\"><a href=\"#5-6-7-处理派发结果\" class=\"headerlink\" title=\"5.6.7 处理派发结果\"></a>5.6.7 处理派发结果</h3><p><strong><code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</code></strong></p>\n<p><strong><code>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">InternalResourceView：\n@Override\nprotected void renderMergedOutputModel(\n\t\t\tMap&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n\n\t\t&#x2F;&#x2F; Expose the model object as request attributes.\n\t\texposeModelAsRequestAttributes(model, request);\n\n\t\t&#x2F;&#x2F; Expose helpers as request attributes, if any.\n\t\texposeHelpers(request);\n\n\t\t&#x2F;&#x2F; Determine the path for the request dispatcher.\n\t\tString dispatcherPath &#x3D; prepareForRendering(request, response);\n\n\t\t&#x2F;&#x2F; Obtain a RequestDispatcher for the target resource (typically a JSP).\n\t\tRequestDispatcher rd &#x3D; getRequestDispatcher(request, dispatcherPath);\n\t\tif (rd &#x3D;&#x3D; null) &#123;\n\t\t\tthrow new ServletException(&quot;Could not get RequestDispatcher for [&quot; + getUrl() +\n\t\t\t\t\t&quot;]: Check that the corresponding file exists within your web application archive!&quot;);\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; If already included or response already committed, perform include, else forward.\n\t\tif (useInclude(request, response)) &#123;\n\t\t\tresponse.setContentType(getContentType());\n\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\tlogger.debug(&quot;Including [&quot; + getUrl() + &quot;]&quot;);\n\t\t\t&#125;\n\t\t\trd.include(request, response);\n\t\t&#125;\n\n\t\telse &#123;\n\t\t\t&#x2F;&#x2F; Note: The forwarded resource is supposed to determine the content type itself.\n\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\tlogger.debug(&quot;Forwarding to [&quot; + getUrl() + &quot;]&quot;);\n\t\t\t&#125;\n\t\t\trd.forward(request, response);\n\t\t&#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">暴露模型作为请求域属性\n&#x2F;&#x2F; Expose the model object as request attributes.\nexposeModelAsRequestAttributes(model, request);</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void exposeModelAsRequestAttributes(Map&lt;String, Object&gt; model,\n\t\t\tHttpServletRequest request) throws Exception &#123;\n\n    &#x2F;&#x2F;model中的所有数据遍历挨个放在请求域中\n\t\tmodel.forEach((name, value) -&gt; &#123;\n\t\t\tif (value !&#x3D; null) &#123;\n\t\t\t\trequest.setAttribute(name, value);\n\t\t\t&#125;\n\t\t\telse &#123;\n\t\t\t\trequest.removeAttribute(name);\n\t\t\t&#125;\n\t\t&#125;);\n&#125;</code></pre>\n\n<h2 id=\"5-8-响应处理\"><a href=\"#5-8-响应处理\" class=\"headerlink\" title=\"5.8 响应处理\"></a>5.8 响应处理</h2><h3 id=\"5-8-1-响应-JSON\"><a href=\"#5-8-1-响应-JSON\" class=\"headerlink\" title=\"5.8.1 响应 JSON\"></a>5.8.1 响应 JSON</h3><p><strong>jackson.jar + @ResponseBody，给前端自动返回 JSON 数据</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\nweb 场景自动引入了 json 场景\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-json&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n    &lt;scope&gt;compile&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"5-8-1-1-返回值解析器\"><a href=\"#5-8-1-1-返回值解析器\" class=\"headerlink\" title=\"5.8.1.1 返回值解析器\"></a>5.8.1.1 返回值解析器</h4><p><img src=\"http://img.fan223.cn/2023/04/20230420195907.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try &#123;\n\tthis.returnValueHandlers.handleReturnValue(\n\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;\n\n\t\tHandlerMethodReturnValueHandler handler &#x3D; selectHandler(returnValue, returnType);\n\t\tif (handler &#x3D;&#x3D; null) &#123;\n\t\t\tthrow new IllegalArgumentException(&quot;Unknown return value type: &quot; + returnType.getParameterType().getName());\n\t\t&#125;\n\t\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">RequestResponseBodyMethodProcessor  \n@Override\npublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;\n\n\t\tmavContainer.setRequestHandled(true);\n\t\tServletServerHttpRequest inputMessage &#x3D; createInputMessage(webRequest);\n\t\tServletServerHttpResponse outputMessage &#x3D; createOutputMessage(webRequest);\n\n\t\t&#x2F;&#x2F; Try even with null return value. ResponseBodyAdvice could get involved.\n        &#x2F;&#x2F; 使用消息转换器进行写出操作\n\t\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n&#125;</code></pre>\n\n<h4 id=\"5-8-1-2-返回值解析器原理\"><a href=\"#5-8-1-2-返回值解析器原理\" class=\"headerlink\" title=\"5.8.1.2 返回值解析器原理\"></a>5.8.1.2 返回值解析器原理</h4><p><img src=\"http://img.fan223.cn/2023/04/20230420195919.png\"></p>\n<ol>\n<li>返回值处理器判断是否支持这种类型返回值 supportsReturnType</li>\n<li>返回值处理器调用 handleReturnValue 进行处理</li>\n<li>RequestResponseBodyMethodProcessor 可以处理返回值标了@ResponseBody 注解的<ul>\n<li>利用 MessageConverters 进行处理 将数据写为 JSON<ul>\n<li>内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li>\n<li>服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</li>\n<li>SpringMVC 会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理<ul>\n<li>得到 MappingJackson2HttpMessageConverter 可以将对象写为 JSON</li>\n<li>利用 MappingJackson2HttpMessageConverter 将对象转为 JSON 再写出去</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420195928.png\"></p>\n<h4 id=\"5-8-1-3-SpringMVC-支持哪些返回值\"><a href=\"#5-8-1-3-SpringMVC-支持哪些返回值\" class=\"headerlink\" title=\"5.8.1.3 SpringMVC 支持哪些返回值\"></a>5.8.1.3 SpringMVC 支持哪些返回值</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ModelAndView\nModel\nView\nResponseEntity \nResponseBodyEmitter\nStreamingResponseBody\nHttpEntity\nHttpHeaders\nCallable\nDeferredResult\nListenableFuture\nCompletionStage\nWebAsyncTask\n有 @ModelAttribute 且为对象类型的\n@ResponseBody 注解 ---&gt; RequestResponseBodyMethodProcessor；</code></pre>\n\n<h4 id=\"5-8-1-4-HTTPMessageConverter-原理\"><a href=\"#5-8-1-4-HTTPMessageConverter-原理\" class=\"headerlink\" title=\"5.8.1.4 HTTPMessageConverter 原理\"></a>5.8.1.4 HTTPMessageConverter 原理</h4><ol>\n<li><p>MessageConverter 规范<br><img src=\"http://img.fan223.cn/2023/04/20230420195941.png\"><br><strong>HttpMessageConverter：看是否支持将 此 Class 类型的对象，转为 MediaType 类型的数据</strong><br>例：Person 对象转为 JSON。或者 JSON 转为 Person</p>\n</li>\n<li><p><strong>默认的 MessageConverter</strong><br><img src=\"http://img.fan223.cn/2023/04/20230420195952.png\"><br>0 - 只支持 Byte 类型的<br>1 - String<br>2 - String<br>3 - Resource<br>4 - ResourceRegion<br>5 - DOMSource.class \\ SAXSource.class) \\ StAXSource.class \\StreamSource.class \\Source.class<br>6 - MultiValueMap<br>7 - true<br>8 - true<br><strong>9 - 支持注解方式 XML 处理的</strong><br><strong>最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的 jackson 的 objectMapper 转换的）</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200012.png\"></p>\n</li>\n</ol>\n<h3 id=\"5-8-2-内容协商\"><a href=\"#5-8-2-内容协商\" class=\"headerlink\" title=\"5.8.2 内容协商\"></a>5.8.2 内容协商</h3><ol>\n<li><strong>浏览器发送请求，在请求头中，<code>Accept</code> 传递可支持什么格式的返回内容，<code>q</code> 代表权重，优先级。<code>*/*</code> 表示所有格式都支持返回</strong><br><code>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</code></li>\n<li><strong>服务器接收到数据后，判断浏览器要什么格式的返回内容，然后自己能够提供什么的格式返回内容。最优匹配。</strong>由 Accept 参数可知：xhtml 和 xml 优先级大于其他的返回格式，这个在请求头内。我<strong>们需要某种返回格式时需要指定参数，请求参数。可以使用 format 指定传递所需要的返回格式</strong></li>\n<li><strong>开启基于请求参数的内容协商功能</strong><br><code>http://localhost:8080/test/person?format=json</code></li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n    contentnegotiation:\n      favor-parameter: true</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 引入 xml 依赖 --&gt; \n&lt;dependency&gt;\n\t&lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;jackson-dataformat-xml&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"5-8-3-内容协商原理\"><a href=\"#5-8-3-内容协商原理\" class=\"headerlink\" title=\"5.8.3 内容协商原理\"></a>5.8.3 内容协商原理</h3><ol>\n<li><p>判断当前响应头中是否已经有确定的媒体类型。MediaType</p>\n</li>\n<li><p>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端 Accept请求头字段）【application&#x2F;xml】</p>\n<ul>\n<li><p><strong>contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200027.png\"></p>\n</li>\n<li><p><strong>HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200054.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>遍历循环所有当前系统的 MessageConverter，看谁支持操作这个对象（Person）</p>\n</li>\n<li><p>找到支持操作 Person 的 converter，把 converter 支持的媒体类型统计出来</p>\n</li>\n<li><p>客户端需要【application&#x2F;xml】。服务端能力【10种、json、xml】<br><img src=\"http://img.fan223.cn/2023/04/20230420200147.png\"></p>\n</li>\n<li><p>进行内容协商的最佳匹配媒体类型</p>\n</li>\n<li><p>用支持将对象转为最佳匹配媒体类型的 converter。调用它进行转化</p>\n</li>\n</ol>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200158.png\"></p>\n<p><strong>导入了 jackson 处理 xml 的包，xml 的 converter 就会自动进来</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">WebMvcConfigurationSupport\njackson2XmlPresent &#x3D; ClassUtils.isPresent(&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;, classLoader);\n\nif (jackson2XmlPresent) &#123;\n\t\t\tJackson2ObjectMapperBuilder builder &#x3D; Jackson2ObjectMapperBuilder.xml();\n\t\t\tif (this.applicationContext !&#x3D; null) &#123;\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t&#125;\n\t\t\tmessageConverters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));\n&#125;</code></pre>\n\n<h3 id=\"5-8-4-自定义数据格式\"><a href=\"#5-8-4-自定义数据格式\" class=\"headerlink\" title=\"5.8.4 自定义数据格式\"></a>5.8.4 自定义数据格式</h3><h4 id=\"5-8-4-1-先定义一个-Converter，设置自定义格式\"><a href=\"#5-8-4-1-先定义一个-Converter，设置自定义格式\" class=\"headerlink\" title=\"5.8.4.1 先定义一个 Converter，设置自定义格式\"></a>5.8.4.1 先定义一个 Converter，设置自定义格式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class XMessageConverter implements HttpMessageConverter&lt;Person&gt; &#123;  &#x2F;&#x2F; 返回Person格式\n    @Override\n    public boolean canRead(Class aClass, MediaType mediaType) &#123;\n        return false;\n    &#125;\n\n    @Override\n    public boolean canWrite(Class aClass, MediaType mediaType) &#123;  &#x2F;&#x2F; 返回\n        return aClass.isAssignableFrom(Person.class);\n    &#125;\n\n    @Override\n    public List&lt;MediaType&gt; getSupportedMediaTypes() &#123;\n        return MediaType.parseMediaTypes(&quot;application&#x2F;x&quot;);   &#x2F;&#x2F; 设置支持为x格式 即 ?format&#x3D;x\n    &#125;\n\n    @Override\n    public Person read(Class&lt;? extends Person&gt; aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException &#123;\n        return null;\n    &#125;\n\n    @Override\n    public void write(Person person, MediaType mediaType, HttpOutputMessage httpOutputMessage) throws IOException, HttpMessageNotWritableException &#123;\n        String data &#x3D; person.getUsername() + &quot;;&quot; + person.getAge();\n        OutputStream body &#x3D; httpOutputMessage.getBody();\n        body.write(data.getBytes());                           &#x2F;&#x2F; 定义返回数据\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"5-8-4-2-在配置类的-WebMvcConfigurer-中配置一个额外的MessageConverters\"><a href=\"#5-8-4-2-在配置类的-WebMvcConfigurer-中配置一个额外的MessageConverters\" class=\"headerlink\" title=\"5.8.4.2 在配置类的 WebMvcConfigurer 中配置一个额外的MessageConverters\"></a>5.8.4.2 在配置类的 WebMvcConfigurer 中配置一个额外的MessageConverters</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyConfig &#123;\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer()&#123;\n        return new WebMvcConfigurer() &#123;\n            @Override\n            public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;\n                converters.add(new XMessageConverter());\n            &#125;\n        &#125;;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"5-8-4-3-设置请求参数策略\"><a href=\"#5-8-4-3-设置请求参数策略\" class=\"headerlink\" title=\"5.8.4.3 设置请求参数策略\"></a>5.8.4.3 设置请求参数策略</h4><p><strong>将可传递的格式添加进 Map 集合里，添加了 json、xml 和自定义 x 格式，请求参数 json、xml和 x 格式则可正常返回。此时设置的是基于参数的策略 ParameterContentNegotiationStrategy</strong><br><strong><code>http://localhost:8080/test/person?format=x</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyConfig &#123;\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer()&#123;\n        return new WebMvcConfigurer() &#123;\n            @Override\n            public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;\n                converters.add(new XMessageConverter());\n            &#125;\n  \n            @Override\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123;\n                Map&lt;String, MediaType&gt; mediaTypes &#x3D; new HashMap&lt;&gt;();\n                mediaTypes.put(&quot;json&quot;,MediaType.APPLICATION_JSON);\n                mediaTypes.put(&quot;xml&quot;,MediaType.APPLICATION_XML);\n                mediaTypes.put(&quot;x&quot;,MediaType.parseMediaType(&quot;application&#x2F;x&quot;));\n\n                ParameterContentNegotiationStrategy strategy &#x3D; new ParameterContentNegotiationStrategy(mediaTypes);\n                configurer.strategies(Arrays.asList(strategy));\n            &#125;\n        &#125;;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"5-8-4-4-添加请求头策略\"><a href=\"#5-8-4-4-添加请求头策略\" class=\"headerlink\" title=\"5.8.4.4 添加请求头策略\"></a>5.8.4.4 添加请求头策略</h4><p><strong>由于没有添加基于请求头的策略，这样设置会覆盖请求头策略，请求头的返回格式会失效。此时直接请求，不加 format 设置请求参数，无论请求头是什么返回格式都为添加进 Map 集合的第一个元素格式，即为 json 格式。优先级。假如想要请求头生效，需要再加一个基于请求头的策略</strong></p>\n<p><strong>HeaderContentNegotiationStrategy。同样的，还可以添加更多的策略</strong></p>\n<p><strong><code>http://localhost:8080/test/person</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyConfig &#123;\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer()&#123;\n        return new WebMvcConfigurer() &#123;\n            @Override\n            public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;\n                converters.add(new XMessageConverter());\n            &#125;\n  \n            @Override\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123;\n                Map&lt;String, MediaType&gt; mediaTypes &#x3D; new HashMap&lt;&gt;();\n                mediaTypes.put(&quot;json&quot;,MediaType.APPLICATION_JSON);\n                mediaTypes.put(&quot;xml&quot;,MediaType.APPLICATION_XML);\n                mediaTypes.put(&quot;x&quot;,MediaType.parseMediaType(&quot;application&#x2F;x&quot;));\n\n                ParameterContentNegotiationStrategy strategy &#x3D; new ParameterContentNegotiationStrategy(mediaTypes);\n                HeaderContentNegotiationStrategy headerStrategy &#x3D; new HeaderContentNegotiationStrategy();\n                configurer.strategies(Arrays.asList(strategy,headerStrategy));\n            &#125;\n        &#125;;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"6-Thymeleaf-模板引擎\"><a href=\"#6-Thymeleaf-模板引擎\" class=\"headerlink\" title=\"6. Thymeleaf 模板引擎\"></a>6. Thymeleaf 模板引擎</h1><p><strong><a href=\"https://www.thymeleaf.org/documentation.html\">https://www.thymeleaf.org/documentation.html</a></strong></p>\n<h2 id=\"6-1-引入\"><a href=\"#6-1-引入\" class=\"headerlink\" title=\"6.1 引入\"></a>6.1 引入</h2><h3 id=\"6-1-1-引入-Starter\"><a href=\"#6-1-1-引入-Starter\" class=\"headerlink\" title=\"6.1.1 引入 Starter\"></a>6.1.1 引入 Starter</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"6-1-2-已自动配置\"><a href=\"#6-1-2-已自动配置\" class=\"headerlink\" title=\"6.1.2 已自动配置\"></a>6.1.2 已自动配置</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static final String DEFAULT_PREFIX &#x3D; &quot;classpath:&#x2F;templates&#x2F;&quot;;\n\npublic static final String DEFAULT_SUFFIX &#x3D; &quot;.html&quot;;   &#x2F;&#x2F;xxx.html</code></pre>\n\n<h3 id=\"6-1-3-在-HTML-页面引入-Thymeleaf\"><a href=\"#6-1-3-在-HTML-页面引入-Thymeleaf\" class=\"headerlink\" title=\"6.1.3 在 HTML 页面引入 Thymeleaf\"></a>6.1.3 在 HTML 页面引入 Thymeleaf</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt; &lt;&#x2F;head&gt;\n&lt;body&gt; &lt;&#x2F;body&gt;</code></pre>\n\n<h2 id=\"6-2-使用语法\"><a href=\"#6-2-使用语法\" class=\"headerlink\" title=\"6.2 使用语法\"></a>6.2 使用语法</h2><h3 id=\"6-2-1-条件运算\"><a href=\"#6-2-1-条件运算\" class=\"headerlink\" title=\"6.2.1 条件运算\"></a>6.2.1 条件运算</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;a href&#x3D;&quot;comments.html&quot;\nth:href&#x3D;&quot;@&#123;&#x2F;product&#x2F;comments(prodId&#x3D;$&#123;prod.id&#125;)&#125;&quot;\nth:if&#x3D;&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;&gt;view&lt;&#x2F;a&gt; </code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div th:switch&#x3D;&quot;$&#123;user.role&#125;&quot;&gt;\n  &lt;p th:case&#x3D;&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;&#x2F;p&gt;\n  &lt;p th:case&#x3D;&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;&#x2F;p&gt;\n  &lt;p th:case&#x3D;&quot;*&quot;&gt;User is some other thing&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"6-2-2-迭代\"><a href=\"#6-2-2-迭代\" class=\"headerlink\" title=\"6.2.2 迭代\"></a>6.2.2 迭代</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;tr th:each&#x3D;&quot;prod,status : $&#123;prods&#125;&quot;&gt;\n  \t\t\t&lt;td th:text&#x3D;&quot;$&#123;status.count&#125;&quot;&gt;id&lt;&#x2F;td&gt;   &#x2F;&#x2F; 计数\n        &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;name&lt;&#x2F;td&gt;\n        &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;price&lt;&#x2F;td&gt;\n        &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;isStock&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n\n<h3 id=\"6-2-3-链接\"><a href=\"#6-2-3-链接\" class=\"headerlink\" title=\"6.2.3 链接 @\"></a>6.2.3 链接 @</h3><p><strong>前面加 &#x2F; ，会自动将访问路径添加进来，只需要写后面的资源路径就行</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;a th:href&#x3D;&quot;@&#123;&#x2F;xxx&#125;&quot;&gt; &lt;&#x2F;a&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;xxx&#125;&quot;&gt; &lt;&#x2F;form&gt;</code></pre>\n\n<p><strong>携带参数在路径后面加上括号，如：<code>@&#123;/xxx(id = xxx)&#125;</code></strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;a th:href&#x3D;&quot;@&#123;&#x2F;xxx(id &#x3D; $&#123;user.id&#125;)&#125;&quot;&gt; &lt;&#x2F;a&gt;</code></pre>\n\n<h1 id=\"7-拦截器\"><a href=\"#7-拦截器\" class=\"headerlink\" title=\"7. 拦截器\"></a>7. 拦截器</h1><h2 id=\"7-1-创建拦截器，实现-HandlerInter-接口\"><a href=\"#7-1-创建拦截器，实现-HandlerInter-接口\" class=\"headerlink\" title=\"7.1 创建拦截器，实现 HandlerInter 接口\"></a>7.1 创建拦截器，实现 HandlerInter 接口</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class LoginInterceptor implements HandlerInterceptor &#123;\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        &#x2F;&#x2F;登录检查逻辑\n        HttpSession session &#x3D; request.getSession();\n        Object loginUser &#x3D; session.getAttribute(&quot;loginUser&quot;);\n        if(loginUser !&#x3D; null)&#123;\n            return true;\n        &#125;\n        &#x2F;&#x2F;拦截住。未登录。跳转到登录页\n        request.setAttribute(&quot;msg&quot;,&quot;请先登录&quot;);\n&#x2F;&#x2F;        re.sendRedirect(&quot;&#x2F;&quot;);\n        request.getRequestDispatcher(&quot;&#x2F;&quot;).forward(request,response);\n        return false;\n    &#125;\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n    &#125;\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"7-2-配置拦截器\"><a href=\"#7-2-配置拦截器\" class=\"headerlink\" title=\"7.2 配置拦截器\"></a>7.2 配置拦截器</h2><p><strong>同样的在 WebMvcConfigurer 里进行拦截器配置</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class AdminWebConfig implements WebMvcConfigurer &#123;\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LoginInterceptor())\n                .addPathPatterns(&quot;&#x2F;**&quot;)  &#x2F;&#x2F; 所有请求都被拦截包括静态资源\n\t\t \t\t.excludePathPatterns(&quot;&#x2F;&quot;,&quot;&#x2F;login&quot;,&quot;&#x2F;css&#x2F;**&quot;,&quot;&#x2F;fonts&#x2F;**&quot;,&quot;&#x2F;images&#x2F;**&quot;,&quot;&#x2F;js&#x2F;**&quot;); &#x2F;&#x2F; 放行的请求\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"7-3-过滤器-Filter-和拦截器-Inteceptor-详解及使用场景\"><a href=\"#7-3-过滤器-Filter-和拦截器-Inteceptor-详解及使用场景\" class=\"headerlink\" title=\"7.3 过滤器 Filter 和拦截器 Inteceptor 详解及使用场景\"></a>7.3 过滤器 Filter 和拦截器 Inteceptor 详解及使用场景</h2><h3 id=\"7-3-1-过滤器和拦截器的区别\"><a href=\"#7-3-1-过滤器和拦截器的区别\" class=\"headerlink\" title=\"7.3.1 过滤器和拦截器的区别\"></a>7.3.1 过滤器和拦截器的区别</h3><p><img src=\"http://img.fan223.cn/2023/04/20230420200234.png\"></p>\n<ol>\n<li><strong>过滤器和拦截器触发时机不一样，过滤器是在请求进入容器后，但请求进入 Servlet 之前进行预处理的。</strong> 请求结束返回也是，是在 Servlet 处理完后，返回给前端之前</li>\n<li><strong>拦截器可以获取 IOC 容器中的各个 bean，而过滤器就不行，因为拦截器是 Spring 提供并管理的</strong>，Spring 的功能可以被拦截器使用，在拦截器里注入一个Service，可以调用业务逻辑。而过滤器是 JavaEE 标准，只需依赖 Servlet API，不需要依赖 Spring</li>\n<li><strong>过滤器的实现基于回调函数。而拦截器（代理模式）的实现基于反射</strong></li>\n<li>Filter 是依赖于Servlet 容器，属于 Servlet 规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用</li>\n<li>Filter 的执行由 Servlet 容器回调完成，而拦截器通常通过动态代理（反射）的方式来执行</li>\n<li><strong>Filter 的生命周期由 Servlet 容器管理，而拦截器则可以通过 IOC 容器来管理</strong>，因此可以通过注入等方式来获取其他 Bean 的实例，因此使用会更方便</li>\n</ol>\n<p><strong>过滤器和拦截器非常相似，但是它们有很大的区别</strong></p>\n<ul>\n<li>最简单明了的区别就是过滤器可以修改 request，而拦截器不能</li>\n<li>过滤器需要在 Servlet 容器中实现，拦截器可以适用于 JavaEE，JavaSE 等各种环境</li>\n<li>拦截器可以调用 IOC 容器中的各种依赖，而过滤器不能</li>\n<li>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200245.png\"></p>\n<ul>\n<li><p><strong>过滤器（Filter） ：可以拿到原始的http请求，但是拿不到你请求的控制器和请求控制器中的方法的信息</strong></p>\n</li>\n<li><p><strong>拦截器（Interceptor）：可以拿到你请求的控制器和方法，却拿不到请求方法的参数</strong></p>\n</li>\n<li><p><strong>切片（Aspect）: 可以拿到方法的参数，但是却拿不到 HTTP 请求和响应的对象</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200255.png\"></p>\n</li>\n</ul>\n<h3 id=\"7-3-2-应用场景\"><a href=\"#7-3-2-应用场景\" class=\"headerlink\" title=\"7.3.2 应用场景\"></a>7.3.2 应用场景</h3><p><strong>拦截器是在 DispatcherServlet 这个 Servlet 中执行的，因此所有的请求最先进入 Filter，最后离开 Filter。其顺序如下：</strong><br><strong><code>Filter -&gt; Interceptor.preHandle -&gt; Handler -&gt; Interceptor.postHandle -&gt; Interceptor.afterCompletion -&gt; Filter</code></strong></p>\n<h4 id=\"拦截器应用场景\"><a href=\"#拦截器应用场景\" class=\"headerlink\" title=\"拦截器应用场景\"></a>拦截器应用场景</h4><p><strong>拦截器本质上是面向切面编程（AOP），符合横切关注点的功能都可以放在拦截器中来实现，</strong> 主要的应用场景包括：</p>\n<ul>\n<li>登录验证，判断用户是否登录。</li>\n<li>权限验证，判断用户是否有权限访问资源，如校验token</li>\n<li>日志记录，记录请求操作日志（用户ip，访问时间等），以便统计请求访问量。</li>\n<li>处理cookie、本地化、国际化、主题等。</li>\n<li>性能监控，监控请求处理时长等。</li>\n<li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个处理器都需要的即可使用拦截器实现）</li>\n</ul>\n<h4 id=\"过滤器应用场景\"><a href=\"#过滤器应用场景\" class=\"headerlink\" title=\"过滤器应用场景\"></a>过滤器应用场景</h4><ul>\n<li>过滤敏感词汇（防止sql注入）</li>\n<li>设置字符编码</li>\n<li>URL级别的权限访问控制</li>\n<li>压缩响应信息</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200311.png\"></p>\n<h1 id=\"8-文件上传\"><a href=\"#8-文件上传\" class=\"headerlink\" title=\"8. 文件上传\"></a>8. 文件上传</h1><h2 id=\"8-1-HTML-页面\"><a href=\"#8-1-HTML-页面\" class=\"headerlink\" title=\"8.1 HTML 页面\"></a>8.1 HTML 页面</h2><p><strong>设置 type 为 file，多文件上传需要设置 multiple 属性，表单提交方式需要为 post ，并且需要加 enctype 属性</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;upload&#125;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n  &lt;div class&#x3D;&quot;form-group&quot;&gt;\n\t\t&lt;label for&#x3D;&quot;exampleInputFile&quot;&gt;单文件上传&lt;&#x2F;label&gt;\n\t\t&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;headerImg&quot; id&#x3D;&quot;exampleInputFile&quot;&gt;\n\t\t&lt;p class&#x3D;&quot;help-block&quot;&gt;Example block-level help text here.&lt;&#x2F;p&gt;\n\t&lt;&#x2F;div&gt;\n\t&lt;div class&#x3D;&quot;form-group&quot;&gt;\n\t\t&lt;label for&#x3D;&quot;exampleInputFile&quot;&gt;多文件上传&lt;&#x2F;label&gt;\n\t\t&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;photos&quot; multiple&gt;\n\t\t&lt;p class&#x3D;&quot;help-block&quot;&gt;Example block-level help text here.&lt;&#x2F;p&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<h2 id=\"8-2-设置文件大小限制\"><a href=\"#8-2-设置文件大小限制\" class=\"headerlink\" title=\"8.2 设置文件大小限制\"></a>8.2 设置文件大小限制</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  servlet:\n    multipart:\n      max-file-size: 10MB       &#x2F;&#x2F; 单个文件的最大大小\n      max-request-size: 50MB    &#x2F;&#x2F; 请求的总文件最大大小</code></pre>\n\n<h2 id=\"8-3-Controller-类\"><a href=\"#8-3-Controller-类\" class=\"headerlink\" title=\"8.3 Controller 类\"></a>8.3 Controller 类</h2><p><strong>使用 @RequestPart 接收文件，使用 transferTo 写出文件</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class FormTestController &#123;\n    @PostMapping(&quot;&#x2F;upload&quot;)\n    public String upload(@RequestParam(&quot;email&quot;) String email,  &#x2F;&#x2F; 参数值\n                         @RequestPart(&quot;headerImg&quot;) MultipartFile headerImg, &#x2F;&#x2F; 文件上传接收\n                         @RequestPart(&quot;photos&quot;) MultipartFile[] photos)&#123; &#x2F;&#x2F; 多文件则数组接收\n        if (!headerImg.isEmpty())&#123;\n            String originalFilename &#x3D; headerImg.getOriginalFilename();  &#x2F;&#x2F; 获取文件原始名\n            try &#123;\n                headerImg.transferTo(new File(&quot;E:\\\\&quot; + originalFilename)); &#x2F;&#x2F; 服务器创建文件\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n        if (photos.length &gt; 0)&#123;\n            for (MultipartFile photo : photos) &#123;\n                String originalFilename &#x3D; photo.getOriginalFilename();\n                try &#123;\n                    photo.transferTo(new File(&quot;E:\\\\&quot; + originalFilename));\n                &#125; catch (IOException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        &#125;\n        return &quot;main&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"9-异常处理\"><a href=\"#9-异常处理\" class=\"headerlink\" title=\"9. 异常处理\"></a>9. 异常处理</h1><p>默认规则</p>\n<ul>\n<li>默认情况下，Spring Boot 提供 &#x2F;error 处理所有错误的映射</li>\n<li>对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP 状态和异常消息的详细信息。对于浏览器客户端，响应一个 “whitelabel” 错误视图，以 HTML 格式呈现相同的数据<br><img src=\"http://img.fan223.cn/2023/04/20230420200325.png\"></li>\n<li><strong>要对其进行自定义，添加 View 解析为 error</strong></li>\n<li>要完全替换默认行为，可以实现 ErrorController 并注册该类型的 Bean 定义，或添加 ErrorAttributes 类型的组件以使用现有机制但替换其内容</li>\n<li>error&#x2F; 下的 4xx，5xx 页面会被自动解析</li>\n</ul>\n<h2 id=\"9-1-自定义异常页面\"><a href=\"#9-1-自定义异常页面\" class=\"headerlink\" title=\"9.1 自定义异常页面\"></a>9.1 自定义异常页面</h2><ul>\n<li>自定义错误页<br><strong>error&#x2F;404.html、error&#x2F;5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</strong></li>\n<li><strong>@ControllerAdvice + @ExceptionHandler 处理全局异常</strong>；底层是 <code>ExceptionHandlerExceptionResolver</code> 支持的</li>\n<li><strong>@ResponseStatus + 自定义异常</strong> ；底层是 <code>ResponseStatusExceptionResolver</code> ，把 @ResponseStatus 注解的信息底层调用 <code>response.sendError(statusCode, resolvedReason);</code>Tomcat 发送的 &#x2F;error</li>\n<li><strong>Spring 底层的异常，如 参数类型转换异常；<code>DefaultHandlerExceptionResolver</code> 处理框架底层的异常</strong><br><code>response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage());</code></li>\n</ul>\n<p><strong>可以通过以下 3 种方式定制 Spring Boot 错误页面：</strong></p>\n<ul>\n<li>自定义 error.html</li>\n<li>自定义动态错误页面</li>\n<li>自定义静态错误页面</li>\n</ul>\n<h2 id=\"9-2-界面优先级\"><a href=\"#9-2-界面优先级\" class=\"headerlink\" title=\"9.2 界面优先级\"></a>9.2 界面优先级</h2><p><strong>在 templates 文件夹或静态资源文件夹下，创建一个 error 文件夹，存放错误界面，会自动解析，跳转到自定义的错误界面</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200341.png\"></p>\n<p><strong>可以直接在模板引擎文件夹（<code>/resources/templates</code>）下创建 error.html ，覆盖 Spring Boot 默认的错误视图页面（Whitelabel Error Page）</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200356.png\"></p>\n<p><strong>上述 5 种方式均可以定制 Spring Boot 错误页面，且它们的优先级顺序为：</strong></p>\n<ol>\n<li><strong>自定义动态错误页面目录（精确匹配404.html）</strong></li>\n<li><strong>自定义静态错误页面目录（精确匹配404.html）</strong></li>\n<li><strong>自定义动态错误页面目录（模糊匹配4xx.html）</strong></li>\n<li><strong>自定义静态错误页面目录（模糊匹配404.html）</strong></li>\n<li><strong>自定义 error.html</strong></li>\n</ol>\n<h2 id=\"9-3-页面错误信息\"><a href=\"#9-3-页面错误信息\" class=\"headerlink\" title=\"9.3 页面错误信息\"></a>9.3 页面错误信息</h2><ol>\n<li><strong>message：异常信息</strong></li>\n<li><strong>status：状态码</strong></li>\n<li>error：错误名称</li>\n<li>path：错误路径</li>\n<li>timestamp：时间戳</li>\n</ol>\n<h2 id=\"9-4-自定义全局异常处理\"><a href=\"#9-4-自定义全局异常处理\" class=\"headerlink\" title=\"9.4 自定义全局异常处理\"></a>9.4 自定义全局异常处理</h2><p><strong>创建一个全局异常处理类，加上 @ControllerAdvice 注解，增强。同时加上 @ExceptionHandler 注解。会跳转到返回的页面，返回异常属性要放入请求域中</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int num &#x3D; 1&#x2F;0;  &#x2F;&#x2F; 空指针\n\n&#x2F;&#x2F; 处理整个web controller 的异常\n@ControllerAdvice\npublic class GlobalExceptionHandler &#123;\n    @ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;) &#x2F;&#x2F; 处理全局异常\n    public String handleArithExcepyion()&#123;\n        return &quot;login&quot;; &#x2F;&#x2F; 视图地址\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"9-5-自定义异常类\"><a href=\"#9-5-自定义异常类\" class=\"headerlink\" title=\"9.5 自定义异常类\"></a>9.5 自定义异常类</h2><p><strong>加上 @ResponseStatus 注解，继承 RuntimeException ，运行时异常。手动抛出异常</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (list.size() &gt; 3)&#123;   &#x2F;&#x2F; 越界\n\tthrow new UserTooManyException();\n&#125;\n\n@ResponseStatus(value &#x3D; HttpStatus.FORBIDDEN,reason &#x3D; &quot;用户数量太多&quot;)\npublic class UserTooManyException extends RuntimeException&#123;    &#x2F;&#x2F; 越界异常\n    public UserTooManyException()&#123;\n    &#125;\n    public UserTooManyException(String message)&#123;\n        super(message);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>会跳转到 &#x2F;error 目录下的异常页面，然后输出异常信息</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;h1 th:text&#x3D;&quot;$&#123;message&#125;&quot;&gt;&lt;&#x2F;h1&gt;\n&lt;h1 th:text&#x3D;&quot;$&#123;error&#125;&quot;&gt;&lt;&#x2F;h1&gt;\n&lt;h1 th:text&#x3D;&quot;$&#123;status&#125;&quot;&gt;&lt;&#x2F;h1&gt;</code></pre>\n\n<h2 id=\"9-6-自定义异常解析器\"><a href=\"#9-6-自定义异常解析器\" class=\"headerlink\" title=\"9.6 自定义异常解析器\"></a>9.6 自定义异常解析器</h2><p><strong>设置最高优先级后，所有的异常全部都会被自定义的异常解析器解析，所有的异常都会变成自定义异常解析器的异常。相当于全局异常处理规则。上面定义的所有异常都失效，全成为自定义异常解析器定义的异常。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Order(value &#x3D; Ordered.HIGHEST_PRECEDENCE)  &#x2F;&#x2F; 设置最高优先级\n@Component\npublic class CustomerHandleException implements HandlerExceptionResolver &#123;\n    @Override\n    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,\n                                         Object handler, Exception ex) &#123;\n        try &#123;\n            response.sendError(511,&quot;自定义错误&quot;);\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125;\n        return new ModelAndView();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"9-7-定制错误数据\"><a href=\"#9-7-定制错误数据\" class=\"headerlink\" title=\"9.7 定制错误数据\"></a>9.7 定制错误数据</h2><p><strong>自定义错误属性处理工具</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class MyErrorAttributes extends DefaultErrorAttributes &#123;\n    @Override\n    public Map&lt;String, Object&gt; getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) &#123;\n        Map&lt;String, Object&gt; errorAttributes &#x3D; super.getErrorAttributes(webRequest, options);\n        &#x2F;&#x2F; 添加自定义的错误数据\n        errorAttributes.put(&quot;company&quot;, &quot;www.biancheng.net&quot;);\n        &#x2F;&#x2F; 获取 MyExceptionHandler 传入 request 域中的错误数据\n        Map ext &#x3D; (Map) webRequest.getAttribute(&quot;ext&quot;, 0);\n        errorAttributes.put(&quot;ext&quot;, ext);\n        return errorAttributes;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"10-Web-原生组件注入\"><a href=\"#10-Web-原生组件注入\" class=\"headerlink\" title=\"10. Web 原生组件注入\"></a>10. Web 原生组件注入</h1><h2 id=\"10-1-原生-API\"><a href=\"#10-1-原生-API\" class=\"headerlink\" title=\"10.1 原生 API\"></a>10.1 原生 API</h2><h3 id=\"10-1-1-Servlet\"><a href=\"#10-1-1-Servlet\" class=\"headerlink\" title=\"10.1.1 Servlet\"></a>10.1.1 Servlet</h3><p><strong>创建 Servlet ，在启动类加上 @ServletComponentScan 注解，配置包扫描</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ServletComponentScan(basePackages &#x3D; &quot;fan&quot;)\n@SpringBootApplication\npublic class AdminmanagerApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(AdminmanagerApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>直接访问即可响应，<code>http://localhost:8081/MyServlet</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebServlet(name &#x3D; &quot;MyServlet&quot;, value &#x3D; &quot;&#x2F;MyServlet&quot;)\n&#x2F;&#x2F; @WebServlet(urlPatterns &#x3D; &quot;&#x2F;my&quot;)\npublic class MyServlet extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;\n        this.doPost(request,response);\n    &#125;\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;\n        response.getWriter().write(&quot;6666&quot;);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"10-1-2-Filter-和-Listener\"><a href=\"#10-1-2-Filter-和-Listener\" class=\"headerlink\" title=\"10.1.2 Filter 和 Listener\"></a>10.1.2 Filter 和 Listener</h3><p><strong>直接创建原生组件即可使用</strong></p>\n<ul>\n<li><code>@ServletComponentScan(basePackages = &quot;com.atguigu.admin&quot;) </code>：指定原生Servlet组件都放在那里</li>\n<li><code>@WebServlet(urlPatterns = &quot;/my&quot;)</code>：效果：直接响应，没有经过 Spring 的拦截器</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200419.png\"></p>\n<ul>\n<li><strong><code>@WebFilter(urlPatterns=&#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</code></strong></li>\n<li><strong><code>@WebListener</code></strong></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebFilter(filterName &#x3D; &quot;MyFilter&quot;, urlPatterns &#x3D; &quot;&#x2F;images&#x2F;*&quot;)\npublic class MyFilter implements Filter &#123;\n    @Override\n    public void init(FilterConfig config) throws ServletException &#123;\n        System.out.println(&quot;MyFilter初始化完成&quot;);\n    &#125;\n    @Override\n    public void destroy() &#123;\n        System.out.println(&quot;MyFilter销毁&quot;);\n    &#125;\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException &#123;\n        System.out.println(&quot;MyFilter工作&quot;);\n        chain.doFilter(request, response);\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@WebListener\npublic class MyListener implements ServletContextListener, HttpSessionListener, HttpSessionAttributeListener &#123;\n    public MyListener() &#123;\n    &#125;\n    @Override\n    public void contextInitialized(ServletContextEvent sce) &#123;\n        &#x2F;* This method is called when the servlet context is initialized(when the Web application is deployed). *&#x2F;\n    &#125;\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) &#123;\n        &#x2F;* This method is called when the servlet Context is undeployed or Application Server shuts down. *&#x2F;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"10-2-Spring-Boot-的-RegistrationBean\"><a href=\"#10-2-Spring-Boot-的-RegistrationBean\" class=\"headerlink\" title=\"10.2 Spring Boot 的 RegistrationBean\"></a>10.2 Spring Boot 的 RegistrationBean</h2><p><strong>创建一个配置类，注入 RegistrationBean 的 Bean。不使用 @WebServlet 等注解，在 RegistrationBean 里注入</strong></p>\n<h3 id=\"10-2-1-Servlet\"><a href=\"#10-2-1-Servlet\" class=\"headerlink\" title=\"10.2.1 Servlet\"></a>10.2.1 Servlet</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyRegisterConfig &#123;\n    @Bean\n    public ServletRegistrationBean myServlet()&#123;\n        MyServlet myServlet &#x3D; new MyServlet();      &#x2F;&#x2F; 创建的Servlet\n        return new ServletRegistrationBean(myServlet,&quot;&#x2F;myServlet&quot;,&quot;&#x2F;my&quot;);  &#x2F;&#x2F; servlet多路径\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"10-2-2-Filter\"><a href=\"#10-2-2-Filter\" class=\"headerlink\" title=\"10.2.2 Filter\"></a>10.2.2 Filter</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyRegisterConfig &#123;\n     @Bean\n    public ServletRegistrationBean myServlet()&#123;\n        MyServlet myServlet &#x3D; new MyServlet();      &#x2F;&#x2F; 创建的Servlet\n        return new ServletRegistrationBean(myServlet,&quot;&#x2F;myServlet&quot;,&quot;&#x2F;my&quot;);  &#x2F;&#x2F; servlet多路径\n    &#125;\n    @Bean\n    public FilterRegistrationBean myFilter()&#123;\n        MyFilter myFilter &#x3D; new MyFilter();         &#x2F;&#x2F; 创建的Filter\n&#x2F;&#x2F;        return new FilterRegistrationBean(myFilter,myServlet());  &#x2F;&#x2F; 直接配置过滤servlet\n        FilterRegistrationBean filterRegistrationBean &#x3D; new FilterRegistrationBean(myFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(&quot;&#x2F;my&quot;,&quot;&#x2F;css&#x2F;*&quot;)); &#x2F;&#x2F; 配置自定义路径\n        return filterRegistrationBean;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"10-2-3-Listener\"><a href=\"#10-2-3-Listener\" class=\"headerlink\" title=\"10.2.3 Listener\"></a>10.2.3 Listener</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyRegisterConfig &#123;\n    @Bean\n    public ServletListenerRegistrationBean myListener()&#123;\n        MyListener myListener &#x3D; new MyListener();   &#x2F;&#x2F; 创建的Listener\n        return new ServletListenerRegistrationBean(myListener);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"10-3-切换-Web-服务器\"><a href=\"#10-3-切换-Web-服务器\" class=\"headerlink\" title=\"10.3 切换 Web 服务器\"></a>10.3 切换 Web 服务器</h2><ol>\n<li><strong>排除 Web 的 Tomcat 服务器</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n<li><strong>引入其他服务器</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n</ol>\n<h2 id=\"10-4-定制-Servlet-容器\"><a href=\"#10-4-定制-Servlet-容器\" class=\"headerlink\" title=\"10.4 定制 Servlet 容器\"></a>10.4 定制 Servlet 容器</h2><ol>\n<li>实现  <code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code><br>把配置文件的值和 ServletWebServerFactory 进行绑定<br><strong>xxxxxCustomizer：定制化器，可以改变 xxxx 的默认规则</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class CustomizationBean implements WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; &#123;\n    @Override\n    public void customize(ConfigurableServletWebServerFactory server) &#123;\n        server.setPort(9000);\n    &#125;\n\n&#125;</code></pre></li>\n<li>修改配置文件 server.xxx</li>\n<li>直接<strong>自定义 ConfigurableServletWebServerFactory</strong></li>\n</ol>\n<h2 id=\"10-5-定制化原理\"><a href=\"#10-5-定制化原理\" class=\"headerlink\" title=\"10.5 定制化原理\"></a>10.5 定制化原理</h2><ol>\n<li>修改配置文件</li>\n<li>xxxxxCustomizer</li>\n<li>编写自定义的配置类   <strong>xxxConfiguration；+ @Bean 替换</strong>、增加容器中默认组件；视图解析器</li>\n<li><strong>Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></li>\n<li><strong>@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能</strong><br><strong>原理：</strong><ol>\n<li>WebMvcAutoConfiguration  默认的 SpringMVC 的自动配置功能类。静态资源、欢迎页…..</li>\n<li>一旦使用 @EnableWebMvc 。会 @Import(DelegatingWebMvcConfiguration.class)</li>\n<li>DelegatingWebMvcConfiguration 的 作用，只保证 SpringMVC 最基本的使用<ul>\n<li>把所有系统中的 WebMvcConfigurer 拿过来。所有功能的定制都是这些 WebMvcConfigurer  合起来一起生效</li>\n<li>自动配置了一些非常底层的组件。RequestMappingHandlerMapping、这些组件依赖的组件都是从容器中获取</li>\n<li><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport</code></li>\n</ul>\n</li>\n<li>WebMvcAutoConfiguration 里面的配置要能生效 必须  <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></li>\n<li><strong>@EnableWebMvc  导致了 WebMvcAutoConfiguration  没有生效</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>场景 starter - xxxxAutoConfiguration - 导入 xxx 组件 - 绑定 xxxProperties – 绑定配置文件项</strong></p>\n<h1 id=\"11-JDBC-导入与-Druid-数据源\"><a href=\"#11-JDBC-导入与-Druid-数据源\" class=\"headerlink\" title=\"11. JDBC 导入与 Druid 数据源\"></a>11. JDBC 导入与 Druid 数据源</h1><h2 id=\"11-1-JDBC-导入\"><a href=\"#11-1-JDBC-导入\" class=\"headerlink\" title=\"11.1 JDBC 导入\"></a>11.1 JDBC 导入</h2><h3 id=\"11-1-1-导入-Starter\"><a href=\"#11-1-1-导入-Starter\" class=\"headerlink\" title=\"11.1.1 导入 Starter\"></a>11.1.1 导入 Starter</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  \t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>数据源的自动配置-HikariDataSource</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200437.png\"></p>\n<p><strong>自动配置的类：</strong></p>\n<ul>\n<li><p>DataSourceAutoConfiguration ： 数据源的自动配置</p>\n<ul>\n<li>修改数据源相关的配置：spring.datasource</li>\n<li>数据库连接池的配置，是自己容器中没有 DataSource 才自动配置的</li>\n<li>底层配置好的连接池是：HikariDataSource</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Conditional(PooledDataSourceCondition.class)\n@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)\n@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,\n\t\t\tDataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,\n\t\t\tDataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)\nprotected static class PooledDataSourceConfiguration</code></pre></li>\n<li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p>\n</li>\n<li><p>JdbcTemplateAutoConfiguration： JdbcTemplate 的自动配置，可以来对数据库进行crud</p>\n<ul>\n<li>可以修改这个配置项 <code>@ConfigurationProperties(prefix = &quot;spring.jdbc&quot;)</code> 来修改JdbcTemplate</li>\n<li>@Bean @Primary    JdbcTemplate；容器中有这个组件</li>\n</ul>\n</li>\n<li><p>JndiDataSourceAutoConfiguration： jndi 的自动配置</p>\n</li>\n<li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p>\n</li>\n</ul>\n<h3 id=\"11-1-2-导入数据库驱动\"><a href=\"#11-1-2-导入数据库驱动\" class=\"headerlink\" title=\"11.1.2 导入数据库驱动\"></a>11.1.2 导入数据库驱动</h3><p><strong>Spring Boot自带版本仲裁，因此可以不用写版本信息，目前默认版本为 8.0.26 。同时 MySQL 驱动高版本兼容低版本。即使电脑版本为 MySQL 5 也可使用 MySQL 8 的驱动。修改版本直接加版本信息即可</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t\t&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n&lt;!--\t&lt;version&gt;5.1.49&lt;&#x2F;version&gt;\t\t--&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>修改配置项，url 、username 、 password 、driver-class-name 属性</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    url: jdbc:mysql:&#x2F;&#x2F;&#x2F;xxx\n    username: root\n    password: xxx\n    driver-class-name: com.mysql.jdbc.Driver # 会自动适配高版本写法\n#    driver-class-name: com.mysql.cj.jdbc.Driver    &#x2F;&#x2F; 高版本写法</code></pre>\n\n<h2 id=\"11-2-JdbcTemplate\"><a href=\"#11-2-JdbcTemplate\" class=\"headerlink\" title=\"11.2 JdbcTemplate\"></a>11.2 JdbcTemplate</h2><ol>\n<li><strong>可修改配置项</strong><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  jdbc:\n    template:\n      query-timeout: 3    &#x2F;&#x2F; 单位为秒</code></pre></li>\n<li><strong>自动配置</strong><br><strong>已经自动配置好 JdbcTemplate ，自动注入使用即可</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired\nJdbcTemplate jdbcTemplate;\n\n@ResponseBody\n@GetMapping(&quot;&#x2F;sql&quot;)\npublic String sql()&#123;\n\tString sql &#x3D; &quot;select count(*) from user&quot;;\n\tInteger integer &#x3D; jdbcTemplate.queryForObject(sql, Integer.class);\n\treturn integer.toString();\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"11-3-Druid-数据源\"><a href=\"#11-3-Druid-数据源\" class=\"headerlink\" title=\"11.3 Druid 数据源\"></a>11.3 Druid 数据源</h2><p><strong><a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">https://github.com/alibaba/druid/wiki/常见问题</a></strong></p>\n<h3 id=\"11-3-1-自定义方式\"><a href=\"#11-3-1-自定义方式\" class=\"headerlink\" title=\"11.3.1 自定义方式\"></a>11.3.1 自定义方式</h3><h4 id=\"11-3-1-1-引入-Druid-依赖\"><a href=\"#11-3-1-1-引入-Druid-依赖\" class=\"headerlink\" title=\"11.3.1.1 引入 Druid 依赖\"></a>11.3.1.1 引入 Druid 依赖</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;1.1.14&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"11-3-1-2-创建配置类\"><a href=\"#11-3-1-2-创建配置类\" class=\"headerlink\" title=\"11.3.1.2 创建配置类\"></a>11.3.1.2 创建配置类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyDataSourceConfig &#123;\n    @Bean\n    public DataSource dataSource() throws SQLException &#123;\n        DruidDataSource druidDataSource &#x3D; new DruidDataSource();\n        druidDataSource.setUrl();\n        druidDataSource.setUsername();\n        druidDataSource.setPassword();\n        return druidDataSource;\n    &#125;\n&#125;</code></pre>\n\n<p><strong>需要设置 url、username、password 等属性，可以使用配置文件来进行配置，由于与 JDBC 配置属性相同，可以使用 @ConfigurationProperties 注解引入 JDBC 的配置信息</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyDataSourceConfig &#123;\n    @ConfigurationProperties(&quot;spring.datasource&quot;)\n    @Bean\n    public DataSource dataSource() throws SQLException &#123;\n        DruidDataSource druidDataSource &#x3D; new DruidDataSource();\n        return druidDataSource;\n    &#125;\n&#125;</code></pre>\n\n<p><strong>可使用 XML 配置文件方式</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;\n\t\tdestroy-method&#x3D;&quot;close&quot;&gt;\n\t\t&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;20&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;initialSize&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;maxWait&quot; value&#x3D;&quot;60000&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;minIdle&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;timeBetweenEvictionRunsMillis&quot; value&#x3D;&quot;60000&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;minEvictableIdleTimeMillis&quot; value&#x3D;&quot;300000&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;testWhileIdle&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;testOnBorrow&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;testOnReturn&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;poolPreparedStatements&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;maxOpenPreparedStatements&quot; value&#x3D;&quot;20&quot; &#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"11-3-1-3-监控统计功能\"><a href=\"#11-3-1-3-监控统计功能\" class=\"headerlink\" title=\"11.3.1.3 监控统计功能\"></a>11.3.1.3 监控统计功能</h4><p><strong><code>http://localhost:8080/druid</code></strong></p>\n<ol>\n<li><p><strong>开启监控统计和防火墙</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyDataSourceConfig &#123;\n    @ConfigurationProperties(&quot;spring.datasource&quot;)\n    @Bean\n    public DataSource dataSource() throws SQLException &#123;\n        DruidDataSource druidDataSource &#x3D; new DruidDataSource();\n&#x2F;&#x2F;        druidDataSource.setFilters(&quot;stat,wall&quot;);    &#x2F;&#x2F; 开启监控统计、防火墙\n        return druidDataSource;\n    &#125;\n&#125;</code></pre></li>\n<li><p><strong>同样可在配置文件中配置 filters 属性</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    url: jdbc:mysql:&#x2F;&#x2F;&#x2F;db1\n    username: root\n    password: fan223\n    driver-class-name: com.mysql.cj.jdbc.Driver\n\n    filters: stat,wall   &#x2F;&#x2F; 配置监控统计、防火墙</code></pre></li>\n<li><p><strong>StatViewServlet</strong><br><strong>提供监控信息展示的 HTML 页面、提供监控信息的 JSON API</strong><br><strong>可以在 StatViewServlet 中设置登录用户名和密码，设置后输入用户名和密码才可以进行监控</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyDataSourceConfig &#123;\n    @Bean\n    public ServletRegistrationBean statViewServlet()&#123;\n        StatViewServlet statViewServlet &#x3D; new StatViewServlet();\n        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean &#x3D; new ServletRegistrationBean&lt;&gt;(statViewServlet,&quot;&#x2F;druid&#x2F;*&quot;);\n        registrationBean.addInitParameter(&quot;loginUsername&quot;,&quot;admin&quot;);  &#x2F;&#x2F; 登录用户名\n        registrationBean.addInitParameter(&quot;loginPassword&quot;,&quot;123&quot;);\t &#x2F;&#x2F; 登录密码\n        return registrationBean;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;servlet&gt;\n\t&lt;servlet-name&gt;DruidStatView&lt;&#x2F;servlet-name&gt;\n\t&lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;&#x2F;servlet-class&gt;\n&lt;&#x2F;servlet&gt;\n&lt;servlet-mapping&gt;\n\t&lt;servlet-name&gt;DruidStatView&lt;&#x2F;servlet-name&gt;\n\t&lt;url-pattern&gt;&#x2F;druid&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;servlet-mapping&gt;</code></pre></li>\n<li><p><strong>StatFilter</strong><br><strong>用于统计监控信息，如 SQL 监控、URL 监控</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyDataSourceConfig &#123;\n    @Bean\n    public FilterRegistrationBean webStatFilter()&#123;\n        WebStatFilter webStatFilter &#x3D; new WebStatFilter();\n        FilterRegistrationBean&lt;WebStatFilter&gt; webStatFilterFilterRegistrationBean &#x3D; new FilterRegistrationBean&lt;&gt;(webStatFilter);\n        webStatFilterFilterRegistrationBean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));    &#x2F;&#x2F; 拦截路径\n        webStatFilterFilterRegistrationBean.addInitParameter(&quot;exclusions&quot;,&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,&#x2F;druid&#x2F;*&quot;); &#x2F;&#x2F; 释放路径\n        return webStatFilterFilterRegistrationBean;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">需要给数据源中配置如下属性；可以允许多个filter，多个用，分割；如：\n\n&lt;property name&#x3D;&quot;filters&quot; value&#x3D;&quot;stat,slf4j&quot; &#x2F;&gt;</code></pre></li>\n<li><p><strong>系统中所有 Filter：</strong>| 别名          | Filter类名                                              |<br>| ————- | ——————————————————- |<br>| default       | com.alibaba.druid.filter.stat.StatFilter                |<br>| stat          | com.alibaba.druid.filter.stat.StatFilter                |<br>| mergeStat     | com.alibaba.druid.filter.stat.MergeStatFilter           |<br>| encoding      | com.alibaba.druid.filter.encoding.EncodingConvertFilter |<br>| log4j         | com.alibaba.druid.filter.logging.Log4jFilter            |<br>| log4j2        | com.alibaba.druid.filter.logging.Log4j2Filter           |<br>| slf4j         | com.alibaba.druid.filter.logging.Slf4jLogFilter         |<br>| commonlogging | com.alibaba.druid.filter.logging.CommonsLogFilter       |</p>\n</li>\n<li><p><strong>慢 SQL 记录配置：</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;stat-filter&quot; class&#x3D;&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;\n    &lt;property name&#x3D;&quot;slowSqlMillis&quot; value&#x3D;&quot;10000&quot; &#x2F;&gt;\n    &lt;property name&#x3D;&quot;logSlowSql&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n使用 slowSqlMillis 定义慢SQL的时长</code></pre></li>\n</ol>\n<h3 id=\"11-3-2-使用官方-starter-方式\"><a href=\"#11-3-2-使用官方-starter-方式\" class=\"headerlink\" title=\"11.3.2 使用官方 starter 方式\"></a>11.3.2 使用官方 starter 方式</h3><h4 id=\"11-3-2-1-引入-druid-starter\"><a href=\"#11-3-2-1-引入-druid-starter\" class=\"headerlink\" title=\"11.3.2.1 引入 druid-starter\"></a>11.3.2.1 引入 druid-starter</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;1.1.14&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"11-3-2-2-自动配置\"><a href=\"#11-3-2-2-自动配置\" class=\"headerlink\" title=\"11.3.2.2 自动配置\"></a>11.3.2.2 自动配置</h4><ol>\n<li>扩展配置项 spring.datasource.druid</li>\n<li>DruidSpringAopConfiguration.class,   监控SpringBean的；配置项：\tspring.datasource.druid.aop-patterns</li>\n<li>DruidStatViewServletConfiguration.class, 监控页的配置：\tspring.datasource.druid.stat-view-servlet；默认开启</li>\n<li>DruidWebStatFilterConfiguration.class, web监控配置；\tspring.datasource.druid.web-stat-filter；默认开启</li>\n<li>DruidFilterConfiguration.class}) 所有 Druid 自己 filter 的配置</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private static final String FILTER_STAT_PREFIX &#x3D; &quot;spring.datasource.druid.filter.stat&quot;;\nprivate static final String FILTER_CONFIG_PREFIX &#x3D; &quot;spring.datasource.druid.filter.config&quot;;\nprivate static final String FILTER_ENCODING_PREFIX &#x3D; &quot;spring.datasource.druid.filter.encoding&quot;;\nprivate static final String FILTER_SLF4J_PREFIX &#x3D; &quot;spring.datasource.druid.filter.slf4j&quot;;\nprivate static final String FILTER_LOG4J_PREFIX &#x3D; &quot;spring.datasource.druid.filter.log4j&quot;;\nprivate static final String FILTER_LOG4J2_PREFIX &#x3D; &quot;spring.datasource.druid.filter.log4j2&quot;;\nprivate static final String FILTER_COMMONS_LOG_PREFIX &#x3D; &quot;spring.datasource.druid.filter.commons-log&quot;;\nprivate static final String FILTER_WALL_PREFIX &#x3D; &quot;spring.datasource.druid.filter.wall&quot;;</code></pre>\n\n<h4 id=\"11-3-2-3-配置项\"><a href=\"#11-3-2-3-配置项\" class=\"headerlink\" title=\"11.3.2.3 配置项\"></a>11.3.2.3 配置项</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    druid:\n      aop-patterns: fan.*  #监控SpringBean，包\n      filters: stat,wall     # 底层开启功能，stat（sql监控），wall（防火墙）\n\n      stat-view-servlet:   # 配置监控页功能\n        enabled: true      &#x2F;&#x2F; 开启\n        login-username: admin\n        login-password: xxx\n        resetEnable: false\n\n      web-stat-filter:  # 监控web\n        enabled: true\n        urlPattern: &#x2F;*\n        exclusions: &#39;*.js,*.gif,*.jpg,*.png,*.css,*.ico,&#x2F;druid&#x2F;*&#39;\n\n      filter:\n        stat:    # 对上面filters里面的stat的详细配置\n          slow-sql-millis: 1000\n          logSlowSql: true\n          enabled: true\n        wall:    # 对上面filters里面的wall的详细配置\n          enabled: true\n          config:\n            drop-table-allow: false</code></pre>\n\n<h1 id=\"12-整合-Mybatis-和-Mybatis-Plus\"><a href=\"#12-整合-Mybatis-和-Mybatis-Plus\" class=\"headerlink\" title=\"12. 整合 Mybatis 和 Mybatis-Plus\"></a>12. 整合 Mybatis 和 Mybatis-Plus</h1><h2 id=\"12-1-整合-Mybatis\"><a href=\"#12-1-整合-Mybatis\" class=\"headerlink\" title=\"12.1 整合 Mybatis\"></a>12.1 整合 Mybatis</h2><p><strong>最佳实战：</strong></p>\n<ol>\n<li>引入 mybatis-starter</li>\n<li>配置 application.yaml 中，指定 mapper-location 位置即可</li>\n<li><strong>编写 Mapper 接口并标注 @Mapper 注解 ，或在启动类指定 MapperSacn 包扫描</strong></li>\n<li>简单方法直接注解方式</li>\n<li>复杂方法编写mapper.xml进行绑定映射</li>\n<li><code>@MapperScan(&quot;fan.mapper&quot;)</code> 简化，其他的接口就可以不用标注 @Mapper 注解</li>\n</ol>\n<h3 id=\"12-1-1-引入-Starter\"><a href=\"#12-1-1-引入-Starter\" class=\"headerlink\" title=\"12.1.1 引入 Starter\"></a>12.1.1 引入 Starter</h3><p><strong><a href=\"https://github.com/mybatis\">https://github.com/mybatis</a></strong><br><strong>引入 Mybatis 的时候其实已经引了 JDBC 核心包，之前的 JDBC 核心包就不用引了</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.1.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"12-1-2-配置模式\"><a href=\"#12-1-2-配置模式\" class=\"headerlink\" title=\"12.1.2 配置模式\"></a>12.1.2 配置模式</h3><ol>\n<li>全局配置文件</li>\n<li>SqlSessionFactory：自动配置好了</li>\n<li>SqlSession：自动配置了 SqlSessionTemplate 组合了SqlSession</li>\n<li>@Import(AutoConfiguredMapperScannerRegistrar.class）</li>\n<li>Mapper： 只要我们写的操作 MyBatis 的接口标准了 @Mapper 就会被自动扫描进来</li>\n</ol>\n<h3 id=\"12-1-3-配置项\"><a href=\"#12-1-3-配置项\" class=\"headerlink\" title=\"12.1.3 配置项\"></a>12.1.3 配置项</h3><ol>\n<li><strong>可创建 Mybatis 映射文件 Mapper.xml</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace&#x3D;&quot;fan.UserMapper&quot;&gt;\n    &lt;select id&#x3D;&quot;getUser&quot; resultType&#x3D;&quot;fan.User&quot;&gt;\n        select * from  user where  id&#x3D;#&#123;id&#125;\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre></li>\n<li>Yaml 配置<br><strong>可以不写全局配置文件，所有全局配置文件的配置都放在 configuration 配置项中即可，就是相当于改 mybatis 全局配置文件中的值，因此两者不能共存</strong><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">mybatis:\n#  config-location: classpath:mybatis&#x2F;mybatis-config.xml      #全局配置文件位置\n  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml            #sql映射文件位置\n  configuration:\n    map-underscore-to-camel-case: true</code></pre></li>\n<li><strong>注解模式</strong><br><strong>无需编写 Mapper.xml 文件</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface TestMapper extends BaseMapper &#123;\n    @Select(&quot;select * from test where id &#x3D; #&#123;id&#125;&quot;)\n    public Test getTest(int id);\n\n    @Insert(&quot;insert into test values(null,#&#123;name&#125;,#&#123;age&#125;,#&#123;gender&#125;)&quot;)\n    @Options(useGeneratedKeys &#x3D; true,keyProperty &#x3D; &quot;id&quot;)\n    public void insert(User user);\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"12-2-整合-Mybatis-Plus\"><a href=\"#12-2-整合-Mybatis-Plus\" class=\"headerlink\" title=\"12.2 整合 Mybatis-Plus\"></a>12.2 整合 Mybatis-Plus</h2><h3 id=\"12-2-1-引入-Starter\"><a href=\"#12-2-1-引入-Starter\" class=\"headerlink\" title=\"12.2.1 引入 Starter\"></a>12.2.1 引入 Starter</h3><p><strong>引入 Mybatis-Plus 的同时已经引入了 Mybatis 和JDBC 的核心包，因此之前的两个核心包可以不用引入</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;3.4.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"12-2-2-自动配置\"><a href=\"#12-2-2-自动配置\" class=\"headerlink\" title=\"12.2.2 自动配置\"></a>12.2.2 自动配置</h3><ol>\n<li>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。mybatis-plus：xxx 就是对 mybatis-plus 的定制</li>\n<li>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</li>\n<li>mapperLocations 自动配置好的。有默认值。classpath*:&#x2F;mapper&#x2F;**&#x2F;*.xml；任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  建议以后sql映射文件，放在 mapper下</li>\n<li>容器中也自动配置好了 SqlSessionTemplate</li>\n<li>@Mapper 标注的接口也会被自动扫描；建议直接 <code>@MapperScan(&quot;fan.mapper&quot;) </code>批量扫描就行</li>\n</ol>\n<p><strong>优点：</strong><br><strong>只需要我们的 Mapper 继承 BaseMapper 就可以拥有 CRUD 能力，无需编写 Mapper.xml 文件</strong></p>\n<h2 id=\"12-3-整合-Mybatis-Plus-的-CRUD\"><a href=\"#12-3-整合-Mybatis-Plus-的-CRUD\" class=\"headerlink\" title=\"12.3 整合 Mybatis-Plus 的 CRUD\"></a>12.3 整合 Mybatis-Plus 的 CRUD</h2><ol>\n<li><p><strong>创建Bean</strong><br>一般来说 Bean 的名字与数据库表名对应，假如数据库表名修改了，可以使用 @TableName 标注数据库表名</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; @TableName(&quot;xxx&quot;) &#x2F;&#x2F; 对应数据库表名\npublic class User &#123;\n    private int id;\n    private String name;\n    private int age;\n    private String gender;\n&#125;</code></pre></li>\n<li><p><strong>创建 Mapper 接口</strong><br>继承 BaseMapper，标注 Bean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;\n&#125;</code></pre></li>\n<li><p><strong>创建 Service</strong><br>继承 ServiceImpl ，标注 Mapper 接口 和 Bean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface UserService extends IService&lt;User&gt; &#123;\n\n&#125;\n\n@Service\npublic class UserServiceImpl extends ServiceImpl&lt;UserMapper,User&gt; implements UserService &#123;\n\n&#125;</code></pre></li>\n<li><p><strong>创建 Controller</strong><br>可直接使用 UserService 接口，调用 Mybatis-Plus 自带的 SQL 方法，进行 CRUD 操作<br><strong>list() 方法，返回 List 集合，查询到的所有数据</strong><br><strong>page() 方法，返回分页数据</strong></p>\n<ol>\n<li>records：数据集合</li>\n<li>total：数据条数</li>\n<li>pages：总页数</li>\n<li>current：当前页码</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired\nUserService userService;\n\n@GetMapping(&quot;&#x2F;editable_table&quot;)\npublic String editable_table(@RequestParam(value &#x3D; &quot;currentPage&quot;,defaultValue &#x3D; &quot;1&quot;) int currentPage, Model model)&#123;\n        List&lt;User&gt; list &#x3D; UserService.list();\n&#x2F;&#x2F;        model.addAttribute(&quot;users&quot;,list);\n\n        Page&lt;User&gt; userPage &#x3D; new Page&lt;&gt;(currentPage,5);    &#x2F;&#x2F; 创建一个 BeanPage 对象，传入当前页码和每页显示数据数\n        Page&lt;User&gt; page &#x3D; userService.page(userPage, null); &#x2F;&#x2F; 调用 page 方法，传入 BeanPage 对象和条件\n        if (currentPage &lt; 1)&#123;\n            userPage.setCurrent(1);\n        &#125;else if (currentPage &gt; page.getPages())&#123;\n            userPage.setCurrent(page.getPages());\n        &#125;\n        page &#x3D; userService.page(userPage,null);\n        model.addAttribute(&quot;page&quot;,page);\n        return &quot;table&#x2F;editable_table&quot;;\n&#125;</code></pre></li>\n<li><p>HTML 页面</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;tr class&#x3D;&quot;&quot; th:each&#x3D;&quot;user,stats : $&#123;page.records&#125;&quot;&gt;\n\t\t&lt;td th:text&#x3D;&quot;$&#123;stats.count&#125;&quot;&gt;Jonathan&lt;&#x2F;td&gt;    &#x2F;&#x2F; 可以 .属性名\n\t\t&lt;td th:text&#x3D;&quot;$&#123;user.id&#125;&quot;&gt;Jonathan&lt;&#x2F;td&gt;\n\t\t&lt;td th:text&#x3D;&quot;$&#123;user.getName()&#125;&quot;&gt;Smith&lt;&#x2F;td&gt;\t\t&#x2F;&#x2F; 也可以 get()方法\n\t\t&lt;td&gt;[[$&#123;user.getAge&#125;]]&lt;&#x2F;td&gt;\n\t\t&lt;td&gt;[[$&#123;user.gender&#125;]]&lt;&#x2F;td&gt;\n\t\t&lt;td&gt;\n\t\t\t\t&lt;a th:href&#x3D;&quot;@&#123;&#x2F;userDel&#x2F;&#123;id&#125;(id &#x3D; $&#123;user.id&#125;,currentPage &#x3D; $&#123;page.current&#125;)&#125;&quot; class&#x3D;&quot;btn btn-danger btn-sm&quot;&gt;删除&lt;&#x2F;a&gt;\n\t\t&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;\n\n&lt;ul&gt;\n\t\t&lt;li class&#x3D;&quot;prev&quot;&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;editable_table(currentPage &#x3D; $&#123;page.current&#125; - 1)&#125;&quot;&gt;← Prev&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n\t\t&lt;li th:class&#x3D;&quot;$&#123;num &#x3D;&#x3D; page.current&#125; ? &#39;active&#39; : &#39;&#39;&quot; th:each&#x3D;&quot;num : $&#123;#numbers.sequence(1,page.pages)&#125;&quot;&gt;\n\t\t\t\t&lt;a th:href&#x3D;&quot;@&#123;&#x2F;editable_table(currentPage &#x3D; $&#123;num&#125;)&#125;&quot;&gt;[[$&#123;num&#125;]]&lt;&#x2F;a&gt;\n\t\t&lt;&#x2F;li&gt;\n\t\t&lt;li class&#x3D;&quot;next&quot;&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;editable_table(currentPage &#x3D; $&#123;page.current&#125; + 1)&#125;&quot;&gt;Next → &lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;</code></pre></li>\n</ol>\n<h1 id=\"13-整合-NoSQL（Redis）\"><a href=\"#13-整合-NoSQL（Redis）\" class=\"headerlink\" title=\"13. 整合 NoSQL（Redis）\"></a>13. 整合 NoSQL（Redis）</h1><h2 id=\"13-1-引入-Starter\"><a href=\"#13-1-引入-Starter\" class=\"headerlink\" title=\"13.1 引入 Starter\"></a>13.1 引入 Starter</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"13-2-自动配置\"><a href=\"#13-2-自动配置\" class=\"headerlink\" title=\"13.2 自动配置\"></a>13.2 自动配置</h2><ol>\n<li><strong>RedisAutoConfiguration 自动配置类。RedisProperties 属性类 –&gt; spring.redis.xxx 是对 Redis 的配置</strong></li>\n<li>连接工厂是准备好的。LettuceConnectionConfiguration、JedisConnectionConfiguration</li>\n<li>自动注入了 RedisTemplate&lt;Object, Object&gt; ： xxxTemplate</li>\n<li>自动注入了 StringRedisTemplate；k：v 都是 String</li>\n<li>只要使用 RedisTemplate，就可以操作 Redis</li>\n</ol>\n<h2 id=\"13-3-配置项\"><a href=\"#13-3-配置项\" class=\"headerlink\" title=\"13.3 配置项\"></a>13.3 配置项</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  redis:\n    host: 124.222.118.90 # Redis服务器地址\n    port: 6379 # Redis服务器连接端口\n    client-type: lettuce # 可以选择客户端类型，默认为 lettuce\n    lettuce:\n      pool:\n        max-active: 10 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1 # 最大阻塞等待时间(负数表示没限制)\n        max-idle: 5 # 连接池中的最大空闲连接\n        min-idle: 0 # 连接池中的最小空闲连接\n    jedis:\n      pool:\n        max-active: 10\n        max-wait: 10\n    password: xxx # 密码\n    database: 0 # Redis数据库索引（默认为0）\n    connect-timeout: 1800000 # 连接超时时间（毫秒）</code></pre>\n\n<h2 id=\"13-4-切换至-Jedis\"><a href=\"#13-4-切换至-Jedis\" class=\"headerlink\" title=\"13.4 切换至 Jedis\"></a>13.4 切换至 Jedis</h2><p><strong>默认使用的是 Lettuce</strong></p>\n<ol>\n<li><strong>导入 Jedis 依赖</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n<li><strong>更改 Client-type 属性为 Jedis</strong><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  redis:\n    port: 6379                  &#x2F;&#x2F; 端口号\n    host: localhost\t\t\t\t\t\t\t&#x2F;&#x2F; 主机\n    client-type: jedis\t\t\t\t&#x2F;&#x2F; 客户端类型，Lettuce和Jedis</code></pre></li>\n</ol>\n<h2 id=\"13-5-Controller\"><a href=\"#13-5-Controller\" class=\"headerlink\" title=\"13.5 Controller\"></a>13.5 Controller</h2><p><strong>首先注入 RedisTemplate，然后使用 redisTemplate 的 opsForValue() 方法得到一个对象。使用该对象来对Redis 进行操纵</strong><br>使用该对象的 increment(xxx) 方法，表示 xxx 的值自动加 1</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class IndexController &#123;\n    @Autowired\n    StringRedisTemplate stringRedisTemplate;\n\n    @GetMapping(&quot;&#x2F;index.html&quot;)\n    public String index(Model model)&#123;\n        ValueOperations&lt;String, String&gt; operations &#x3D; stringRedisTemplate.opsForValue();\n        operations.set(&quot;name&quot;,&quot;张三&quot;);\n        String name &#x3D; operations.get(&quot;name&quot;);\n        System.out.println(name);\n        return &quot;index&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"14-Junit5-单元测试\"><a href=\"#14-Junit5-单元测试\" class=\"headerlink\" title=\"14. Junit5 单元测试\"></a>14. Junit5 单元测试</h1><h2 id=\"14-1-引入-Starter\"><a href=\"#14-1-引入-Starter\" class=\"headerlink\" title=\"14.1 引入 Starter\"></a>14.1 引入 Starter</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t  &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n\t  &lt;scope&gt;test&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"14-2-选择引入-JUnit-Vintage-测试引擎\"><a href=\"#14-2-选择引入-JUnit-Vintage-测试引擎\" class=\"headerlink\" title=\"14.2 选择引入 JUnit Vintage 测试引擎\"></a>14.2 选择引入 JUnit Vintage 测试引擎</h2><p><strong>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容 Junit4 需要自行引入（不能使用 Junit4 的功能 @Test）。</strong> <code>JUnit 5’s Vintage Engine Removed from spring-boot-starter-test</code>，如果需要继续兼容 Junit4 需要自行引入vintage</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;\n    &lt;scope&gt;test&lt;&#x2F;scope&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.hamcrest&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;hamcrest-core&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"14-3-JUnit5-常用注解\"><a href=\"#14-3-JUnit5-常用注解\" class=\"headerlink\" title=\"14.3 JUnit5 常用注解\"></a>14.3 JUnit5 常用注解</h2><p><strong><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></strong></p>\n<ul>\n<li><code>@Test</code>：表示方法是测试方法。但是与 JUnit4 的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由 Jupiter 提供额外测试</li>\n<li><code>@ParameterizedTest</code>：表示方法是参数化测试</li>\n<li><code>@RepeatedTest</code>：表示方法可重复执行</li>\n<li><code>@DisplayName</code>：为测试类或者测试方法设置展示名称</li>\n<li><code>@BeforeEach</code>：表示在每个单元测试之前执行</li>\n<li><code>@AfterEach</code>：表示在每个单元测试之后执行</li>\n<li><code>@BeforeAll</code> :表示在所有单元测试之前执行</li>\n<li><code>@AfterAll</code>：表示在所有单元测试之后执行</li>\n<li><code>@Tag</code>：表示单元测试类别，类似于 JUnit4 中的 @Categories</li>\n<li><code>@Disabled</code>：表示测试类或测试方法不执行，类似于 JUnit4 中的 @Ignore</li>\n<li><code>@Timeout</code>：表示测试方法运行如果超过了指定时间将会返回错误</li>\n<li><code>@ExtendWith</code>：为测试类或测试方法提供扩展类引用</li>\n</ul>\n<h2 id=\"14-4-断言（assertions）\"><a href=\"#14-4-断言（assertions）\" class=\"headerlink\" title=\"14.4 断言（assertions）\"></a>14.4 断言（assertions）</h2><p><strong>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。</strong> 这些断言方法都是 <code>org.junit.jupiter.api.Assertions</code> 的静态方法。JUnit 5 内置的断言可以分成如下几个类别：</p>\n<ul>\n<li>检查业务逻辑返回的数据是否合理</li>\n<li>所有的测试运行结束以后，会有一个详细的测试报告</li>\n</ul>\n<h3 id=\"14-1-1-简单断言\"><a href=\"#14-1-1-简单断言\" class=\"headerlink\" title=\"14.1.1 简单断言\"></a>14.1.1 简单断言</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>assertEquals</td>\n<td>判断两个对象或两个原始类型是否相等</td>\n</tr>\n<tr>\n<td>assertNotEquals</td>\n<td>判断两个对象或两个原始类型是否不相等</td>\n</tr>\n<tr>\n<td>assertSame</td>\n<td>判断两个对象引用是否指向同一个对象</td>\n</tr>\n<tr>\n<td>assertNotSame</td>\n<td>判断两个对象引用是否指向不同的对象</td>\n</tr>\n<tr>\n<td>assertTrue</td>\n<td>判断给定的布尔值是否为 True</td>\n</tr>\n<tr>\n<td>assertFalse</td>\n<td>判断给定的布尔值是否为 False</td>\n</tr>\n<tr>\n<td>assertNull</td>\n<td>判断给定的对象引用是否为 NULL</td>\n</tr>\n<tr>\n<td>assertNotNull</td>\n<td>判断给定的对象引用是否不为 NULL</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;simple assertion&quot;)\npublic void simple() &#123;\n     assertEquals(3, 1 + 2, &quot;simple math&quot;);\n     assertNotEquals(3, 1 + 1);\n\n     assertNotSame(new Object(), new Object());\n     Object obj &#x3D; new Object();\n     assertSame(obj, obj);\n\n     assertFalse(1 &gt; 2);\n     assertTrue(1 &lt; 2);\n\n     assertNull(null);\n     assertNotNull(new Object());\n&#125;</code></pre>\n\n<h3 id=\"14-1-2-数组断言\"><a href=\"#14-1-2-数组断言\" class=\"headerlink\" title=\"14.1.2 数组断言\"></a>14.1.2 数组断言</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;array assertion&quot;)\npublic void array() &#123;\n    assertArrayEquals(new int[]&#123;1, 2&#125;, new int[] &#123;1, 2&#125;);\n&#125;</code></pre>\n\n<h3 id=\"14-1-3-组合断言\"><a href=\"#14-1-3-组合断言\" class=\"headerlink\" title=\"14.1.3 组合断言\"></a>14.1.3 组合断言</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;assert all&quot;)\npublic void all() &#123;\n\tassertAll(&quot;Math&quot;,\n\t\t() -&gt; assertEquals(2, 1 + 1,&quot;number&quot;),\n\t\t() -&gt; assertTrue(1 &gt; 0)\n\t);\n&#125;</code></pre>\n\n<h3 id=\"14-1-4-异常断言\"><a href=\"#14-1-4-异常断言\" class=\"headerlink\" title=\"14.1.4 异常断言\"></a>14.1.4 异常断言</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;异常测试&quot;)\npublic void exceptionTest() &#123;\n    ArithmeticException exception &#x3D; Assertions.assertThrows(\n\t\t&#x2F;&#x2F;扔出断言异常\n\t\tArithmeticException.class, () -&gt; System.out.println(1 % 0));\n&#125;</code></pre>\n\n<h3 id=\"14-1-5-超时断言\"><a href=\"#14-1-5-超时断言\" class=\"headerlink\" title=\"14.1.5 超时断言\"></a>14.1.5 超时断言</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Timeout(value &#x3D; 500,unit &#x3D; TimeUnit.MICROSECONDS)\n@Test\n@DisplayName(&quot;超时测试&quot;)\npublic void timeoutTest() &#123;\n\t&#x2F;&#x2F;如果测试方法时间超过1s将会异常\n    &#x2F;&#x2F;Assertions.assertTimeout(Duration.ofMillis(1000), () -&gt; Thread.sleep(500));\n    Thread.sleep(600);\n&#125;</code></pre>\n\n<h3 id=\"14-1-5-快速失败\"><a href=\"#14-1-5-快速失败\" class=\"headerlink\" title=\"14.1.5 快速失败\"></a>14.1.5 快速失败</h3><p><strong>通过 Fail 方法直接使得测试失败</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;fail&quot;)\npublic void shouldFail() &#123;\n    if(1 &#x3D;&#x3D; 1)&#123;\n\t\tfail(&quot;This should fail&quot;);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"14-5-前置条件（assumptions）\"><a href=\"#14-5-前置条件（assumptions）\" class=\"headerlink\" title=\"14.5 前置条件（assumptions）\"></a>14.5 前置条件（assumptions）</h2><p>JUnit 5 中的<strong>前置条件（assumptions【假设】）类似于断言，不同之处在于不满足的断言会使得测试方法失败，而不满足的前置条件只会使得测试方法的执行终止。</strong> 前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@DisplayName(&quot;前置条件&quot;)\npublic class AssumptionsTest &#123;\n\tprivate final String environment &#x3D; &quot;DEV&quot;;\n \n\t@Test\n\t@DisplayName(&quot;simple&quot;)\n \tpublic void simpleAssume() &#123;\n\t\tassumeTrue(Objects.equals(this.environment, &quot;DEV&quot;));\n\t\tassumeFalse(() -&gt; Objects.equals(this.environment, &quot;PROD&quot;));\n\t&#125;\n\n\t@Test\n\t@DisplayName(&quot;assume then do&quot;)\n\tpublic void assumeThenDo() &#123;\n  \t  assumingThat(\n   \t    Objects.equals(this.environment, &quot;DEV&quot;),\n\t\t\t() -&gt; System.out.println(&quot;In DEV&quot;)\n\t\t);\n\t&#125;\n&#125;</code></pre>\n\n<p><strong>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止</strong></p>\n<p><strong>assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止</strong></p>\n<h2 id=\"14-6-嵌套测试\"><a href=\"#14-6-嵌套测试\" class=\"headerlink\" title=\"14.6 嵌套测试\"></a>14.6 嵌套测试</h2><p><strong>JUnit 5 可以通过 Java 中的内部类和 @Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用 @BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@DisplayName(&quot;A stack&quot;)\nclass TestingAStackDemo &#123;\n    Stack&lt;Object&gt; stack;\n\n    @Test\n    @DisplayName(&quot;is instantiated with new Stack()&quot;)\n    void isInstantiatedWithNew() &#123;\n        new Stack&lt;&gt;();\n    &#125;\n    @Nested\n    @DisplayName(&quot;when new&quot;)\n    class WhenNew &#123;\n        @BeforeEach\n        void createNewStack() &#123;\n            stack &#x3D; new Stack&lt;&gt;();\n        &#125;\n        @Test\n        @DisplayName(&quot;is empty&quot;)\n        void isEmpty() &#123;\n            assertTrue(stack.isEmpty());\n        &#125;\n        @Test\n        @DisplayName(&quot;throws EmptyStackException when popped&quot;)\n        void throwsExceptionWhenPopped() &#123;\n            assertThrows(EmptyStackException.class, stack::pop);\n        &#125;\n        @Test\n        @DisplayName(&quot;throws EmptyStackException when peeked&quot;)\n        void throwsExceptionWhenPeeked() &#123;\n            assertThrows(EmptyStackException.class, stack::peek);\n        &#125;\n        @Nested\n        @DisplayName(&quot;after pushing an element&quot;)\n        class AfterPushing &#123;\n            String anElement &#x3D; &quot;an element&quot;;\n\n            @BeforeEach\n            void pushAnElement() &#123;\n                stack.push(anElement);\n            &#125;\n            @Test\n            @DisplayName(&quot;it is no longer empty&quot;)\n            void isNotEmpty() &#123;\n                assertFalse(stack.isEmpty());\n            &#125;\n            @Test\n            @DisplayName(&quot;returns the element when popped and is empty&quot;)\n            void returnElementWhenPopped() &#123;\n                assertEquals(anElement, stack.pop());\n                assertTrue(stack.isEmpty());\n            &#125;\n            @Test\n            @DisplayName(&quot;returns the element when peeked but remains not empty&quot;)\n            void returnElementWhenPeeked() &#123;\n                assertEquals(anElement, stack.peek());\n                assertFalse(stack.isEmpty());\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"14-7-参数化测试\"><a href=\"#14-7-参数化测试\" class=\"headerlink\" title=\"14.7 参数化测试\"></a>14.7 参数化测试</h2><p>参数化测试是 JUnit5 很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。标注 @ParameterizedTest 注解指定这是一参数化测试类，利用 @ValueSource 等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>\n<ol>\n<li><code>@ValueSource</code>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li>\n<li><code>@NullSource</code>: 表示为参数化测试提供一个 NULL 的入参</li>\n<li><code>@EnumSource</code>: 表示为参数化测试提供一个枚举入参</li>\n<li><code>@CsvFileSource</code>：表示读取指定 CSV 文件内容作为参数化测试入参</li>\n<li><code>@MethodSource</code>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ParameterizedTest\n@ValueSource(strings &#x3D; &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)\n@DisplayName(&quot;参数化测试1&quot;)\npublic void parameterizedTest1(String string) &#123;\n    System.out.println(string);\n    Assertions.assertTrue(StringUtils.isNotBlank(string));\n&#125;\n\n@ParameterizedTest\n@MethodSource(&quot;method&quot;)    &#x2F;&#x2F;指定方法名\n@DisplayName(&quot;方法来源参数&quot;)\npublic void testWithExplicitLocalMethodSource(String name) &#123;\n    System.out.println(name);\n    Assertions.assertNotNull(name);\n&#125;\n\nstatic Stream&lt;String&gt; method() &#123;\n    return Stream.of(&quot;apple&quot;, &quot;banana&quot;);\n&#125;</code></pre>\n\n<h1 id=\"15-指标监控\"><a href=\"#15-指标监控\" class=\"headerlink\" title=\"15. 指标监控\"></a>15. 指标监控</h1><h2 id=\"15-1-SpringBoot-Actuator\"><a href=\"#15-1-SpringBoot-Actuator\" class=\"headerlink\" title=\"15.1 SpringBoot Actuator\"></a>15.1 SpringBoot Actuator</h2><p><strong>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能</strong></p>\n<h3 id=\"15-1-1-引入-Starter\"><a href=\"#15-1-1-引入-Starter\" class=\"headerlink\" title=\"15.1.1 引入 Starter\"></a>15.1.1 引入 Starter</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"15-1-2-配置项\"><a href=\"#15-1-2-配置项\" class=\"headerlink\" title=\"15.1.2 配置项\"></a>15.1.2 配置项</h3><h5 id=\"暴露规则\"><a href=\"#暴露规则\" class=\"headerlink\" title=\"暴露规则\"></a>暴露规则</h5><p><strong>支持的暴露方式：</strong></p>\n<ul>\n<li>HTTP：默认只暴露 health 和 info Endpoint</li>\n<li>JMX：默认暴露所有 Endpoint</li>\n<li>除过 health 和 info，剩下的 Endpoint 都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200531.png\"></p>\n<h4 id=\"开启方式\"><a href=\"#开启方式\" class=\"headerlink\" title=\"开启方式\"></a>开启方式</h4><p><strong>默认所有的 Endpoint 除了 shutdown 都是开启的。需要开启或者禁用某个 Endpoint。配置模式为 <code>management.endpoint.&lt;endpointName&gt;.enabled = true</code></strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">management:\n  endpoints:\n    enabled-by-default: true #暴露所有端点信息\n    web:\n      exposure:\n        include: &#39;*&#39;  #以web方式暴露</code></pre>\n\n<p><strong>或者禁用所有的 Endpoint 然后手动开启指定的 Endpoint ，设置相关端点属性</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">management:\n  endpoints:\n    enabled-by-default: false\n    web:\n      exposure:\n        include: &#39;*&#39;\n  endpoint:\n    health:\n      show-details: always  #总是显示详细信息。可显示每个模块的状态信息\n      enabled: true\n    info:\n      enabled: true\n    beans:\n      enabled: true\n    metrics:\n      enabled: true</code></pre>\n\n<h3 id=\"15-1-3-访问\"><a href=\"#15-1-3-访问\" class=\"headerlink\" title=\"15.1.3 访问\"></a>15.1.3 访问</h3><p><strong><a href=\"http://localhost:8080/actuator/\">http://localhost:8080/actuator/</a></strong>**</p>\n<ul>\n<li><a href=\"http://localhost:8080/actuator/beans\">http://localhost:8080/actuator/beans</a></li>\n<li><a href=\"http://localhost:8080/actuator/configprops\">http://localhost:8080/actuator/configprops</a></li>\n<li><a href=\"http://localhost:8080/actuator/metrics\">http://localhost:8080/actuator/metrics</a></li>\n<li><a href=\"http://localhost:8080/actuator/metrics/jvm.gc.pause\">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></li>\n<li><a href=\"http://localhost:8080/actuator/endpointName/detailPath\">http://localhost:8080/actuator/endpointName/detailPath</a></li>\n<li>。。。。。。</li>\n</ul>\n<h2 id=\"15-2-Actuator-Endpoint\"><a href=\"#15-2-Actuator-Endpoint\" class=\"headerlink\" title=\"15.2 Actuator Endpoint\"></a>15.2 Actuator Endpoint</h2><p><strong>常用 Endpoint：</strong></p>\n<ul>\n<li>Health：监控状况</li>\n<li>Metrics：运行时指标</li>\n<li>Loggers：日志记录</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200547.png\"></p>\n<p><strong>如果应用程序是Web应用程序（Spring MVC，Spring WebFlux 或 Jersey），则可以使用以下附加端点：</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200603.png\"></p>\n<h3 id=\"15-2-1-Health-Endpoint\"><a href=\"#15-2-1-Health-Endpoint\" class=\"headerlink\" title=\"15.2.1 Health Endpoint\"></a>15.2.1 Health Endpoint</h3><p><strong>健康检查端点，一般用于在云平台，平台会定时的检查应用的健康状况，就需要 Health Endpoint，可以为平台返回当前应用的一系列组件健康状况的集合</strong></p>\n<ul>\n<li>health endpoint 返回的结果，应该是一系列健康检查后的一个汇总报告</li>\n<li>很多的健康检查默认已经自动配置好了，比如：数据库、Redis 等</li>\n<li>可以很容易的添加自定义的健康检查机制</li>\n</ul>\n<p><strong>定制 Health</strong></p>\n<ol>\n<li><strong>继承抽象类</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class MyComHealthIndicator extends AbstractHealthIndicator &#123;\n    @Override\n    protected void doHealthCheck(Health.Builder builder) throws Exception &#123;\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n\n        if (1 &#x3D;&#x3D; 1)&#123;\n            builder.up();\n            map.put(&quot;count&quot;,1);\n            map.put(&quot;ms&quot;,1000);\n        &#125;else &#123;\n            builder.status(Status.OUT_OF_SERVICE);\n            map.put(&quot;err&quot;,&quot;连接超时&quot;);\n        &#125;\n        builder.withDetail(&quot;code&quot;,100)\n            \t.withDetails(map);\n    &#125;\n&#125;</code></pre></li>\n<li><strong>实现接口</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class MyHealthIndicator implements HealthIndicator &#123;\n    @Override\n    public Health health() &#123;\n        int errorCode &#x3D; check(); &#x2F;&#x2F; perform some specific health check\n        if (errorCode !&#x3D; 0) &#123;\n            return Health.down().withDetail(&quot;Error Code&quot;, errorCode).build();\n        &#125;\n        return Health.up().build();\n    &#125;\n&#125;\n&#x2F;&#x2F; 构建Health\nHealth build &#x3D; Health.down()\n                .withDetail(&quot;msg&quot;, &quot;error service&quot;)\n                .withDetail(&quot;code&quot;, &quot;500&quot;)\n                .withException(new RuntimeException())\n                .build();</code></pre></li>\n</ol>\n<h3 id=\"15-2-2-Metrics-Endpoint\"><a href=\"#15-2-2-Metrics-Endpoint\" class=\"headerlink\" title=\"15.2.2 Metrics Endpoint\"></a>15.2.2 Metrics Endpoint</h3><p><strong>提供详细的、层级的、空间指标信息，这些信息可以被 pull（主动推送）或者push（被动获取）方式得到</strong></p>\n<ul>\n<li>通过Metrics对接多种监控系统</li>\n<li>简化核心Metrics开发</li>\n<li>添加自定义 Metrics 或者扩展已有 Metrics</li>\n</ul>\n<p><strong>定制Metrics：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class MyService&#123;\n    Counter counter;\n    public MyService(MeterRegistry meterRegistry)&#123;\n         counter &#x3D; meterRegistry.counter(&quot;myservice.method.running.counter&quot;);\n    &#125;\n    public void hello() &#123;\n        counter.increment();\n    &#125;\n&#125;\n\n&#x2F;&#x2F;也可以使用下面的方式\n@Bean\nMeterBinder queueSize(Queue queue) &#123;\n    return (registry) -&gt; Gauge.builder(&quot;queueSize&quot;, queue::size).register(registry);\n&#125;</code></pre>\n\n<h3 id=\"15-2-3-定制-info-信息\"><a href=\"#15-2-3-定制-info-信息\" class=\"headerlink\" title=\"15.2.3 定制 info 信息\"></a>15.2.3 定制 info 信息</h3><ol>\n<li><strong>编写配置文件</strong><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">info:\n  appName: boot-admin\n  version: 2.0.1\n  mavenProjectName: @project.artifactId@  #使用@@可以获取maven的pom文件值\n  mavenProjectVersion: @project.version@</code></pre></li>\n<li><strong>编写 InfoContributor</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class ExampleInfoContributor implements InfoContributor &#123;\n    @Override\n    public void contribute(Info.Builder builder) &#123;\n        builder.withDetail(&quot;ms&quot;,&quot;你好&quot;)\n                .withDetails(Collections.singletonMap(&quot;world&quot;,&quot;world&quot;));\n    &#125;\n&#125;</code></pre></li>\n</ol>\n<h3 id=\"15-2-4-定制-Endpoint\"><a href=\"#15-2-4-定制-Endpoint\" class=\"headerlink\" title=\"15.2.4 定制 Endpoint\"></a>15.2.4 定制 Endpoint</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\n@Endpoint(id &#x3D; &quot;myService&quot;)\npublic class MyServiceEndpoint &#123;\n    @ReadOperation\n    public Map getDockerInfo()&#123;\n        return Collections.singletonMap(&quot;dockerInto&quot;,&quot;dockerInfo start&quot;);\n    &#125;\n    @WriteOperation\n    public void stopDockerInfo()&#123;\n        System.out.println(&quot;docker stopped&quot;);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"15-3-可视化\"><a href=\"#15-3-可视化\" class=\"headerlink\" title=\"15.3 可视化\"></a>15.3 可视化</h2><p><strong><a href=\"https://github.com/codecentric/spring-boot-admin\">https://github.com/codecentric/spring-boot-admin</a></strong><br><strong>创建一个 springboot server 项目，用作服务器指标监控 springboot client 客户端</strong></p>\n<h3 id=\"15-3-1-Server\"><a href=\"#15-3-1-Server\" class=\"headerlink\" title=\"15.3.1 Server\"></a>15.3.1 Server</h3><ol>\n<li><strong>引入 Starter</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.3.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n<li><strong>添加 @EnableAdminServer 注解</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableAdminServer\n@SpringBootApplication\npublic class AdminserverApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(AdminserverApplication.class, args);\n    &#125;\n&#125;</code></pre></li>\n<li><strong>设置端口</strong><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n\tport: 8888</code></pre></li>\n</ol>\n<h3 id=\"15-3-2-Client\"><a href=\"#15-3-2-Client\" class=\"headerlink\" title=\"15.3.2 Client\"></a>15.3.2 Client</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  boot:\n    admin:\n      client:\n        url: http:&#x2F;&#x2F;localhost:8888  &#x2F;&#x2F; 使用主机名注册\n        instance:\n          prefer-ip: true  # 使用ip注册进来\n\tapplication:\n\t\tname: adminmanager</code></pre>\n\n<h1 id=\"16-外部化配置和默认配置文件\"><a href=\"#16-外部化配置和默认配置文件\" class=\"headerlink\" title=\"16. 外部化配置和默认配置文件\"></a>16. 外部化配置和默认配置文件</h1><h2 id=\"16-1-外部化配置文件\"><a href=\"#16-1-外部化配置文件\" class=\"headerlink\" title=\"16.1 外部化配置文件\"></a>16.1 外部化配置文件</h2><p><strong>除了默认配置文件，Spring Boot 还可以加载一些位于项目外部的配置文件。可以通过如下 2 个参数，指定外部配置文件的路径：</strong></p>\n<ul>\n<li><strong><code>spring.config.location</code></strong><br>可以先将 Spring Boot 项目打包成 JAR 文件，然后在命令行启动命令中，使用命令行参数 –spring.config.location，指定外部配置文件的路径。<br><code>java -jar &#123;JAR&#125; --spring.config.location=&#123;外部配置文件全路径&#125;</code><br><strong>使用该参数指定配置文件后，会使项目默认配置文件（application.properties 或 application.yml ）失效，Spring Boot 将只加载指定的外部配置文件</strong></li>\n<li><strong><code>spring.config.additional-location</code></strong><br><code>java -jar &#123;JAR&#125; --spring.config.additional-location=&#123;外部配置文件全路径&#125;</code><br><strong>与 <code>--spring.config.location</code> 不同，<code>--spring.config.additional-location</code> 不会使项目默认的配置文件失效</strong>，使用该命令行参数添加的外部配置文件会与项目默认的配置文件共同生效，形成互补配置，且其优先级是最高的，比所有默认配置文件的优先级都高</li>\n</ul>\n<h3 id=\"16-1-1-配置外部配置文件的优先级\"><a href=\"#16-1-1-配置外部配置文件的优先级\" class=\"headerlink\" title=\"16.1.1 配置外部配置文件的优先级\"></a>16.1.1 配置外部配置文件的优先级</h3><p><strong>Maven 对项目进行打包时，位于项目根目录下的配置文件是无法被打包进项目的 JAR 包的，因此位于根目录下的默认配置文件无法在 JAR 中生效，</strong> 即该项目将只加载指定的外部配置文件和项目类路径（classpath）下的默认配置文件，它们的加载优先级顺序为：</p>\n<ol>\n<li><strong>spring.config.additional-location 指定的外部配置文件 my-application.yml</strong></li>\n<li><strong>classpath:&#x2F;config&#x2F;application.yml</strong></li>\n<li><strong>classpath:&#x2F;application.yml</strong></li>\n</ol>\n<h3 id=\"16-1-2-配置虚拟机参数\"><a href=\"#16-1-2-配置虚拟机参数\" class=\"headerlink\" title=\"16.1.2 配置虚拟机参数\"></a>16.1.2 配置虚拟机参数</h3><p><strong>将 Spring Boot 项目打包后，然后在命令行启动命令中添加 <code>spring.config.additional-location</code> 参数指定外部配置文件，会导致项目根目录下的配置文件无法被加载，可以通过以下 3 种方式解决这个问题：</strong></p>\n<ul>\n<li>在 IDEA 的运行配置（Run&#x2F;Debug Configuration）中，添加虚拟机参数 <code>-Dspring.config.additional-location=D:\\myConfig\\my-application.yml</code>，指定外部配置文件</li>\n<li>在 IDEA 的运行配置（Run&#x2F;Debug Configuration）中，添加程序运行参数 <code>--spring.config.additional-location=D:\\myConfig\\my-application.yml</code>，指定外部配置文件；</li>\n<li><strong>在主启动类中调用 System.setProperty（）方法添加系统属性 <code>spring.config.additional-location</code>，指定外部配置文件</strong></li>\n</ul>\n<h3 id=\"16-1-3-外部配置源\"><a href=\"#16-1-3-外部配置源\" class=\"headerlink\" title=\"16.1.3 外部配置源\"></a>16.1.3 外部配置源</h3><p><strong>常用：Java属性文件、YAML文件、环境变量、命令行参数</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class HelloController &#123;\n    @Value(&quot;$&#123;MAVEN_HOME&#125;&quot;)\n    private String msg;\n  \n    @Value(&quot;os.name&quot;)\n    private String osName;\n&#125;</code></pre>\n\n<h2 id=\"16-2-默认配置文件\"><a href=\"#16-2-默认配置文件\" class=\"headerlink\" title=\"16.2 默认配置文件\"></a>16.2 默认配置文件</h2><h3 id=\"16-2-1-Spring-Boot-配置加载顺序\"><a href=\"#16-2-1-Spring-Boot-配置加载顺序\" class=\"headerlink\" title=\"16.2.1 Spring Boot 配置加载顺序\"></a>16.2.1 Spring Boot 配置加载顺序</h3><p><strong>以下是常用的 Spring Boot 配置形式及其加载顺序（优先级由高到低）：</strong></p>\n<ol>\n<li><strong>命令行参数</strong><br>Spring Boot 中的所有配置，都可以通过命令行参数进行指定，其配置形式如下:<br><code>java -jar &#123;Jar文件名&#125; --&#123;参数1&#125;=&#123;参数值1&#125; --&#123;参数2&#125;=&#123;参数值2&#125;</code><br><code>java -jar springbootdemo-0.0.1-SNAPSHOT.jar --server.port=8081 --server.servlet.context-path=/bcb</code><ul>\n<li><strong><code>--server.port</code>：指定服务器端口号</strong></li>\n<li><strong><code>--server.servlet.context-path</code>：指定上下文路径（项目的访问路径）</strong></li>\n</ul>\n</li>\n<li><strong>来自 java:comp&#x2F;env 的 JNDI 属性</strong></li>\n<li><strong>Java 系统属性（System.getProperties()）</strong></li>\n<li><strong>操作系统环境变量</strong></li>\n<li><em><em>RandomValuePropertySource 配置的 random.</em> 属性值</em>*</li>\n<li><strong>配置文件（YAML 文件、Properties 文件）</strong></li>\n<li><strong>@Configuration 注解类上的 @PropertySource 指定的配置文件</strong></li>\n<li><strong>通过 SpringApplication.setDefaultProperties 指定的默认属性</strong></li>\n</ol>\n<p><strong>以上所有形式的配置都会被加载，当存在相同配置内容时，高优先级的配置会覆盖低优先级的配置；存在不同的配置内容时，高优先级和低优先级的配置内容取并集，共同生效，形成互补配置</strong></p>\n<h3 id=\"16-2-2-配置文件查找位置\"><a href=\"#16-2-2-配置文件查找位置\" class=\"headerlink\" title=\"16.2.2 配置文件查找位置\"></a>16.2.2 配置文件查找位置</h3><ol>\n<li>classpath 根路径</li>\n<li>classpath 根路径下config目录</li>\n<li>jar包当前目录</li>\n<li>jar包当前目录的config目录</li>\n<li>&#x2F;config子目录的直接子目录</li>\n</ol>\n<h2 id=\"16-3-配置文件加载顺序\"><a href=\"#16-3-配置文件加载顺序\" class=\"headerlink\" title=\"16.3 配置文件加载顺序\"></a>16.3 配置文件加载顺序</h2><p><strong>根目录 config 目录下的子文件夹 &gt; 根目录 config 目录下 &gt; 根目录下 &gt; classpath 目录下的 config 目录下 &gt; classpath 目录下</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200623.png\"></p>\n<ol>\n<li>当前 jar 包内部的 application.properties 和 application.yml</li>\n<li>当前 jar 包内部的application-{profile}.properties 和 application-{profile}.yml</li>\n<li>引用的外部 jar 包的 application.properties 和 application.yml</li>\n<li>引用的外部 jar 包的 application-{profile}.properties 和 application-{profile}.yml</li>\n</ol>\n<p><strong>指定环境优先，外部优先，后面的可以覆盖前面的同名配置项，同一位置下，Properties 文件优先级高于 YAML 文件</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200636.png\"></p>\n<ul>\n<li>&#x2F;myBoot：表示 JAR 包所在目录，目录名称自定义</li>\n<li>&#x2F;childDir：表示 JAR 包所在目录下 config 目录的子目录，目录名自定义</li>\n<li>JAR：表示 Spring Boot 项目打包生成的 JAR</li>\n<li>其余带有 “&#x2F;” 标识的目录的目录名称均不能修改</li>\n<li>红色数字：表示该配置文件的优先级，数字越小优先级越高</li>\n</ul>\n<p><strong>这些配置文件的优先级顺序，遵循以下规则：</strong></p>\n<ol>\n<li>先加载 JAR 包外的配置文件，再加载 JAR 包内的配置文件</li>\n<li>先加载 config 目录内的配置文件，再加载 config 目录外的配置文件</li>\n<li>先加载 config 子目录下的配置文件，再加载 config 目录下的配置文件<br>4。 先加载 appliction-{profile}.properties&#x2F;yml，再加载 application.properties&#x2F;yml</li>\n<li>先加载 .properties 文件，再加载 .yml 文件</li>\n</ol>\n<h1 id=\"17-自定义-Starter\"><a href=\"#17-自定义-Starter\" class=\"headerlink\" title=\"17. 自定义 Starter\"></a>17. 自定义 Starter</h1><p><strong>功能：传入姓名 ，自动配置前缀和后缀</strong></p>\n<h2 id=\"17-1-创建一个-Starter-项目\"><a href=\"#17-1-创建一个-Starter-项目\" class=\"headerlink\" title=\"17.1 创建一个 Starter 项目\"></a>17.1 创建一个 Starter 项目</h2><p><strong>创建一个空项目，加入一个 Maven 模块，作为 Starter ，再加入一个 Springboot 模块，作为 Starter-autoconfigure</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200649.png\"></p>\n<h2 id=\"17-2-Starter-Autoconfigure\"><a href=\"#17-2-Starter-Autoconfigure\" class=\"headerlink\" title=\"17.2 Starter-Autoconfigure\"></a>17.2 Starter-Autoconfigure</h2><ol>\n<li><strong>POM 配置</strong><br>将其他所有依赖和插件删掉，只留下 web-starter<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;properties&gt;\n\t&lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n&lt;&#x2F;properties&gt;\n&lt;dependencies&gt;\n\t&lt;dependency&gt;\n\t\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n\t&lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre></li>\n<li><strong>Bean</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(&quot;fan&quot;)\npublic class HelloProperties &#123;\n    private String prefix;\n    private String suffix;\n&#125;</code></pre></li>\n<li><strong>Service</strong><br><strong>无需添加进容器，即不需要 @Service 注解，注入 Bean</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloService &#123;\n    @Autowired\n    HelloProperties helloProperties;\n    public String sayHello(String name)&#123;\n        return helloProperties.getPrefix() + &quot;: &quot; + name + &quot;》&quot; + helloProperties.getSuffix();\n    &#125;\n&#125;</code></pre></li>\n<li><strong>自动配置类 AutoConfiguration</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloAutoConfiguration &#123;\n    @ConditionalOnMissingBean(HelloService.class)\n    @Bean\n    public HelloService helloService()&#123;\n        HelloService helloService &#x3D; new HelloService();\n        return helloService;\n    &#125;\n&#125;</code></pre></li>\n<li><strong>创建 META-INF 下的 spring.factories</strong><br><img src=\"http://img.fan223.cn/2023/04/20230420200702.png\"><br><strong>加入自动配置类</strong><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"># Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\\nfan.auto.HelloAutoConfiguraion\t\t\t&#x2F;&#x2F; 自动配置类</code></pre></li>\n</ol>\n<h2 id=\"17-3-Starter\"><a href=\"#17-3-Starter\" class=\"headerlink\" title=\"17.3 Starter\"></a>17.3 Starter</h2><ol>\n<li><strong>引入编写好的 AutoConfiguration</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;fan-spring-boot-starter-autoconfigure&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre></li>\n<li><strong>设置编码格式</strong><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;properties&gt;\n\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;\n&lt;&#x2F;properties&gt;</code></pre></li>\n</ol>\n<h2 id=\"17-4-加载进本地仓库\"><a href=\"#17-4-加载进本地仓库\" class=\"headerlink\" title=\"17.4 加载进本地仓库\"></a>17.4 加载进本地仓库</h2><p><strong>先将 Starter-autoconfigure 执行 clean ，然后 install ，然后再将 Starter 执行 clean ，install，加载进本地仓库</strong></p>\n<h2 id=\"17-5-使用自定义-Starter\"><a href=\"#17-5-使用自定义-Starter\" class=\"headerlink\" title=\"17.5 使用自定义 Starter\"></a>17.5 使用自定义 Starter</h2><h3 id=\"17-5-1-引入自定义-Starter\"><a href=\"#17-5-1-引入自定义-Starter\" class=\"headerlink\" title=\"17.5.1 引入自定义 Starter\"></a>17.5.1 引入自定义 Starter</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t\t&lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;fan-spring-boot-starter&lt;&#x2F;artifactId&gt;\n\t\t&lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"17-5-2-Controller\"><a href=\"#17-5-2-Controller\" class=\"headerlink\" title=\"17.5.2 Controller\"></a>17.5.2 Controller</h3><p><strong>将自定义 Starter 中的 Service 注入进来，调用 Starter 的方法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class TestStarterController &#123;\n    @Autowired\n    HelloService helloService;\n    @ResponseBody\n    @GetMapping(&quot;&#x2F;teststart&quot;)\n    public String sayHello()&#123;\n        String sayHello &#x3D; helloService.sayHello(&quot;张三&quot;);\n        return sayHello;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"17-5-3-配置项\"><a href=\"#17-5-3-配置项\" class=\"headerlink\" title=\"17.5.3 配置项\"></a>17.5.3 配置项</h3><p><strong>使用 Starter-Autoconfiguration 自动配置的属性</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420200713.png\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">fan:\n  prefix: fan\n  suffix: auto</code></pre>\n\n<h3 id=\"17-5-4-成功返回\"><a href=\"#17-5-4-成功返回\" class=\"headerlink\" title=\"17.5.4 成功返回\"></a>17.5.4 成功返回</h3><p><img src=\"http://img.fan223.cn/2023/04/20230420200723.png\"></p>\n<h3 id=\"17-5-5-自定义-Config\"><a href=\"#17-5-5-自定义-Config\" class=\"headerlink\" title=\"17.5.5 自定义 Config\"></a>17.5.5 自定义 Config</h3><p><strong>将会使用我们自定义的 Config 来进行装配</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyHelloConfig &#123;\n    @Bean\n    public HelloService helloService()&#123;\n        HelloService helloService &#x3D; new HelloService();\n        return helloService;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"18-Profile-功能\"><a href=\"#18-Profile-功能\" class=\"headerlink\" title=\"18. Profile 功能\"></a>18. Profile 功能</h1><h2 id=\"18-1-application-profile-功能\"><a href=\"#18-1-application-profile-功能\" class=\"headerlink\" title=\"18.1 application-profile 功能\"></a>18.1 application-profile 功能</h2><p>在 src&#x2F;main&#x2F;resources 下添加 4 个配置文件：</p>\n<ul>\n<li><code>application.yml</code>：主配置文件</li>\n<li><code>application-dev.yml</code>：开发环境配置文件</li>\n<li><code>application-test.yml</code>：测试环境配置文件</li>\n<li><code>application-prod.yml</code>：生产环境配置文件</li>\n</ul>\n<p><strong>默认配置文件  application.yml；任何时候都会加载，指定环境配置文件  application-prod.yml &#x2F; application-test.yml &#x2F; application-dev.yml</strong><br><strong>激活指定环境：</strong></p>\n<ul>\n<li><strong>配置文件激活</strong><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  profiles:\n    active: prod\n#    active: test</code></pre></li>\n<li><strong>命令行激活：(打包成JAR文件后，通过命令行激活）</strong><br><code>java -jar xxx.jar --spring.profiles.active=prod  --person.name=haha</code><br><strong>修改配置文件的任意值，命令行优先</strong></li>\n<li><strong>虚拟机参数激活（打包成JAR文件后，通过虚拟机参数来激活）</strong><br><code>java -Dspring.profiles.active=prod -jar xxx.jar</code></li>\n</ul>\n<p><strong>默认配置与环境配置同时生效，同名配置项，profile 配置优先</strong></p>\n<h2 id=\"18-2-Profile-条件装配功能\"><a href=\"#18-2-Profile-条件装配功能\" class=\"headerlink\" title=\"18.2 @Profile 条件装配功能\"></a>18.2 @Profile 条件装配功能</h2><p><strong>指定仅在某个 profile 下执行</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Profile(&quot;prod&quot;)\npublic class ProductionConfiguration &#123;\n    &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Profile(&quot;test&quot;)\npublic class ProductionConfiguration &#123;\n    &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<h2 id=\"18-3-Profile-分组\"><a href=\"#18-3-Profile-分组\" class=\"headerlink\" title=\"18.3 Profile 分组\"></a>18.3 Profile 分组</h2><p><strong>指定 profile 分组，同时加载多个 profile ，可以分别指定值，如：一个指定 name，一个指定 age ，然后同时加载进来</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n\tprofiles:\n  \tactive: production\n\t\tgroup:\n    \tproduction[0]: prodname\n    \tproduction[1]: prodage</code></pre>\n\n<h2 id=\"18-4-多-Profile-文档块模式\"><a href=\"#18-4-多-Profile-文档块模式\" class=\"headerlink\" title=\"18.4 多 Profile 文档块模式\"></a>18.4 多 Profile 文档块模式</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#默认配置\nserver:\n  port: 8080\n#切换配置\nspring:\n  profiles:\n    active: test\n---\n#开发环境\nserver:\n  port: 8081\nspring:\n  config:\n    activate:\n      on-profile: dev\n---\n#测试环境\nserver:\n  port: 8082\nspring:\n  config:\n    activate:\n      on-profile: test\n---\n#生产环境\nserver:\n  port: 8083\nspring:\n  config:\n    activate:\n      on-profile: prod</code></pre>\n","feature":false,"text":"1. 概念1.1 Spring Boot 优点 Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”....","link":"","photos":[],"count_time":{"symbolsCount":"131k","symbolsTime":"1:59"},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Spring-Boot-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">1.1 Spring Boot 优点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-Spring-Boot-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">1.2 Spring Boot 缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.3 微服务概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E5%88%86%E5%B8%83%E5%BC%8F\"><span class=\"toc-text\">1.4 分布式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-%E4%BA%91%E5%8E%9F%E7%94%9F%EF%BC%88Cloud-Native%EF%BC%89\"><span class=\"toc-text\">1.5 云原生（Cloud Native）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 基础使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-POM-%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1.1 POM 依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%88%9B%E5%BB%BA%E4%B8%BB%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">1.2 创建主程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-application-yml\"><span class=\"toc-text\">1.3 配置文件 application.yml</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">1.4 控制器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">1.6 启动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-%E7%AE%80%E5%8C%96%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">1.7 简化部署</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2. 自动配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.1 依赖管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%BC%80%E5%8F%91%E5%AF%BC%E5%85%A5-starter-%E5%9C%BA%E6%99%AF%E5%90%AF%E5%8A%A8%E5%99%A8\"><span class=\"toc-text\">2.2 开发导入 starter 场景启动器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E6%97%A0%E9%9C%80%E5%85%B3%E6%B3%A8%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%89%88%E6%9C%AC%E4%BB%B2%E8%A3%81\"><span class=\"toc-text\">2.3 无需关注版本号，自动版本仲裁</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.4 自动配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.5 自动配置原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-1-%E5%BC%95%E5%AF%BC%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">2.5.1 引导加载自动配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-2-%E6%8C%89%E9%9C%80%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.5.2 按需开启自动配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-3-%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.5.3 修改默认配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">2.6 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">3. 注解与配置绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-Configuration-proxyBeanMethods\"><span class=\"toc-text\">3.1 @Configuration(proxyBeanMethods)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-Conditional\"><span class=\"toc-text\">3.2 @Conditional</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-Import%E3%80%81-ImportResource\"><span class=\"toc-text\">3.2 @Import、@ImportResource</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-Bean\"><span class=\"toc-text\">3.3 @Bean</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">3.4 配置绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">3.5 配置绑定提示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-Value-%E4%B8%8E-ConfigurationProperties-%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">3.6 @Value 与 @ ConfigurationProperties 对比</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-PropertySource\"><span class=\"toc-text\">3.7 @PropertySource</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4. 基本配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-SpringMVC-%E7%9A%84%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%A6%82%E8%A7%88\"><span class=\"toc-text\">4.1 SpringMVC 的自动配置概览</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">4.2 设置端口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">4.3 静态资源访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-1-%E6%94%B9%E5%8F%98%E9%BB%98%E8%AE%A4%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">4.3.1 改变默认的静态资源路径</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-2-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%89%8D%E7%BC%80\"><span class=\"toc-text\">4.3.2 静态资源访问前缀</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-3-webjar\"><span class=\"toc-text\">4.3.3 webjar</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">4.4 浏览器访问路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E6%AC%A2%E8%BF%8E%E9%A1%B5%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">4.5 欢迎页支持</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-%E8%87%AA%E5%AE%9A%E4%B9%89-Favicon\"><span class=\"toc-text\">4.6 自定义 Favicon</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-7-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4.7 静态资源配置原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-1-%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">4.7.1 配置类只有一个有参构造器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-2-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A7%84%E5%88%99\"><span class=\"toc-text\">4.7.2 资源处理的默认规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A6%81%E7%94%A8%E6%89%80%E6%9C%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%A7%84%E5%88%99\"><span class=\"toc-text\">禁用所有静态资源规则</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-3-%E6%AC%A2%E8%BF%8E%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86%E8%A7%84%E5%88%99\"><span class=\"toc-text\">4.7.3 欢迎页的处理规则</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-8-%E8%AE%BE%E7%BD%AE-Rest-%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.8 设置 Rest 响应方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-1-%E6%BF%80%E6%B4%BB-Rest-%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.8.1 激活 Rest 响应方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-2-%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E7%B1%BB%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%80%BC\"><span class=\"toc-text\">4.8.2 设置配置类，自定义值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-3-HTML-%E8%AE%BE%E7%BD%AE%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%AD%A3%E5%B8%B8-GET-%E5%92%8C-POST-%E6%8F%90%E4%BA%A4%E4%B8%8D%E6%94%B9%E5%8F%98\"><span class=\"toc-text\">4.8.3 HTML 设置表单提交响应方式，正常 GET 和 POST 提交不改变</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-4-RestController-%E7%B1%BB\"><span class=\"toc-text\">4.8.4 RestController 类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-9-%E8%AE%BE%E7%BD%AE-Bean-%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">4.9 设置 Bean 的值</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E3%80%81%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86\"><span class=\"toc-text\">5. 请求参数处理、数据响应与内容协商</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">5.1 请求映射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-1-REST-%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.1.1 REST 使用与原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-2-%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.1.2 请求映射原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-Param-%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.2 获取请求参数 Param 的值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-PathVariable\"><span class=\"toc-text\">5.2.1 @PathVariable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2-RequestHeader\"><span class=\"toc-text\">5.2.2 @RequestHeader</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-3-CookieValue\"><span class=\"toc-text\">5.2.3 @CookieValue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-4-RequestParam\"><span class=\"toc-text\">5.2.4 @RequestParam</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-%E8%8E%B7%E5%8F%96-Request-%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.3 获取 Request 域中的值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E8%B7%B3%E8%BD%AC-forward-x2F-xxx\"><span class=\"toc-text\">5.3.1 跳转 forward:&#x2F;xxx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-RequestAttribute\"><span class=\"toc-text\">5.3.2 @RequestAttribute</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-3-request-%E8%AF%B7%E6%B1%82%E5%9F%9F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5.3.3 request 请求域对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-4-%E7%9F%A9%E9%98%B5%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">5.4 矩阵变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%81%87%E5%A6%82-Cookie-%E8%A2%AB%E7%A6%81%E7%94%A8%E4%BA%86%EF%BC%8CSession-%E9%87%8C%E7%9A%84%E5%86%85%E5%AE%B9%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">假如 Cookie 被禁用了，Session 里的内容怎么使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-1-%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%BC%80%E5%90%AF%E7%9F%A9%E9%98%B5%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">5.4.1 配置类开启矩阵变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-2-%E8%8E%B7%E5%8F%96%E7%9F%A9%E9%98%B5%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">5.4.2  获取矩阵变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-5-Servlet-API\"><span class=\"toc-text\">5.5 Servlet API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-6-%E5%A4%8D%E6%9D%82%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">5.6 复杂参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-6-POJO-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">5.6 POJO 数据绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-1-%E6%99%AE%E9%80%9A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">5.6.1 普通数据绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">5.6.2 自定义数据绑定</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-7-%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.7 参数处理原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-7-1-HandlerAdapter\"><span class=\"toc-text\">5.7.1 HandlerAdapter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-7-2-%E6%89%A7%E8%A1%8C%E7%9B%AE%E6%A0%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5.7.2 执行目标方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-7-3-%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8-HandlerMethodArgumentResolver\"><span class=\"toc-text\">5.7.3 参数解析器 HandlerMethodArgumentResolver</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-4-%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">5.6.4 返回值处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-5-%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E7%9B%AE%E6%A0%87%E6%96%B9%E6%B3%95%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.6.5 如何确定目标方法每一个参数的值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-5-1-%E6%8C%A8%E4%B8%AA%E5%88%A4%E6%96%AD%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8%E9%82%A3%E4%B8%AA%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%90%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">5.6.5.1 挨个判断所有参数解析器那个支持解析这个参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-5-2-%E8%A7%A3%E6%9E%90%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.6.5.2 解析这个参数的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-5-3-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0-%E5%B0%81%E8%A3%85-POJO\"><span class=\"toc-text\">5.6.5.3 自定义类型参数 封装 POJO</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-6-%E7%9B%AE%E6%A0%87%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%88%90\"><span class=\"toc-text\">5.6.6 目标方法执行完成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-7-%E5%A4%84%E7%90%86%E6%B4%BE%E5%8F%91%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">5.6.7 处理派发结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-8-%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5.8 响应处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-8-1-%E5%93%8D%E5%BA%94-JSON\"><span class=\"toc-text\">5.8.1 响应 JSON</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-1-1-%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">5.8.1.1 返回值解析器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-1-2-%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.8.1.2 返回值解析器原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-1-3-SpringMVC-%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">5.8.1.3 SpringMVC 支持哪些返回值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-1-4-HTTPMessageConverter-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.8.1.4 HTTPMessageConverter 原理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-8-2-%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86\"><span class=\"toc-text\">5.8.2 内容协商</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-8-3-%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.8.3 内容协商原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-8-4-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">5.8.4 自定义数据格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-4-1-%E5%85%88%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-Converter%EF%BC%8C%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">5.8.4.1 先定义一个 Converter，设置自定义格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-4-2-%E5%9C%A8%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84-WebMvcConfigurer-%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E9%A2%9D%E5%A4%96%E7%9A%84MessageConverters\"><span class=\"toc-text\">5.8.4.2 在配置类的 WebMvcConfigurer 中配置一个额外的MessageConverters</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-4-3-%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">5.8.4.3 设置请求参数策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-4-4-%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">5.8.4.4 添加请求头策略</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-Thymeleaf-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">6. Thymeleaf 模板引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">6.1 引入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-1-%E5%BC%95%E5%85%A5-Starter\"><span class=\"toc-text\">6.1.1 引入 Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-2-%E5%B7%B2%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">6.1.2 已自动配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-3-%E5%9C%A8-HTML-%E9%A1%B5%E9%9D%A2%E5%BC%95%E5%85%A5-Thymeleaf\"><span class=\"toc-text\">6.1.3 在 HTML 页面引入 Thymeleaf</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">6.2 使用语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-1-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">6.2.1 条件运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-2-%E8%BF%AD%E4%BB%A3\"><span class=\"toc-text\">6.2.2 迭代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-3-%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">6.2.3 链接 @</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">7. 拦截器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-%E5%88%9B%E5%BB%BA%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%8C%E5%AE%9E%E7%8E%B0-HandlerInter-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">7.1 创建拦截器，实现 HandlerInter 接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">7.2 配置拦截器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-3-%E8%BF%87%E6%BB%A4%E5%99%A8-Filter-%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8-Inteceptor-%E8%AF%A6%E8%A7%A3%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">7.3 过滤器 Filter 和拦截器 Inteceptor 详解及使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-1-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">7.3.1 过滤器和拦截器的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-2-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">7.3.2 应用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA%E5%99%A8%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">拦截器应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">过滤器应用场景</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">8. 文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-HTML-%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">8.1 HTML 页面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6\"><span class=\"toc-text\">8.2 设置文件大小限制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-Controller-%E7%B1%BB\"><span class=\"toc-text\">8.3 Controller 类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">9. 异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">9.1 自定义异常页面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-2-%E7%95%8C%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">9.2 界面优先级</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-3-%E9%A1%B5%E9%9D%A2%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">9.3 页面错误信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-4-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">9.4 自定义全局异常处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB\"><span class=\"toc-text\">9.5 自定义异常类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-6-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">9.6 自定义异常解析器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-7-%E5%AE%9A%E5%88%B6%E9%94%99%E8%AF%AF%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">9.7 定制错误数据</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-Web-%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">10. Web 原生组件注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E5%8E%9F%E7%94%9F-API\"><span class=\"toc-text\">10.1 原生 API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-1-Servlet\"><span class=\"toc-text\">10.1.1 Servlet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-2-Filter-%E5%92%8C-Listener\"><span class=\"toc-text\">10.1.2 Filter 和 Listener</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-Spring-Boot-%E7%9A%84-RegistrationBean\"><span class=\"toc-text\">10.2 Spring Boot 的 RegistrationBean</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-1-Servlet\"><span class=\"toc-text\">10.2.1 Servlet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-2-Filter\"><span class=\"toc-text\">10.2.2 Filter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-3-Listener\"><span class=\"toc-text\">10.2.3 Listener</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-3-%E5%88%87%E6%8D%A2-Web-%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">10.3 切换 Web 服务器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-4-%E5%AE%9A%E5%88%B6-Servlet-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">10.4 定制 Servlet 容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-5-%E5%AE%9A%E5%88%B6%E5%8C%96%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">10.5 定制化原理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-JDBC-%E5%AF%BC%E5%85%A5%E4%B8%8E-Druid-%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">11. JDBC 导入与 Druid 数据源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-1-JDBC-%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">11.1 JDBC 导入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-1-1-%E5%AF%BC%E5%85%A5-Starter\"><span class=\"toc-text\">11.1.1 导入 Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-1-2-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">11.1.2 导入数据库驱动</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-2-JdbcTemplate\"><span class=\"toc-text\">11.2 JdbcTemplate</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-3-Druid-%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">11.3 Druid 数据源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-1-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">11.3.1 自定义方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-1-1-%E5%BC%95%E5%85%A5-Druid-%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">11.3.1.1 引入 Druid 依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-1-2-%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">11.3.1.2 创建配置类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-1-3-%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">11.3.1.3 监控统计功能</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-2-%E4%BD%BF%E7%94%A8%E5%AE%98%E6%96%B9-starter-%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">11.3.2 使用官方 starter 方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-2-1-%E5%BC%95%E5%85%A5-druid-starter\"><span class=\"toc-text\">11.3.2.1 引入 druid-starter</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-2-2-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">11.3.2.2 自动配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-3-2-3-%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">11.3.2.3 配置项</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-%E6%95%B4%E5%90%88-Mybatis-%E5%92%8C-Mybatis-Plus\"><span class=\"toc-text\">12. 整合 Mybatis 和 Mybatis-Plus</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-1-%E6%95%B4%E5%90%88-Mybatis\"><span class=\"toc-text\">12.1 整合 Mybatis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1-1-%E5%BC%95%E5%85%A5-Starter\"><span class=\"toc-text\">12.1.1 引入 Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1-2-%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">12.1.2 配置模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1-3-%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">12.1.3 配置项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-2-%E6%95%B4%E5%90%88-Mybatis-Plus\"><span class=\"toc-text\">12.2 整合 Mybatis-Plus</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2-1-%E5%BC%95%E5%85%A5-Starter\"><span class=\"toc-text\">12.2.1 引入 Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2-2-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">12.2.2 自动配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-3-%E6%95%B4%E5%90%88-Mybatis-Plus-%E7%9A%84-CRUD\"><span class=\"toc-text\">12.3 整合 Mybatis-Plus 的 CRUD</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#13-%E6%95%B4%E5%90%88-NoSQL%EF%BC%88Redis%EF%BC%89\"><span class=\"toc-text\">13. 整合 NoSQL（Redis）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-1-%E5%BC%95%E5%85%A5-Starter\"><span class=\"toc-text\">13.1 引入 Starter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-2-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">13.2 自动配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-3-%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">13.3 配置项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-4-%E5%88%87%E6%8D%A2%E8%87%B3-Jedis\"><span class=\"toc-text\">13.4 切换至 Jedis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-5-Controller\"><span class=\"toc-text\">13.5 Controller</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#14-Junit5-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">14. Junit5 单元测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-1-%E5%BC%95%E5%85%A5-Starter\"><span class=\"toc-text\">14.1 引入 Starter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-2-%E9%80%89%E6%8B%A9%E5%BC%95%E5%85%A5-JUnit-Vintage-%E6%B5%8B%E8%AF%95%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">14.2 选择引入 JUnit Vintage 测试引擎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-3-JUnit5-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">14.3 JUnit5 常用注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-4-%E6%96%AD%E8%A8%80%EF%BC%88assertions%EF%BC%89\"><span class=\"toc-text\">14.4 断言（assertions）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-1-%E7%AE%80%E5%8D%95%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">14.1.1 简单断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-2-%E6%95%B0%E7%BB%84%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">14.1.2 数组断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-3-%E7%BB%84%E5%90%88%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">14.1.3 组合断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-4-%E5%BC%82%E5%B8%B8%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">14.1.4 异常断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-5-%E8%B6%85%E6%97%B6%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">14.1.5 超时断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-5-%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5\"><span class=\"toc-text\">14.1.5 快速失败</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-5-%E5%89%8D%E7%BD%AE%E6%9D%A1%E4%BB%B6%EF%BC%88assumptions%EF%BC%89\"><span class=\"toc-text\">14.5 前置条件（assumptions）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-6-%E5%B5%8C%E5%A5%97%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">14.6 嵌套测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-7-%E5%8F%82%E6%95%B0%E5%8C%96%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">14.7 参数化测试</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#15-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">15. 指标监控</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-1-SpringBoot-Actuator\"><span class=\"toc-text\">15.1 SpringBoot Actuator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-1-1-%E5%BC%95%E5%85%A5-Starter\"><span class=\"toc-text\">15.1.1 引入 Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-1-2-%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">15.1.2 配置项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9A%B4%E9%9C%B2%E8%A7%84%E5%88%99\"><span class=\"toc-text\">暴露规则</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%90%AF%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">开启方式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-1-3-%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">15.1.3 访问</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-2-Actuator-Endpoint\"><span class=\"toc-text\">15.2 Actuator Endpoint</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-1-Health-Endpoint\"><span class=\"toc-text\">15.2.1 Health Endpoint</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-2-Metrics-Endpoint\"><span class=\"toc-text\">15.2.2 Metrics Endpoint</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-3-%E5%AE%9A%E5%88%B6-info-%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">15.2.3 定制 info 信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-4-%E5%AE%9A%E5%88%B6-Endpoint\"><span class=\"toc-text\">15.2.4 定制 Endpoint</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-3-%E5%8F%AF%E8%A7%86%E5%8C%96\"><span class=\"toc-text\">15.3 可视化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-3-1-Server\"><span class=\"toc-text\">15.3.1 Server</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-3-2-Client\"><span class=\"toc-text\">15.3.2 Client</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#16-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE%E5%92%8C%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">16. 外部化配置和默认配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-1-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">16.1 外部化配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-1-1-%E9%85%8D%E7%BD%AE%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">16.1.1 配置外部配置文件的优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-1-2-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">16.1.2 配置虚拟机参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-1-3-%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%BA%90\"><span class=\"toc-text\">16.1.3 外部配置源</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-2-%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">16.2 默认配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-2-1-Spring-Boot-%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">16.2.1 Spring Boot 配置加载顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-2-2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">16.2.2 配置文件查找位置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">16.3 配置文件加载顺序</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#17-%E8%87%AA%E5%AE%9A%E4%B9%89-Starter\"><span class=\"toc-text\">17. 自定义 Starter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-1-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Starter-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">17.1 创建一个 Starter 项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-2-Starter-Autoconfigure\"><span class=\"toc-text\">17.2 Starter-Autoconfigure</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-3-Starter\"><span class=\"toc-text\">17.3 Starter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-4-%E5%8A%A0%E8%BD%BD%E8%BF%9B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">17.4 加载进本地仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-5-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89-Starter\"><span class=\"toc-text\">17.5 使用自定义 Starter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-5-1-%E5%BC%95%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89-Starter\"><span class=\"toc-text\">17.5.1 引入自定义 Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-5-2-Controller\"><span class=\"toc-text\">17.5.2 Controller</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-5-3-%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">17.5.3 配置项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-5-4-%E6%88%90%E5%8A%9F%E8%BF%94%E5%9B%9E\"><span class=\"toc-text\">17.5.4 成功返回</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-5-5-%E8%87%AA%E5%AE%9A%E4%B9%89-Config\"><span class=\"toc-text\">17.5.5 自定义 Config</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#18-Profile-%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">18. Profile 功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-1-application-profile-%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">18.1 application-profile 功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-2-Profile-%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">18.2 @Profile 条件装配功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-3-Profile-%E5%88%86%E7%BB%84\"><span class=\"toc-text\">18.3 Profile 分组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-4-%E5%A4%9A-Profile-%E6%96%87%E6%A1%A3%E5%9D%97%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">18.4 多 Profile 文档块模式</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"PyCharm 下载安装及配置使用详细图文教程","uid":"648d078e3655921f437d23e88a3a35f2","slug":"BlogRepository/开发工具及环境/PyCharm 下载安装及配置使用详细图文教程","date":"2022-06-30T15:32:39.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/开发工具及环境/PyCharm 下载安装及配置使用详细图文教程.json","keywords":null,"cover":"https://cover.png","text":"1. 下载1、进入官网：https://www.jetbrains.com/pycharm，点击 Download，下载 2、选择下载专业版（付费）或社区版（免费），这里选择下载专业版 3、下载完成，得到安装程序 2. 安装双击应用程序，进行安装，Next 选择安装路径，Next...","link":"","photos":[],"count_time":{"symbolsCount":291,"symbolsTime":"1 mins."},"categories":[{"name":"开发工具及环境","slug":"开发工具及环境","count":11,"path":"api/categories/开发工具及环境.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"},{"name":"PyCharm","slug":"PyCharm","count":1,"path":"api/tags/PyCharm.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"SpringMVC 总结","uid":"153deb9c806beaeb0b25c611326c4f25","slug":"BlogRepository/Spring/SpringMVC 总结","date":"2022-06-10T18:22:45.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/Spring/SpringMVC 总结.json","keywords":null,"cover":"https://cover.png","text":"1. 配置1.1 MVC 概念MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分 M：Model，模型层，指工程中的 JavaBean，它负责数据逻辑（业务规则）的处理和实现数据操作（即在数据库中存取数据）JavaBean 分为两类： 一类称为实体类 Bean：专门存...","link":"","photos":[],"count_time":{"symbolsCount":"58k","symbolsTime":"53 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}