{"title":"Java Integer.toBinaryString() 方法源码及原理解析（进制转换、位运算）","uid":"f836b7c416a11f5069436de43f7aa730","slug":"BlogRepository/Java/Java Integer.toBinaryString() 方法源码及原理解析（进制转换、位运算）","date":"2022-12-27T09:31:38.000Z","updated":"2023-04-20T13:57:44.601Z","comments":true,"path":"api/articles/BlogRepository/Java/Java Integer.toBinaryString() 方法源码及原理解析（进制转换、位运算）.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-使用及源码概览\"><a href=\"#1-使用及源码概览\" class=\"headerlink\" title=\"1. 使用及源码概览\"></a>1. 使用及源码概览</h1><p><code>Integer.toBinaryString()</code> 方法用于将十进制整数转为二进制，如下例：</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419104435.png\"></p>\n<p>完整源码调用如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static String toBinaryString(int i) &#123;\n        return toUnsignedString0(i, 1);\n&#125;\n\nprivate static String toUnsignedString0(int val, int shift) &#123;\n        &#x2F;&#x2F; assert shift &gt; 0 &amp;&amp; shift &lt;&#x3D;5 : &quot;Illegal shift value&quot;;\n        int mag &#x3D; Integer.SIZE - Integer.numberOfLeadingZeros(val);\n        int chars &#x3D; Math.max(((mag + (shift - 1)) &#x2F; shift), 1);\n        char[] buf &#x3D; new char[chars];\n\n        formatUnsignedInt(val, shift, buf, 0, chars);\n\n        &#x2F;&#x2F; Use special constructor which takes over &quot;buf&quot;.\n        return new String(buf, true);\n&#125;\n\npublic static int numberOfLeadingZeros(int i) &#123;\n        &#x2F;&#x2F; HD, Figure 5-6\n        if (i &#x3D;&#x3D; 0)\n            return 32;\n        int n &#x3D; 1;\n        if (i &gt;&gt;&gt; 16 &#x3D;&#x3D; 0) &#123; n +&#x3D; 16; i &lt;&lt;&#x3D; 16; &#125;\n        if (i &gt;&gt;&gt; 24 &#x3D;&#x3D; 0) &#123; n +&#x3D;  8; i &lt;&lt;&#x3D;  8; &#125;\n        if (i &gt;&gt;&gt; 28 &#x3D;&#x3D; 0) &#123; n +&#x3D;  4; i &lt;&lt;&#x3D;  4; &#125;\n        if (i &gt;&gt;&gt; 30 &#x3D;&#x3D; 0) &#123; n +&#x3D;  2; i &lt;&lt;&#x3D;  2; &#125;\n        n -&#x3D; i &gt;&gt;&gt; 31;\n        return n;\n&#125;\n\nstatic int formatUnsignedInt(int val, int shift, char[] buf, int offset, int len) &#123;\n        int charPos &#x3D; len;\n        int radix &#x3D; 1 &lt;&lt; shift;\n        int mask &#x3D; radix - 1;\n        do &#123;\n            buf[offset + --charPos] &#x3D; Integer.digits[val &amp; mask];\n            val &gt;&gt;&gt;&#x3D; shift;\n        &#125; while (val !&#x3D; 0 &amp;&amp; charPos &gt; 0);\n\n        return charPos;\n&#125;\n\nfinal static char[] digits &#x3D; &#123;\n        &#39;0&#39; , &#39;1&#39; , &#39;2&#39; , &#39;3&#39; , &#39;4&#39; , &#39;5&#39; ,\n        &#39;6&#39; , &#39;7&#39; , &#39;8&#39; , &#39;9&#39; , &#39;a&#39; , &#39;b&#39; ,\n        &#39;c&#39; , &#39;d&#39; , &#39;e&#39; , &#39;f&#39; , &#39;g&#39; , &#39;h&#39; ,\n        &#39;i&#39; , &#39;j&#39; , &#39;k&#39; , &#39;l&#39; , &#39;m&#39; , &#39;n&#39; ,\n        &#39;o&#39; , &#39;p&#39; , &#39;q&#39; , &#39;r&#39; , &#39;s&#39; , &#39;t&#39; ,\n        &#39;u&#39; , &#39;v&#39; , &#39;w&#39; , &#39;x&#39; , &#39;y&#39; , &#39;z&#39;\n&#125;;</code></pre>\n\n<h1 id=\"2-解析\"><a href=\"#2-解析\" class=\"headerlink\" title=\"2. 解析\"></a>2. 解析</h1><h2 id=\"2-1-二进制转换\"><a href=\"#2-1-二进制转换\" class=\"headerlink\" title=\"2.1 二进制转换\"></a>2.1 二进制转换</h2><p>首先，从运算逻辑上了解一下怎么从十进制转换为二进制，一般来说有两种方法，这里只用 8 位来做示范</p>\n<p><strong>1、短除法</strong></p>\n<p>本质上就是不断除 2，直到商为 0 为止，然后将余数倒序输出。例：15，16</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">2| 15                      2| 16  \n  ————                       ————\n  2| 7           1  ^        2| 8             0  ^\n    ————            |          ————              |\n    2| 3         1  |          2| 4           0  |\n      ————          |            ————            |\n      2| 1       1  |            2| 2         0  |\n        ————        |              ————          |\n           0     1  |              2| 1       0  |\n                                     ————        |\n                                        0     1  |</code></pre>\n\n<p>由上，15 的二进制表示为 0000 1111，16 的二进制表示为 0001 0000</p>\n<p><strong>2、按权相加法</strong></p>\n<p>即将二进制数首先写成加权系数展开式，依次与二进制位对应，然后按十进制加法规则求和</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2 的 0 次方是 1     ————– 对应第 1 位<br>2 的 1 次方是 2     ————– 对应第 2 位<br>2 的 2 次方是 4     ————– 对应第 3 位<br>2 的 3 次方是 8     ————– 对应第 4 位<br>2 的 4 次方是 16   ————– 对应第 5 位<br>2 的 5 次方是 32   ————– 对应第 6 位<br>2 的 6 次方是 64   ————– 对应第 7 位<br>……</p></blockquote>\n<p>例：15 &#x3D; 2^3 + 2^2 + 2^1 + 2^0，16 &#x3D; 2^4，即：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">15            16\n0000 0000     0000 0000\n0000 1000     0001 0000\n0000 1100\n0000 1110\n0000 1111</code></pre>\n\n<h2 id=\"2-2-原码、反码、补码\"><a href=\"#2-2-原码、反码、补码\" class=\"headerlink\" title=\"2.2 原码、反码、补码\"></a>2.2 原码、反码、补码</h2><p>然后再了解一下原码、反码和补码的相关知识，同样只用 8 位做示范</p>\n<p><strong>1、原码</strong></p>\n<p>原码，即 2.1 所示的转换为二进制，例：15，原码即为 0000 1111。在 2.1 中只用了正数来举例，这里开始需要区分正数和负数，同时引入符号位的概念。二进制的第一位为符号位，正数为 0，负数为 1，符号位不参与位的转换和运算</p>\n<p>例：-15，原码即为 1000 1111</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>15原码：  0000 1111<br>-15原码：1000 1111</p></blockquote>\n<p><strong>2、反码</strong></p>\n<p>反码，即原码按位取反。这里注意，<strong>正数的反码与原码相同</strong>。例：-15，原码为 1000 1111，符号位不参与转换，按位取反为 1111 0000</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>15反码： 0000 1111，与原码同</p>\n<p>-15原码：1000 1111</p>\n<p>-15反码：1111 0000</p></blockquote>\n<p><strong>3、补码</strong></p>\n<p>补码，即反码加 1，完整说法应为原码取反加1。同样注意，<strong>正数的补码与原码相同</strong>。例：-15，反码为 1111 0000，加 1 为 1111 0001</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>15补码： 0000 1111，与原码同</p>\n<p>-15原码：1000 1111<br>-15反码：1111 0000<br>-15补码：1111 0001</p></blockquote>\n<p><strong>正数的原码、反码、补码相同，正数的二进制表示为二进制原码即可（其实也是补码，相同不需要计算）。而负数的二进制表示为二进制补码</strong>，也就是文章的第一张图片所示示例，如下。由于 int 为 32 位，所以负数显示了一堆 1，正数则是把前面的 0 去掉了</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419104449.png\"></p>\n<h2 id=\"2-3-位运算符\"><a href=\"#2-3-位运算符\" class=\"headerlink\" title=\"2.3 位运算符\"></a>2.3 位运算符</h2><p>再来了解一下位运算的相关知识，同样只用 8 位来示范</p>\n<p><strong>1、<code>&lt;&lt;</code>：按位左移运算符</strong></p>\n<p>将转换后的二进制左移指定的位数，例：15 &lt;&lt; 2，即 0000 1111 &lt;&lt; 2，为 0011 1100，十进制表示为 60。这里后面补的都是 0</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>0000 1111<br>0011 1100</p></blockquote>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419104459.png\"></p>\n<p>注意：这里可以用 1 &lt;&lt; n 来表示 2 的 n 次方，因为其实每左移 1 位，就相当于乘以了一个 2</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419104508.png\"></p>\n<p><strong>2、<code>&gt;&gt;</code>：按位右移运算符</strong></p>\n<p>将转换后的二进制右移指定的位数，例：15 &gt;&gt; 2，即 0000 1111 &gt;&gt; 2，为 0000 0011，十进制表示为 3。这里前面的补位数是带符号的，正数，符号位为 0，则补 0；负数，符号位为 1，则补 1</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>0000 1111<br>0000 0011</p></blockquote>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419104519.png\"></p>\n<p>右移可以变相看成是除 2，这时就存在偶数和奇数的情况。偶数，正数和负数的值是相同的，这里说的值指本身的数值，不带符号；奇数时，负数的值比正数大 1</p>\n<p><strong>3、<code>&gt;&gt;&gt;</code>：按位右移补零操作符</strong></p>\n<p>将转换后的二进制右移指定的位数，移动后的空位以零填充。这里就不区分符号位，因此也叫无符号右移，正数没有影响，因为前面本来就是 0，负数则会改变原本的值大小，例：-15 &gt;&gt;&gt; 2，即 1111 0001 &gt;&gt;&gt; 2，为 0011 1100，这里只用了 8 位来演示，完整 32 位见下图所示，这里前面的 0 被省略了，也可以看到比原来少了两位：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1111 0001<br>0011 1100</p></blockquote>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419104530.png\"></p>\n<p><strong>4、<code>&amp;</code>：如果相对应位都是 1，则结果为 1，否则为 0</strong>，例：15 &amp; 16、3 &amp; 7</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">15: 0000 1111     3: 0000 0011\n16: 0001 0000     7: 0000 0111\n    0000 0000        0000 0011</code></pre>\n\n<p>则 15 &amp; 16 结果为 0，3 &amp; 7 结果为 3</p>\n<h2 id=\"2-4-源码解析\"><a href=\"#2-4-源码解析\" class=\"headerlink\" title=\"2.4 源码解析\"></a>2.4 源码解析</h2><p>1、首先来看调用的顶层方法，这里可以看到就是调用了一个 <code>toUnsignedString0()</code> 的方法，参数 i 即我们传进来需要转换的值，这里的 1，表示的是进制位数，1 即二进制，3 则是 8 进制，4 是 16 进制</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static String toBinaryString(int i) &#123;\n        return toUnsignedString0(i, 1);\n&#125;\n\npublic static String toOctalString(int i) &#123;\n        return toUnsignedString0(i, 3);\n&#125;\n\npublic static String toHexString(int i) &#123;\n        return toUnsignedString0(i, 4);\n&#125;</code></pre>\n\n<p>2、再来看 <code>toUnsignedString0()</code> 方法，这里先调用了一个 <code>Integer.numberOfLeadingZeros()</code> 方法，这个方法主要用来计算二进制表示的高位连续 0 位的数量，然后用 Integer.SIZE（32） 减去这个数量，计算需要表示的字符数组的长度，可以理解为省略了前面的 0。如下例：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>15：0000 0000 0000 0000 0000 0000 0000 1111，原本的表示<br>15：1111，实际的表示</p></blockquote>\n<p>这一步就可以理解为把前面的 0 省略掉了，只保留需要表示的位数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private static String toUnsignedString0(int val, int shift) &#123;\n        &#x2F;&#x2F; assert shift &gt; 0 &amp;&amp; shift &lt;&#x3D;5 : &quot;Illegal shift value&quot;;\n        int mag &#x3D; Integer.SIZE - Integer.numberOfLeadingZeros(val);\n        int chars &#x3D; Math.max(((mag + (shift - 1)) &#x2F; shift), 1);\n        char[] buf &#x3D; new char[chars];\n\n        formatUnsignedInt(val, shift, buf, 0, chars);\n\n        &#x2F;&#x2F; Use special constructor which takes over &quot;buf&quot;.\n        return new String(buf, true);\n&#125;\n\n@Native public static final int SIZE &#x3D; 32;</code></pre>\n\n<p>3、接下来来看 <code>Integer.numberOfLeadingZeros()</code> 的具体实现，这里用了一个简易的二分法，分为多个区间 [16, 24, 28, 30] 来进行判断。这里还剩下 [30, 32] 这个区间，为什么没有算呢？见下面的第 6 步。这里的 n 表示高位连续 0 的数量</p>\n<ol>\n<li>首先判断 i 是否为 0，0 的话则是 32 位的高位连续 0，直接返回 32</li>\n<li>然后判断 i &gt;&gt;&gt; 16 是否为 0，可以理解为先二分判断一半的区间，假如为 0，则表示至少包含 16 个高位连续 0，n 加上 16，然后 i &lt;&lt;&#x3D; 16，将 i 去除 16 位 0 再进行后续判断</li>\n<li>判断 i &gt;&gt;&gt; 24 是否为 0，即判断是否至少包含 8 个高位连续 0，假如为 0，则 n 加上 8，然后 i &lt;&lt;&#x3D; 8，将 i 去除 8 位 0 再进行后续判断</li>\n<li>同上，判断是否至少包含 4 个高位连续 0</li>\n<li>同上，判断是否至少包含 2 个高位连续 0，这里已经为 i &gt;&gt;&gt; 30</li>\n<li>最后，这里还剩下了 [30, 32] 这个长度为 2 的区间，存在四种情况，[00, 01, 10, 11]，在最前面我们已经判断了等于 0 的情况，所以 00 是排除掉的，剩下 [01, 10, 11]，假如是 x1，那么就不需要判断 x 是多少了，因为只需要判断最高连续 0 位；假如是 x0，由于 00 已经排除，则 x 为 1。所以，其实只需要判断一位就足够了，这也是为什么没有算 [30, 32] 这个区间，只到了 31 为止<br>这里先给 n 赋了初始值为 1，先假设默认这一位是 0，然后再通过 <code>n -=  i &gt;&gt;&gt; 31</code>，判断这一位到底是什么，是 0 则 n &#x3D; n - 0，不变；是 1 则 n &#x3D; n - 1，减掉原先赋的默认初始值 1。这里其实就是用这个技巧代替了 <code>if (i &gt;&gt;&gt; 31 == 0) &#123; n += 1; &#125;</code> 的判断，如下第二种写法</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static int numberOfLeadingZeros(int i) &#123;\n        &#x2F;&#x2F; HD, Figure 5-6\n        if (i &#x3D;&#x3D; 0)\n            return 32;\n        int n &#x3D; 1;\n        if (i &gt;&gt;&gt; 16 &#x3D;&#x3D; 0) &#123; n +&#x3D; 16; i &lt;&lt;&#x3D; 16; &#125;\n        if (i &gt;&gt;&gt; 24 &#x3D;&#x3D; 0) &#123; n +&#x3D;  8; i &lt;&lt;&#x3D;  8; &#125;\n        if (i &gt;&gt;&gt; 28 &#x3D;&#x3D; 0) &#123; n +&#x3D;  4; i &lt;&lt;&#x3D;  4; &#125;\n        if (i &gt;&gt;&gt; 30 &#x3D;&#x3D; 0) &#123; n +&#x3D;  2; i &lt;&lt;&#x3D;  2; &#125;\n        n -&#x3D; i &gt;&gt;&gt; 31;\n        return n;\n&#125;\n\npublic static int numberOfLeadingZeros(int i) &#123;\n        &#x2F;&#x2F; HD, Figure 5-6\n        if (i &#x3D;&#x3D; 0)\n            return 32;\n        int n &#x3D; 0;\n        if (i &gt;&gt;&gt; 16 &#x3D;&#x3D; 0) &#123; n +&#x3D; 16; i &lt;&lt;&#x3D; 16; &#125;\n        if (i &gt;&gt;&gt; 24 &#x3D;&#x3D; 0) &#123; n +&#x3D;  8; i &lt;&lt;&#x3D;  8; &#125;\n        if (i &gt;&gt;&gt; 28 &#x3D;&#x3D; 0) &#123; n +&#x3D;  4; i &lt;&lt;&#x3D;  4; &#125;\n        if (i &gt;&gt;&gt; 30 &#x3D;&#x3D; 0) &#123; n +&#x3D;  2; i &lt;&lt;&#x3D;  2; &#125;\n        if (i &gt;&gt;&gt; 31 &#x3D;&#x3D; 0) &#123; n +&#x3D; 1; &#125;\n        return n;\n&#125;</code></pre>\n\n<p>4、再回到 <code>toUnsignedString0()</code> 这个方法，通过调用 <code>numberOfLeadingZeros()</code> 得到高位连续 0 的数量，然后通过 Integer.SIZE 减去这个数量得到需要表示的位数</p>\n<p>然后再通过 <code>Math.max(((mag + (shift - 1)) / shift), 1);</code> 来计算 2&#x2F;8&#x2F;16 进制对应的字符数组的长度，这里的参数 shift 前面提到是用来表示进制位数，1 即二进制，3 则是 8 进制，4 是 16 进制</p>\n<p>得到字符数组长度后创建对应的字符数组，调用 <code>formatUnsignedInt()</code> 来填充数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private static String toUnsignedString0(int val, int shift) &#123;\n        &#x2F;&#x2F; assert shift &gt; 0 &amp;&amp; shift &lt;&#x3D;5 : &quot;Illegal shift value&quot;;\n        int mag &#x3D; Integer.SIZE - Integer.numberOfLeadingZeros(val);\n        int chars &#x3D; Math.max(((mag + (shift - 1)) &#x2F; shift), 1);\n        char[] buf &#x3D; new char[chars];\n\n        formatUnsignedInt(val, shift, buf, 0, chars);\n\n        &#x2F;&#x2F; Use special constructor which takes over &quot;buf&quot;.\n        return new String(buf, true);\n&#125;</code></pre>\n\n<p>5、<code>formatUnsignedInt()</code> 方法如下，参数 val 是需要转换的值；shift 表示进制位数，这里为 1；buf 为创建的字符数组；offset 为偏移量，这里为 0；len 为数组长度。其中第 6 行用到的 <code>Integer.digits</code> 是定义好的包含全部数字和字母的字符数组</p>\n<p>这里其实就是按照对应的位数进行对应填充</p>\n<ol>\n<li><p>将数组长度赋值给 charPos，后续用 charPos 来进行计算</p>\n</li>\n<li><p><code>radix = 1 &lt;&lt; shift</code>，前面说过，1 &lt;&lt; n 其实就是 2 的 n 次方，这里是用来表示进制，二进制则是 2 的 1 次方，八进制是 2 的 3 次方，十六进制是 2 的 4 次方</p>\n</li>\n<li><p>mask 为进制减一，用来后续和 val 做 &amp; 运算，实际就是逐批匹配进制对应的位数。例：shift 为 3，即 8 进制，mask 则为 7</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>8 &#x3D;&#x3D; radix &#x3D; 1 &lt;&lt; 3;<br>7 &#x3D;&#x3D; mask &#x3D; radix - 1;</p></blockquote>\n<p>mask 做 &amp; 运算时，表示为 111，即 3 位二进制表示一位 8 进制</p>\n</li>\n<li><p>val &amp; mask 得到值后，在 digits 数组里去找到对应的索引的字符赋给 buf，即创建的字符数组，注意，这里是倒序存放，对应进制位数的变化，从右往左</p>\n</li>\n<li><p>然后将 val 右移相应的进制位数，循环匹配</p>\n</li>\n<li><p>最后返回填充好的字符数组</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static int formatUnsignedInt(int val, int shift, char[] buf, int offset, int len) &#123;\n        int charPos &#x3D; len;\n        int radix &#x3D; 1 &lt;&lt; shift;\n        int mask &#x3D; radix - 1;\n        do &#123;\n            buf[offset + --charPos] &#x3D; Integer.digits[val &amp; mask];\n            val &gt;&gt;&gt;&#x3D; shift;\n        &#125; while (val !&#x3D; 0 &amp;&amp; charPos &gt; 0);\n\n        return charPos;\n&#125;\n\nfinal static char[] digits &#x3D; &#123;\n        &#39;0&#39; , &#39;1&#39; , &#39;2&#39; , &#39;3&#39; , &#39;4&#39; , &#39;5&#39; ,\n        &#39;6&#39; , &#39;7&#39; , &#39;8&#39; , &#39;9&#39; , &#39;a&#39; , &#39;b&#39; ,\n        &#39;c&#39; , &#39;d&#39; , &#39;e&#39; , &#39;f&#39; , &#39;g&#39; , &#39;h&#39; ,\n        &#39;i&#39; , &#39;j&#39; , &#39;k&#39; , &#39;l&#39; , &#39;m&#39; , &#39;n&#39; ,\n        &#39;o&#39; , &#39;p&#39; , &#39;q&#39; , &#39;r&#39; , &#39;s&#39; , &#39;t&#39; ,\n        &#39;u&#39; , &#39;v&#39; , &#39;w&#39; , &#39;x&#39; , &#39;y&#39; , &#39;z&#39;\n&#125;;</code></pre>\n\n<p>6、再回到 <code>toUnsignedString0()</code> 方法，最后一步则是将字符数组转换为 String 返回，到这里整个流程结束</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private static String toUnsignedString0(int val, int shift) &#123;\n        &#x2F;&#x2F; assert shift &gt; 0 &amp;&amp; shift &lt;&#x3D;5 : &quot;Illegal shift value&quot;;\n        int mag &#x3D; Integer.SIZE - Integer.numberOfLeadingZeros(val);\n        int chars &#x3D; Math.max(((mag + (shift - 1)) &#x2F; shift), 1);\n        char[] buf &#x3D; new char[chars];\n\n        formatUnsignedInt(val, shift, buf, 0, chars);\n\n        &#x2F;&#x2F; Use special constructor which takes over &quot;buf&quot;.\n        return new String(buf, true);\n&#125;</code></pre>\n","feature":false,"text":"1. 使用及源码概览Integer.toBinaryString() 方法用于将十进制整数转为二进制，如下例： 完整源码调用如下： public static String toBinaryString(int i) &#123; return toUnsignedString0...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"10 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":12,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E6%A6%82%E8%A7%88\"><span class=\"toc-text\">1. 使用及源码概览</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">2. 解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">2.1 二进制转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81\"><span class=\"toc-text\">2.2 原码、反码、补码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">2.3 位运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">2.4 源码解析</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"23 种设计模式总结","uid":"2236ff817b0fd532c388d0cf8bb4c954","slug":"BlogRepository/设计模式/23 种设计模式总结","date":"2022-12-30T08:53:46.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/设计模式/23 种设计模式总结.json","keywords":null,"cover":"https://cover.png","text":"设计模式相关的详细知识见如下三篇： 设计模式之美总结（创建型篇）_凡 223 的博客 设计模式之美总结（结构型篇）_凡 223 的博客 设计模式之美总结（行为型篇）_凡 223 的博客 这里主要是对上面三篇内容的总结，用于清晰 23 种设计模式的原理概念和应用场景，以及它们之间的...","link":"","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"设计模式之美总结（行为型篇）","uid":"27f6062000233c0b6c7b071a046007f7","slug":"BlogRepository/设计模式/设计模式之美总结（行为型篇）","date":"2022-12-26T09:25:29.000Z","updated":"2023-04-20T13:57:44.648Z","comments":true,"path":"api/articles/BlogRepository/设计模式/设计模式之美总结（行为型篇）.json","keywords":null,"cover":"https://cover.png","text":"前五篇见： 设计模式之美总结（面向对象篇）_凡 223 的博客 设计模式之美总结（设计原则篇）_凡 223 的博客 设计模式之美总结（重构篇）_凡 223 的博客 设计模式之美总结（创建型篇）_凡 223 的博客 设计模式之美总结（结构型篇）_凡 223 的博客 创建型设计模式主...","link":"","photos":[],"count_time":{"symbolsCount":"140k","symbolsTime":"2:07"},"categories":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}