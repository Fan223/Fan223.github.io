{"title":"SpringBoot 结合 MyBatis-Plus 配置多数据源以及结合 p6spy 打印 SQL 日志","uid":"0e3cbfa1ef18be6a0efacfe867734435","slug":"BlogRepository/开发技术及框架/SpringBoot 结合 MyBatis-Plus 配置多数据源以及结合 p6spy 打印 SQL 日志","date":"2022-12-23T03:23:16.000Z","updated":"2023-03-13T19:13:04.956Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/SpringBoot 结合 MyBatis-Plus 配置多数据源以及结合 p6spy 打印 SQL 日志.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-配置多数据源\"><a href=\"#1-配置多数据源\" class=\"headerlink\" title=\"1. 配置多数据源\"></a>1. 配置多数据源</h1><p><strong>官网：<a href=\"https://baomidou.com/pages/a61e1b/#%E6%96%87%E6%A1%A3-documentation\">多数据源 | MyBatis-Plus (baomidou.com)</a></strong></p>\n<h2 id=\"1-1-引入依赖\"><a href=\"#1-1-引入依赖\" class=\"headerlink\" title=\"1.1 引入依赖\"></a>1.1 引入依赖</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;3.5.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"1-2-配置数据源\"><a href=\"#1-2-配置数据源\" class=\"headerlink\" title=\"1.2 配置数据源\"></a>1.2 配置数据源</h2><p>在 application.yml 文件或其他同等配置文件中进行配置</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    dynamic:\n      primary: master #设置默认的数据源或者数据源组,默认值即为master\n      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源\n      datasource:\n        master:\n          url: jdbc:mysql:&#x2F;&#x2F;xx.xx.xx.xx:3306&#x2F;dynamic\n          username: root\n          password: 123456\n          driver-class-name: com.mysql.jdbc.Driver # 3.2.0开始支持SPI可省略此配置\n        slave_1:\n          url: jdbc:mysql:&#x2F;&#x2F;xx.xx.xx.xx:3307&#x2F;dynamic\n          username: root\n          password: 123456\n          driver-class-name: com.mysql.jdbc.Driver\n        slave_2:\n          url: ENC(xxxxx) # 内置加密,使用请查看详细文档\n          username: ENC(xxxxx)\n          password: ENC(xxxxx)\n          driver-class-name: com.mysql.jdbc.Driver\n       #......省略\n       #以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2</code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 多主多从                      纯粹多库（记得设置primary）                   混合配置\nspring:                               spring:                               spring:\n  datasource:                           datasource:                           datasource:\n    dynamic:                              dynamic:                              dynamic:\n      datasource:                           datasource:                           datasource:\n        master_1:                             mysql:                                master:\n        master_2:                             oracle:                               slave_1:\n        slave_1:                              sqlserver:                            slave_2:\n        slave_2:                              postgresql:                           oracle_1:\n        slave_3:                              h2:                                   oracle_2:</code></pre>\n\n<h2 id=\"1-3-使用\"><a href=\"#1-3-使用\" class=\"headerlink\" title=\"1.3 使用\"></a>1.3 使用</h2><p>使用 <code>@DS</code> 切换数据源，<code>@DS</code> 可以注解在方法上或类上，<strong>同时存在就近原则 方法上注解 优先于 类上注解</strong></p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>没有@DS</td>\n<td>默认数据源</td>\n</tr>\n<tr>\n<td>@DS(“dsName”)</td>\n<td>dsName可以为组名也可以为具体某个库的名称</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\n@DS(&quot;slave&quot;)\npublic class UserServiceImpl implements UserService &#123;\n\n  @Autowired\n  private JdbcTemplate jdbcTemplate;\n\n  public List selectAll() &#123;\n    return  jdbcTemplate.queryForList(&quot;select * from user&quot;);\n  &#125;\n  \n  @Override\n  @DS(&quot;slave_1&quot;)\n  public List selectByCondition() &#123;\n    return  jdbcTemplate.queryForList(&quot;select * from user where age &gt; 10&quot;);\n  &#125;\n&#125;</code></pre>\n\n<p>其实直接标注在 DAO 接口上即可</p>\n<h2 id=\"1-4-示例\"><a href=\"#1-4-示例\" class=\"headerlink\" title=\"1.4 示例\"></a>1.4 示例</h2><p><strong>application-dev.yml 配置，这里用了下面的 p6spy 来打印日志</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    dynamic:\n      primary: common\n      strict: false\n      datasource:\n        common:\n          driver-class-name: com.p6spy.engine.spy.P6SpyDriver\n          url: jdbc:p6spy:mysql:&#x2F;&#x2F;124.xxx.xxx.90:3306&#x2F;common?connectTimeout&#x3D;5000&amp;socketTimeout&#x3D;10000&amp;autoReconnect&#x3D;true&amp;failOverReadOnly&#x3D;false&amp;useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;GMT%2B8\n          username: root\n          password: xxx\n        resNav:\n          driver-class-name: com.p6spy.engine.spy.P6SpyDriver\n          url: jdbc:p6spy:mysql:&#x2F;&#x2F;124.xxx.xxx.90:3306&#x2F;resource_nav?connectTimeout&#x3D;5000&amp;socketTimeout&#x3D;10000&amp;autoReconnect&#x3D;true&amp;failOverReadOnly&#x3D;false&amp;useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;GMT%2B8\n          username: root\n          password: xxx\n      druid:\n        # 关闭空闲检测\n        # test-while-idle: false\n        # 设置空闲检测语句\n        validation-query: SELECT 1</code></pre>\n\n<h1 id=\"2-p6spy-打印-SQL-日志\"><a href=\"#2-p6spy-打印-SQL-日志\" class=\"headerlink\" title=\"2. p6spy 打印 SQL 日志\"></a>2. p6spy 打印 SQL 日志</h1><p><strong>p6spy GitHub 地址：<a href=\"https://github.com/p6spy/p6spy\">p6spy&#x2F;p6spy (github.com)</a></strong></p>\n<p><strong>MyBatis-Plus 结合 p6spy：<a href=\"https://baomidou.com/pages/833fab/\">MyBatis-Plus (baomidou.com)</a></strong></p>\n<h2 id=\"2-1-引入依赖\"><a href=\"#2-1-引入依赖\" class=\"headerlink\" title=\"2.1 引入依赖\"></a>2.1 引入依赖</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n        &lt;groupId&gt;p6spy&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;p6spy&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;3.9.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h2><p>将 Driver 替换为 p6spy，同时 url 在 jdbc 后加上 p6spy 即可，示例见 1.4</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    driver-class-name: com.p6spy.engine.spy.P6SpyDriver\n    url: jdbc:p6spy:h2:mem:test\n    ...</code></pre>\n\n<h2 id=\"2-3-spy-properties-配置\"><a href=\"#2-3-spy-properties-配置\" class=\"headerlink\" title=\"2.3 spy.properties 配置\"></a>2.3 spy.properties 配置</h2><p>在 resource 目录下创建 spy.properties，即可对 p6spy 进行自定义配置。其中，结合 MyBatis-Plus 的配置如下：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">#3.2.1以上使用\nmodulelist&#x3D;com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory\n#3.2.1以下使用或者不配置\n#modulelist&#x3D;com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory\n# 自定义日志打印\nlogMessageFormat&#x3D;com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger\n#日志输出到控制台\nappender&#x3D;com.baomidou.mybatisplus.extension.p6spy.StdoutLogger\n# 使用日志系统记录 sql\n#appender&#x3D;com.p6spy.engine.spy.appender.Slf4JLogger\n# 设置 p6spy driver 代理\nderegisterdrivers&#x3D;true\n# 取消JDBC URL前缀\nuseprefix&#x3D;true\n# 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.\nexcludecategories&#x3D;info,debug,result,commit,resultset\n# 日期格式\ndateformat&#x3D;yyyy-MM-dd HH:mm:ss\n# 实际驱动可多个\n#driverlist&#x3D;org.h2.Driver\n# 是否开启慢SQL记录\noutagedetection&#x3D;true\n# 慢SQL记录标准 2 秒\noutagedetectioninterval&#x3D;2</code></pre>\n\n<p>p6spy 完整配置如下，详细可见：**<a href=\"https://p6spy.readthedocs.io/en/latest/configandusage.html\">Configuration and Usage — p6spy documentation</a>**</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">#################################################################\n# P6Spy Options File                                            #\n# See documentation for detailed instructions                   #\n# http:&#x2F;&#x2F;p6spy.github.io&#x2F;p6spy&#x2F;2.0&#x2F;configandusage.html          #\n#################################################################\n\n#################################################################\n# MODULES                                                       #\n#                                                               #\n# Module list adapts the modular functionality of P6Spy.        #\n# Only modules listed are active.                               #\n# (default is com.p6spy.engine.logging.P6LogFactory and         #\n# com.p6spy.engine.spy.P6SpyFactory)                            #\n# Please note that the core module (P6SpyFactory) can&#39;t be      #\n# deactivated.                                                  #\n# Unlike the other properties, activation of the changes on     #\n# this one requires reload.                                     #\n#################################################################\n#modulelist&#x3D;com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory\n\n################################################################\n# CORE (P6SPY) PROPERTIES                                      #\n################################################################\n\n# A comma separated list of JDBC drivers to load and register.\n# (default is empty)\n#\n# Note: This is normally only needed when using P6Spy in an\n# application server environment with a JNDI data source or when\n# using a JDBC driver that does not implement the JDBC 4.0 API\n# (specifically automatic registration).\n#driverlist&#x3D;\n\n# for flushing per statement\n# (default is false)\n#autoflush&#x3D;false\n\n# sets the date format using Java&#39;s SimpleDateFormat routine.\n# In case property is not set, milliseconds since 1.1.1970 (unix time) is used (default is empty)\n#dateformat&#x3D;\n\n# prints a stack trace for every statement logged\n#stacktrace&#x3D;false\n# if stacktrace&#x3D;true, specifies the stack trace to print\n#stacktraceclass&#x3D;\n\n# determines if property file should be reloaded\n# Please note: reload means forgetting all the previously set\n# settings (even those set during runtime - via JMX)\n# and starting with the clean table\n# (default is false)\n#reloadproperties&#x3D;false\n\n# determines how often should be reloaded in seconds\n# (default is 60)\n#reloadpropertiesinterval&#x3D;60\n\n# specifies the appender to use for logging\n# Please note: reload means forgetting all the previously set\n# settings (even those set during runtime - via JMX)\n# and starting with the clean table\n# (only the properties read from the configuration file)\n# (default is com.p6spy.engine.spy.appender.FileLogger)\n#appender&#x3D;com.p6spy.engine.spy.appender.Slf4JLogger\n#appender&#x3D;com.p6spy.engine.spy.appender.StdoutLogger\n#appender&#x3D;com.p6spy.engine.spy.appender.FileLogger\n\n# name of logfile to use, note Windows users should make sure to use forward slashes in their pathname (e:&#x2F;test&#x2F;spy.log)\n# (used for com.p6spy.engine.spy.appender.FileLogger only)\n# (default is spy.log)\n#logfile&#x3D;spy.log\n\n# append to the p6spy log file. if this is set to false the\n# log file is truncated every time. (file logger only)\n# (default is true)\n#append&#x3D;true\n\n# class to use for formatting log messages (default is: com.p6spy.engine.spy.appender.SingleLineFormat)\n#logMessageFormat&#x3D;com.p6spy.engine.spy.appender.SingleLineFormat\n\n# Custom log message format used ONLY IF logMessageFormat is set to com.p6spy.engine.spy.appender.CustomLineFormat\n# default is %(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)\n# Available placeholders are:\n#   %(connectionId)            the id of the connection\n#   %(currentTime)             the current time expressing in milliseconds\n#   %(executionTime)           the time in milliseconds that the operation took to complete\n#   %(category)                the category of the operation\n#   %(effectiveSql)            the SQL statement as submitted to the driver\n#   %(effectiveSqlSingleLine)  the SQL statement as submitted to the driver, with all new lines removed\n#   %(sql)                     the SQL statement with all bind variables replaced with actual values\n#   %(sqlSingleLine)           the SQL statement with all bind variables replaced with actual values, with all new lines removed\n#customLogMessageFormat&#x3D;%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)\n\n# format that is used for logging of the java.util.Date implementations (has to be compatible with java.text.SimpleDateFormat)\n# (default is yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ)\n#databaseDialectDateFormat&#x3D;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\n\n# format that is used for logging of the java.sql.Timestamp implementations (has to be compatible with java.text.SimpleDateFormat)\n# (default is yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ)\n#databaseDialectTimestampFormat&#x3D;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\n\n# format that is used for logging booleans, possible values: boolean, numeric\n# (default is boolean)\n#databaseDialectBooleanFormat&#x3D;boolean\n\n# Specifies the format for logging binary data. Not applicable if excludebinary is true.\n# (default is com.p6spy.engine.logging.format.HexEncodedBinaryFormat)\n#databaseDialectBinaryFormat&#x3D;com.p6spy.engine.logging.format.PostgreSQLBinaryFormat\n#databaseDialectBinaryFormat&#x3D;com.p6spy.engine.logging.format.MySQLBinaryFormat\n#databaseDialectBinaryFormat&#x3D;com.p6spy.engine.logging.format.HexEncodedBinaryFormat\n\n# whether to expose options via JMX or not\n# (default is true)\n#jmx&#x3D;true\n\n# if exposing options via jmx (see option: jmx), what should be the prefix used?\n# jmx naming pattern constructed is: com.p6spy(.&lt;jmxPrefix&gt;)?:name&#x3D;&lt;optionsClassName&gt;\n# please note, if there is already such a name in use it would be unregistered first (the last registered wins)\n# (default is none)\n#jmxPrefix&#x3D;\n\n# if set to true, the execution time will be measured in nanoseconds as opposed to milliseconds\n# (default is false)\n#useNanoTime&#x3D;false\n\n#################################################################\n# DataSource replacement                                        #\n#                                                               #\n# Replace the real DataSource class in your application server  #\n# configuration with the name com.p6spy.engine.spy.P6DataSource #\n# (that provides also connection pooling and xa support).       #\n# then add the JNDI name and class name of the real             #\n# DataSource here                                               #\n#                                                               #\n# Values set in this item cannot be reloaded using the          #\n# reloadproperties variable. Once it is loaded, it remains      #\n# in memory until the application is restarted.                 #\n#                                                               #\n#################################################################\n#realdatasource&#x3D;&#x2F;RealMySqlDS\n#realdatasourceclass&#x3D;com.mysql.jdbc.jdbc2.optional.MysqlDataSource\n\n#################################################################\n# DataSource properties                                         #\n#                                                               #\n# If you are using the DataSource support to intercept calls    #\n# to a DataSource that requires properties for proper setup,    #\n# define those properties here. Use name value pairs, separate  #\n# the name and value with a semicolon, and separate the         #\n# pairs with commas.                                            #\n#                                                               #\n# The example shown here is for mysql                           #\n#                                                               #\n#################################################################\n#realdatasourceproperties&#x3D;port;3306,serverName;myhost,databaseName;jbossdb,foo;bar\n\n#################################################################\n# JNDI DataSource lookup                                        #\n#                                                               #\n# If you are using the DataSource support outside of an app     #\n# server, you will probably need to define the JNDI Context     #\n# environment.                                                  #\n#                                                               #\n# If the P6Spy code will be executing inside an app server then #\n# do not use these properties, and the DataSource lookup will   #\n# use the naming context defined by the app server.             #\n#                                                               #\n# The two standard elements of the naming environment are       #\n# jndicontextfactory and jndicontextproviderurl. If you need    #\n# additional elements, use the jndicontextcustom property.      #\n# You can define multiple properties in jndicontextcustom,      #\n# in name value pairs. Separate the name and value with a       #\n# semicolon, and separate the pairs with commas.                #\n#                                                               #\n# The example shown here is for a standalone program running on #\n# a machine that is also running JBoss, so the JNDI context     #\n# is configured for JBoss (3.0.4).                              #\n#                                                               #\n# (by default all these are empty)                              #\n#################################################################\n#jndicontextfactory&#x3D;org.jnp.interfaces.NamingContextFactory\n#jndicontextproviderurl&#x3D;localhost:1099\n#jndicontextcustom&#x3D;java.naming.factory.url.pkgs;org.jboss.naming:org.jnp.interfaces\n\n#jndicontextfactory&#x3D;com.ibm.websphere.naming.WsnInitialContextFactory\n#jndicontextproviderurl&#x3D;iiop:&#x2F;&#x2F;localhost:900\n\n################################################################\n# P6 LOGGING SPECIFIC PROPERTIES                               #\n################################################################\n\n# filter what is logged\n# please note this is a precondition for usage of: include&#x2F;exclude&#x2F;sqlexpression\n# (default is false)\n#filter&#x3D;false\n\n# comma separated list of strings to include\n# please note that special characters escaping (used in java) has to be done for the provided regular expression\n# (default is empty)\n#include&#x3D;\n# comma separated list of strings to exclude\n# (default is empty)\n#exclude&#x3D;\n\n# sql expression to evaluate if using regex\n# please note that special characters escaping (used in java) has to be done for the provided regular expression\n# (default is empty)\n#sqlexpression&#x3D;\n\n#list of categories to exclude: error, info, batch, debug, statement,\n#commit, rollback, result and resultset are valid values\n# (default is info,debug,result,resultset,batch)\n#excludecategories&#x3D;info,debug,result,resultset,batch\n\n#whether the binary values (passed to DB or retrieved ones) should be logged with placeholder: [binary] or not.\n# (default is false)\n#excludebinary&#x3D;false\n\n# Execution threshold applies to the standard logging of P6Spy.\n# While the standard logging logs out every statement\n# regardless of its execution time, this feature puts a time\n# condition on that logging. Only statements that have taken\n# longer than the time specified (in milliseconds) will be\n# logged. This way it is possible to see only statements that\n# have exceeded some high water mark.\n# This time is reloadable.\n#\n# executionThreshold&#x3D;integer time (milliseconds)\n# (default is 0)\n#executionThreshold&#x3D;\n\n################################################################\n# P6 OUTAGE SPECIFIC PROPERTIES                                #\n################################################################\n# Outage Detection\n#\n# This feature detects long-running statements that may be indicative of\n# a database outage problem. If this feature is turned on, it will log any\n# statement that surpasses the configurable time boundary during its execution.\n# When this feature is enabled, no other statements are logged except the long\n# running statements. The interval property is the boundary time set in seconds.\n# For example, if this is set to 2, then any statement requiring at least 2\n# seconds will be logged. Note that the same statement will continue to be logged\n# for as long as it executes. So if the interval is set to 2, and the query takes\n# 11 seconds, it will be logged 5 times (at the 2, 4, 6, 8, 10 second intervals).\n#\n# outagedetection&#x3D;true|false\n# outagedetectioninterval&#x3D;integer time (seconds)\n#\n# (default is false)\n#outagedetection&#x3D;false\n# (default is 60)\n#outagedetectioninterval&#x3D;30</code></pre>\n","feature":false,"text":"1. 配置多数据源官网：多数据源 | MyBatis-Plus (baomidou.com) 1.1 引入依赖&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt; &lt;artifactId&gt...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":8,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"MyBatis-Plus","slug":"MyBatis-Plus","count":2,"path":"api/tags/MyBatis-Plus.json"},{"name":"SpringBoot","slug":"SpringBoot","count":4,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">1. 配置多数据源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">1.2 配置数据源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.3 使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1.4 示例</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-p6spy-%E6%89%93%E5%8D%B0-SQL-%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">2. p6spy 打印 SQL 日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.2 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-spy-properties-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.3 spy.properties 配置</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"设计模式之美总结（行为型篇）","uid":"27f6062000233c0b6c7b071a046007f7","slug":"BlogRepository/设计模式/设计模式之美总结（行为型篇）","date":"2022-12-26T09:25:29.000Z","updated":"2023-03-13T19:13:04.964Z","comments":true,"path":"api/articles/BlogRepository/设计模式/设计模式之美总结（行为型篇）.json","keywords":null,"cover":"https://cover.png","text":"前五篇见： 设计模式之美总结（面向对象篇）_凡 223 的博客 设计模式之美总结（设计原则篇）_凡 223 的博客 设计模式之美总结（重构篇）_凡 223 的博客 设计模式之美总结（创建型篇）_凡 223 的博客 设计模式之美总结（结构型篇）_凡 223 的博客 创建型设计模式主...","link":"","photos":[],"count_time":{"symbolsCount":"140k","symbolsTime":"2:07"},"categories":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"设计模式之美总结（结构型篇）","uid":"dc36ba1463e60735e3396234d94e7099","slug":"BlogRepository/设计模式/设计模式之美总结（结构型篇）","date":"2022-12-21T01:59:11.000Z","updated":"2023-03-13T19:13:04.964Z","comments":true,"path":"api/articles/BlogRepository/设计模式/设计模式之美总结（结构型篇）.json","keywords":null,"cover":"https://cover.png","text":"前四篇见： 设计模式之美总结（面向对象篇）_凡 223 的博客 设计模式之美总结（设计原则篇）_凡 223 的博客 设计模式之美总结（重构篇）_凡 223 的博客 设计模式之美总结（创建型篇）_凡 223 的博客 1. 代理模式（Proxy Design Pattern）1.1 ...","link":"","photos":[],"count_time":{"symbolsCount":"61k","symbolsTime":"55 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}