{"title":"MyBatis-Plus 使用总结","uid":"245a7be88615344e5adce1986b47a4ce","slug":"BlogRepository/开发技术及框架/MyBatis-Plus 使用总结","date":"2022-05-03T04:47:04.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/MyBatis-Plus 使用总结.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-POM-依赖\"><a href=\"#1-POM-依赖\" class=\"headerlink\" title=\"1. POM 依赖\"></a>1. POM 依赖</h1><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- mybatis-plus --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- mybatis-plus-generator 生成器--&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mybatis-plus-generator&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;3.5.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- freemarker 模板引擎--&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-freemarker&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.6.7&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h1 id=\"2-YML-配置\"><a href=\"#2-YML-配置\" class=\"headerlink\" title=\"2. YML 配置\"></a>2. YML 配置</h1><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">mybatis-plus:\n  mapper-locations: classpath*:&#x2F;mapper&#x2F;**Mapper.xml\n  configuration:\n    local-cache-scope: statement</code></pre>\n\n<h1 id=\"3-MybatisPlusConfig-配置类\"><a href=\"#3-MybatisPlusConfig-配置类\" class=\"headerlink\" title=\"3. MybatisPlusConfig 配置类\"></a>3. MybatisPlusConfig 配置类</h1><p>配置分页插件以及全表更新删除插件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@MapperScan(&quot;fan.**.dao&quot;)\npublic class MybatisPlusConfig &#123;\n\n\t@Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;\n        MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();\n        &#x2F;&#x2F; 添加分页插件\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        &#x2F;&#x2F; 添加全表更新删除插件\n        interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor());\n        return interceptor;\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"4-CodeGenerator-代码生成\"><a href=\"#4-CodeGenerator-代码生成\" class=\"headerlink\" title=\"4. CodeGenerator 代码生成\"></a>4. CodeGenerator 代码生成</h1><ol>\n<li><p>获取项目数据库所对应表和字段的信息（information_schema 数据库的 TABLES 和 COLUMNS）</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"># 获取表\nSELECT *\nFROM information_schema. TABLES\nWHERE TABLE_SCHEMA &#x3D; (SELECT DATABASE());\n# 获取字段\nSELECT *\nFROM information_schema. COLUMNS\nWHERE TABLE_SCHEMA &#x3D; (SELECT DATABASE()) AND TABLE_NAME &#x3D; &quot;sys_user&quot;;</code></pre></li>\n<li><p>使用生成器的模板新建一个 freemarker（模板引擎）的页面模板 - SysUser.java.ftl - ${baseEntity}<br><img src=\"http://img.fan223.cn/2023/04/20230419162536.png\"></p>\n</li>\n<li><p>提供相关需要进行渲染的动态数据 - BaseEntity、表字段、注释、baseEntity&#x3D;SuperEntity</p>\n</li>\n<li><p>使用 freemarker 模板引擎进行渲染 - SysUser.java</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CodeGenerator &#123;\n\n    private static final DataSourceConfig.Builder DATA_SOURCE_CONFIG &#x3D; new DataSourceConfig\n            .Builder(&quot;jdbc:mysql:&#x2F;&#x2F;124.222.118.90:3306&#x2F;enterprise_hrms?connectTimeout&#x3D;5000&amp;socketTimeout&#x3D;10000&amp;autoReconnect&#x3D;true&amp;failOverReadOnly&#x3D;false&amp;useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;GMT%2B8&quot;, &quot;root&quot;, &quot;fan223&quot;);\n\n    public static void main(String[] args) &#123;\n        FastAutoGenerator.create(DATA_SOURCE_CONFIG)\n                &#x2F;&#x2F; 全局配置\n                .globalConfig((scanner, builder) -&gt; builder.author(scanner.apply(&quot;请输入作者名称&quot;)).enableSwagger())\n                &#x2F;&#x2F; 包配置\n                .packageConfig((scanner, builder) -&gt; builder.parent(scanner.apply(&quot;请输入包名&quot;)))\n                &#x2F;&#x2F; 策略配置\n                .strategyConfig((scanner, builder) -&gt; builder.addInclude(scanner.apply(&quot;请输入表名，多个表名用,隔开&quot;)))\n                &#x2F;&#x2F; 模板配置\n                .templateEngine(new FreemarkerTemplateEngine())\n                .execute();\n    &#125;\n&#125;</code></pre>\n\n<p><strong>详细配置信息：<a href=\"https://baomidou.com/pages/981406/\">https://baomidou.com/pages/981406/</a></strong></p>\n<p><strong>生成如下：</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162549.png\"></p>\n<p><strong>Service</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface SysMenuService extends IService&lt;SysMenuDO&gt; &#123;\n\n&#125;</code></pre>\n\n<p><strong>ServiceImpl</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class SysMenuServiceImpl extends ServiceImpl&lt;SysMenuDAO, SysMenuDO&gt; implements SysMenuService &#123;\n\n&#125;</code></pre>\n\n<p><strong>DAO</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface SysMenuDAO extends BaseMapper&lt;SysMenuDO&gt; &#123;\n\n&#125;</code></pre>\n\n<h1 id=\"5-使用分页\"><a href=\"#5-使用分页\" class=\"headerlink\" title=\"5. 使用分页\"></a>5. 使用分页</h1><p><strong>前提先要配置分页插件，否则无效</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public Page&lt;EmployeeDTO&gt; getEmployeeList(ConditionDTO conditionDTO) &#123;\n\n        QueryWrapper&lt;EmployeeDO&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();\n\n\t&#x2F;&#x2F; 创建一个 Page，传入当前页和页面大小\n        Page&lt;EmployeeDO&gt; page &#x3D; new Page&lt;&gt;(conditionDTO.getPageNum(), conditionDTO.getPageSize());\n        &#x2F;&#x2F; 调用 selectPage() 方法，返回一个 Page 对象\n        Page&lt;EmployeeDO&gt; employeeDOPage &#x3D; employeeDAO.selectPage(page, queryWrapper);\n\n\t&#x2F;&#x2F; 转换为 DTO\n        ......\n        return employeeDTOPage;\n    &#125;</code></pre>\n\n<p>返回结果如下所示：current 表示当前页，size 表示单页最大数量，total 表示总数，pages 表示页面数，records 表示数据</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162639.png\"></p>\n<h1 id=\"6-in-的使用\"><a href=\"#6-in-的使用\" class=\"headerlink\" title=\"6. in 的使用\"></a>6. in 的使用</h1><p>在 Mybatis-Plus 中，当传入参数为 list 集合的时候，会自动把其封装为一个 map，<strong>以 “list” 作为 key，每个元素的值作为 value，格式为 Map&lt;”list”, value&gt;<strong>。当传入参数为数组的时候会自动把其封装为一个 map，</strong>以 “array” 作为 key，每个元素的值作为 value，格式为 <code>Map&lt;&quot;array&quot;, value&gt;</code></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface EmployeeDAO extends BaseMapper&lt;EmployeeDO&gt; &#123;\n\n    void deleteEmployee(List&lt;String&gt; empIds);\n&#125;</code></pre>\n\n<p><strong>正确写法：</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;update id&#x3D;&quot;deleteEmployee&quot;&gt;\n\tUPDATE employee\n\tSET vali_flag &#x3D; &#39;0&#39;\n\tWHERE emp_id in\n\t&lt;foreach item&#x3D;&quot;item&quot; collection&#x3D;&quot;list&quot; index&#x3D;&quot;index&quot; open&#x3D;&quot;(&quot; separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;\n\t\t#&#123;item&#125;\n\t&lt;&#x2F;foreach&gt;\n&lt;&#x2F;update&gt;</code></pre>\n\n<p><strong>错误写法</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;update id&#x3D;&quot;deleteEmployee&quot;&gt;\n\tUPDATE employee\n\tSET vali_flag &#x3D; &#39;0&#39;\n\tWHERE emp_id in\n\t&lt;foreach item&#x3D;&quot;item&quot; collection&#x3D;&quot;empIds&quot; index&#x3D;&quot;index&quot; open&#x3D;&quot;(&quot; separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;\n\t\t#&#123;item&#125;\n\t&lt;&#x2F;foreach&gt;\n&lt;&#x2F;update&gt;</code></pre>\n","feature":false,"text":"1. POM 依赖&lt;!-- mybatis-plus --&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mybatis-plus-boot...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":9,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"MyBatis-Plus","slug":"MyBatis-Plus","count":2,"path":"api/tags/MyBatis-Plus.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-POM-%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1. POM 依赖</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-YML-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2. YML 配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-MybatisPlusConfig-%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3. MybatisPlusConfig 配置类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-CodeGenerator-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90\"><span class=\"toc-text\">4. CodeGenerator 代码生成</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">5. 使用分页</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-in-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">6. in 的使用</span></a></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Redis 序列化规则及重定义","uid":"39438e0eff462191bb311410e951b530","slug":"BlogRepository/Redis/Redis 序列化规则及重定义","date":"2022-05-03T22:56:01.000Z","updated":"2023-04-20T13:57:44.601Z","comments":true,"path":"api/articles/BlogRepository/Redis/Redis 序列化规则及重定义.json","keywords":null,"cover":"https://cover.png","text":"1. JdkSerializationRedisSerializerRestTemplate 默认的序列化方式，当存储时 Key 会变成一串字符串 优点反序列化时不需要提供类型信息(class)， 缺点 需要实现Serializable接口 存储的为二进制数据 序列化后的结果非常...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"Redis","slug":"Redis","count":3,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":5,"path":"api/tags/Redis.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Java基础总结回顾","uid":"1fa3d488b05424ad20d9fbd33108a055","slug":"BlogRepository/Java/Java基础总结回顾","date":"2022-04-12T09:31:14.000Z","updated":"2023-04-20T13:57:44.601Z","comments":true,"path":"api/articles/BlogRepository/Java/Java基础总结回顾.json","keywords":null,"cover":"https://cover.png","text":"1. 说明1.1 编译与运行 编译：是指将编写的 Java 源文件翻译成 JVM 认识的 class 文件，在这个过程中， javac 编译器会检查所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功 运行：是指将 class文件 交给 JVM 去运行，此时 JVM...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":12,"path":"api/tags/Java.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}