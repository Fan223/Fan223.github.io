{"title":"MapStruct 总结","uid":"489b1959aeda27687de88f48f1d87894","slug":"BlogRepository/开发技术及框架/MapStruct 总结","date":"2022-03-22T05:51:27.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/MapStruct 总结.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h1><p>在系统工程开发过程中，会有各个层之间的对象转换，比如 VO、DTO、PO、DO 等，如果都是手动 setter、getter 特别浪费时间，还可能操作错误，所以选择一个自动化工具会更加方便。常见的有 json2Json、Apache 和 Spring 的 BeanUtils.copyProperties()、BeanCopier、JMapper 等</p>\n<p>对象属性转换的操作无非是基于反射、AOP、CGlib、ASM、Javassist 在编译时和运行期进行处理，再有好的思路就是在编译前生成出对应的 setter、getter，就像手写出来的一样。<strong>MapStruct 就是直接在编译期生成对应的 setter、getter</strong>，性能更好、使用方便</p>\n<h1 id=\"2-POM\"><a href=\"#2-POM\" class=\"headerlink\" title=\"2. POM\"></a>2. POM</h1><p>导入依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n\t&lt;groupId&gt;org.mapstruct&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mapstruct&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;1.5.0.RC1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.mapstruct&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mapstruct-processor&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;1.5.0.RC1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.mapstruct&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;mapstruct-jdk8&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;1.5.0.RC1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>可以选择在 IDEA 中下载其插件</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162740.png\"></p>\n<h1 id=\"3-实体类\"><a href=\"#3-实体类\" class=\"headerlink\" title=\"3. 实体类\"></a>3. 实体类</h1><p>定义几个 DO 和 DTO</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; UserDO\n@Data\n@Builder\npublic class UserDO &#123;\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String address;\n    private String birthday;\n    private String phone;\n    private String userDOGender;\n    private Date createTime;\n    private Map&lt;String, String&gt; map;\n    private List&lt;PersonDO&gt; personList;\n&#125;\n&#x2F;&#x2F; UserDTO\n@Data\n@Builder\npublic class UserDTO &#123;\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String address;\n    private String userDTOGender;\n    private Date createTime;\n    private Map&lt;String, String&gt; map;\n    private List&lt;PersonDO&gt; personList;\n&#125;\n&#x2F;&#x2F; PersonDO\n@Data\n@Builder\npublic class PersonDO &#123;\n    private Integer id;\n    private String name;\n    private String job;\n    private String remark;\n    private Date createTime;\n&#125;\n&#x2F;&#x2F; PersonDTO\n@Data\n@Builder\npublic class PersonDTO &#123;\n    private Integer id;\n    private String name;\n    private String job;\n&#125;</code></pre>\n\n<h1 id=\"3-映射器\"><a href=\"#3-映射器\" class=\"headerlink\" title=\"3. 映射器\"></a>3. 映射器</h1><ul>\n<li>如果 DTO 和实体类中的字段名称是一致的，只需要写方法签名即可</li>\n<li>如果参数名称有变化，需要使用 @Maping 注解，source 为原参数名称，target 为转换后的类的参数名称</li>\n<li><strong>隐式类型转换</strong><br>在许多情况下，MapStruct 会自动处理类型转换。如在 source 中是 int 类型但在 target 中是 String 类型，会自动进行转换。以及所有 Java 基本数据类型及其相应的包装类型，如 int 和 Integer，boolean 和 Boolean 等。还有所有 Java Number类型和包装器类型之间，如 int 和 long 或 byte 和 Integer</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper &#x2F;&#x2F; 直接使用\n@Mapper(componentModel &#x3D; &quot;spring&quot;) &#x2F;&#x2F; 整合 Spring，设置 componentModel &#x3D; &quot;spring&quot;，需要使用的地方直接通过 @Resource 注入即可\npublic interface MapStruct &#123;\n\n\tMapStruct INSTANCE &#x3D; Mappers.getMapper(MapStruct.class);\n\n    @Mapping(source &#x3D; &quot;userDOGender&quot;, target &#x3D; &quot;userDTOGender&quot;)\n    UserDTO userDOToUserDTO(UserDO userDO);\n\n    @Mapping(source &#x3D; &quot;userDTOGender&quot;, target &#x3D; &quot;userDOGender&quot;)\n    UserDO UserDTOToUserDO(UserDTO userDTO);\n\n    PersonDTO personDOToPersonDTO(PersonDO personDO);\n\n    PersonDO PersonDTOToPersonDO(PersonDTO personDTO);\n&#125;</code></pre>\n\n<p>编译后，会在同级目录生成实现类：</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162753.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Generated(\n    value &#x3D; &quot;org.mapstruct.ap.MappingProcessor&quot;,\n    date &#x3D; &quot;2022-03-22T12:16:06+0800&quot;,\n    comments &#x3D; &quot;version: 1.5.0.RC1, compiler: javac, environment: Java 1.8.0_131 (Oracle Corporation)&quot;\n)\npublic class MapStructImpl implements MapStruct &#123;\n\n    @Override\n    public UserDTO userDOToUserDTO(UserDO userDO) &#123;\n        if ( userDO &#x3D;&#x3D; null ) &#123;\n            return null;\n        &#125;\n\n        UserDTO.UserDTOBuilder userDTO &#x3D; UserDTO.builder();\n\n        userDTO.userDTOGender( userDO.getUserDOGender() );\n        userDTO.id( userDO.getId() );\n        userDTO.name( userDO.getName() );\n        userDTO.age( userDO.getAge() );\n        userDTO.address( userDO.getAddress() );\n        userDTO.createTime( userDO.getCreateTime() );\n        Map&lt;String, String&gt; map &#x3D; userDO.getMap();\n        if ( map !&#x3D; null ) &#123;\n            userDTO.map( new LinkedHashMap&lt;String, String&gt;( map ) );\n        &#125;\n        List&lt;PersonDO&gt; list &#x3D; userDO.getPersonList();\n        if ( list !&#x3D; null ) &#123;\n            userDTO.personList( new ArrayList&lt;PersonDO&gt;( list ) );\n        &#125;\n\n        return userDTO.build();\n    &#125;\n\n    @Override\n    public UserDO UserDTOToUserDO(UserDTO userDTO) &#123;\n        if ( userDTO &#x3D;&#x3D; null ) &#123;\n            return null;\n        &#125;\n\n        UserDO.UserDOBuilder userDO &#x3D; UserDO.builder();\n\n        userDO.userDOGender( userDTO.getUserDTOGender() );\n        userDO.id( userDTO.getId() );\n        userDO.name( userDTO.getName() );\n        userDO.age( userDTO.getAge() );\n        userDO.address( userDTO.getAddress() );\n        userDO.createTime( userDTO.getCreateTime() );\n        Map&lt;String, String&gt; map &#x3D; userDTO.getMap();\n        if ( map !&#x3D; null ) &#123;\n            userDO.map( new LinkedHashMap&lt;String, String&gt;( map ) );\n        &#125;\n        List&lt;PersonDO&gt; list &#x3D; userDTO.getPersonList();\n        if ( list !&#x3D; null ) &#123;\n            userDO.personList( new ArrayList&lt;PersonDO&gt;( list ) );\n        &#125;\n\n        return userDO.build();\n    &#125;\n\n    @Override\n    public PersonDTO personDOToPersonDTO(PersonDO personDO) &#123;\n        if ( personDO &#x3D;&#x3D; null ) &#123;\n            return null;\n        &#125;\n\n        PersonDTO.PersonDTOBuilder personDTO &#x3D; PersonDTO.builder();\n\n        personDTO.id( personDO.getId() );\n        personDTO.name( personDO.getName() );\n        personDTO.job( personDO.getJob() );\n\n        return personDTO.build();\n    &#125;\n\n    @Override\n    public PersonDO PersonDTOToPersonDO(PersonDTO personDTO) &#123;\n        if ( personDTO &#x3D;&#x3D; null ) &#123;\n            return null;\n        &#125;\n\n        PersonDO.PersonDOBuilder personDO &#x3D; PersonDO.builder();\n\n        personDO.id( personDTO.getId() );\n        personDO.name( personDTO.getName() );\n        personDO.job( personDTO.getJob() );\n\n        return personDO.build();\n    &#125;\n&#125;</code></pre>\n\n<h1 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        UserDO userDO &#x3D; UserDO.builder().id(1)\n                .name(&quot;张三&quot;)\n                .age(18)\n                .birthday(&quot;2003-01-04&quot;)\n                .phone(&quot;12343&quot;)\n                .userDOGender(&quot;男&quot;)\n                .createTime(new Date(System.currentTimeMillis()))\n                .map(new HashMap&lt;String, String&gt;()&#123;\n                    &#123;\n                        this.put(&quot;key&quot;, &quot;value&quot;);\n                    &#125;\n                &#125;)\n                .personList(new ArrayList&lt;PersonDO&gt;()&#123;\n                    &#123;\n                        this.add(PersonDO.builder().id(11).build());\n                    &#125;\n                &#125;).build();\n        UserDTO userDTO &#x3D; Mappers.getMapper(MapStruct.class).userDOToUserDTO(userDO);\n        System.out.println(userDTO);\n\n        PersonDTO personDTO &#x3D; PersonDTO.builder().id(11)\n                .name(&quot;李四&quot;)\n                .job(&quot;开发&quot;).build();\n        PersonDO personDO &#x3D; MapStruct.INSTANCE.PersonDTOToPersonDO(personDTO);\n        System.out.println(personDO);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162807.png\"></p>\n<h1 id=\"5-自定义转换规则\"><a href=\"#5-自定义转换规则\" class=\"headerlink\" title=\"5. 自定义转换规则\"></a>5. 自定义转换规则</h1><p><strong>MapStruct 只提供了隐式类型转换和默认的一些转换，假如需要特定的类型转换，如将 <code>java.sql.Timestamp</code> 日期转换为只保留年月日的字符串等，可以自定义转换规则</strong></p>\n<h2 id=\"5-1-使用-expression-表达式\"><a href=\"#5-1-使用-expression-表达式\" class=\"headerlink\" title=\"5.1 使用 expression 表达式\"></a>5.1 使用 expression 表达式</h2><p><strong>1、创建一个转换规则类</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MapStructRule &#123;\n    public static String toDate(Timestamp date) &#123;\n        SimpleDateFormat simpleDateFormat &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n        return simpleDateFormat.format(date);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>2、在映射器对应的转换方法上使用 <code>@Mapping</code> 注解的 <code>expression</code> 属性标识转换规则，这里的属性值为需要写 <code>全类名.方法名(参数)</code>，使用了 <code>expression</code> 就不需要 <code>source</code> 属性</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper(componentModel &#x3D; &quot;spring&quot;) &#x2F;&#x2F; 整合 Spring，设置 componentModel &#x3D; &quot;spring&quot;，需要使用的地方直接通过 @Resource 注入即可\npublic interface MapStruct &#123;\n    MapStruct INSTANCE &#x3D; Mappers.getMapper(MapStruct.class);\n\n    @Mapping(target &#x3D; &quot;createTime&quot;, expression &#x3D; &quot;java(fan.fanblog.utils.MapStructRule.toDate(menuDO.getCreateTime()))&quot;)\n    @Mapping(target &#x3D; &quot;updateTime&quot;, expression &#x3D; &quot;java(fan.fanblog.utils.MapStructRule.toDate(menuDO.getUpdateTime()))&quot;)\n    MenuVO MenuDOToMenuVO(MenuDO menuDO);\n&#125;</code></pre>\n\n<p><strong>3、测试类</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Demo &#123;\n    public static void main(String[] args) &#123;\n        MenuDO menuDO &#x3D; new MenuDO();\n\n        menuDO.setCreateTime(new Timestamp(System.currentTimeMillis()));\n        menuDO.setUpdateTime(new Timestamp(System.currentTimeMillis()));\n        System.out.println(menuDO);\n\n        MenuVO menuVO &#x3D; MapStruct.INSTANCE.MenuDOToMenuVO(menuDO);\n        System.out.println(menuVO);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162818.png\"></p>\n<h2 id=\"5-2-使用-Named-注解\"><a href=\"#5-2-使用-Named-注解\" class=\"headerlink\" title=\"5.2 使用 @Named 注解\"></a>5.2 使用 @Named 注解</h2><p><strong>1、创建一个转换规则类，在对应的转换方法上标注 <code>@Named</code> 注解表示转换方法名</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MapStructRule &#123;\n    @Named(&quot;toDate&quot;)\n    public static String toDate(Timestamp date) &#123;\n        SimpleDateFormat simpleDateFormat &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n        return simpleDateFormat.format(date);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>2、在映射器上使用 <code>@Mapper</code> 的 <code>uses</code> 属性，属性值为转换规则类的 Class 对象，然后再映射器对应的方法上使用 <code>@Mapping</code> 注解的 <code>qualifiedByName</code> 属性，属性值为转换规则类 <code>@Named</code> 定义的方法名</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper(componentModel &#x3D; &quot;spring&quot;, uses &#x3D; MapStructRule.class) &#x2F;&#x2F; 整合 Spring，设置 componentModel &#x3D; &quot;spring&quot;，需要使用的地方直接通过 @Resource 注入即可\npublic interface MapStruct &#123;\n    MapStruct INSTANCE &#x3D; Mappers.getMapper(MapStruct.class);\n\n    @Mapping(target &#x3D; &quot;createTime&quot;, source &#x3D; &quot;createTime&quot;, qualifiedByName &#x3D; &quot;toDate&quot;)\n    @Mapping(target &#x3D; &quot;updateTime&quot;, source &#x3D; &quot;updateTime&quot;, qualifiedByName &#x3D; &quot;toDate&quot;)\n    MenuVO MenuDOToMenuVO(MenuDO menuDO);\n&#125;</code></pre>\n\n<p><strong>3、测试类</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Demo &#123;\n    public static void main(String[] args) &#123;\n        MenuDO menuDO &#x3D; new MenuDO();\n\n        menuDO.setCreateTime(new Timestamp(System.currentTimeMillis()));\n        menuDO.setUpdateTime(new Timestamp(System.currentTimeMillis()));\n        System.out.println(menuDO);\n\n        MenuVO menuVO &#x3D; MapStruct.INSTANCE.MenuDOToMenuVO(menuDO);\n        System.out.println(menuVO);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419162829.png\"></p>\n<h1 id=\"6-忽略属性不转换\"><a href=\"#6-忽略属性不转换\" class=\"headerlink\" title=\"6. 忽略属性不转换\"></a>6. 忽略属性不转换</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper(componentModel &#x3D; &quot;spring&quot;, uses &#x3D; MapStructRule.class) &#x2F;&#x2F; 整合 Spring，设置 componentModel &#x3D; &quot;spring&quot;，需要使用的地方直接通过 @Resource 注入即可\npublic interface MapStruct &#123;\n    MapStruct INSTANCE &#x3D; Mappers.getMapper(MapStruct.class);\n\n    @Mapping(target &#x3D; &quot;createTime&quot;, ignore &#x3D; true)\n    @Mapping(target &#x3D; &quot;updateTime&quot;, ignore &#x3D; true)\n    MenuDO MenuVOToMenuDO(MenuVO menuVO);\n&#125;</code></pre>\n","feature":false,"text":"1. 概念在系统工程开发过程中，会有各个层之间的对象转换，比如 VO、DTO、PO、DO 等，如果都是手动 setter、getter 特别浪费时间，还可能操作错误，所以选择一个自动化工具会更加方便。常见的有 json2Json、Apache 和 Spring 的 BeanUti...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":9,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"Java","slug":"Java","count":12,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 概念</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-POM\"><span class=\"toc-text\">2. POM</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">3. 实体类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%98%A0%E5%B0%84%E5%99%A8\"><span class=\"toc-text\">3. 映射器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4. 测试</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99\"><span class=\"toc-text\">5. 自定义转换规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E4%BD%BF%E7%94%A8-expression-%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">5.1 使用 expression 表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E4%BD%BF%E7%94%A8-Named-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">5.2 使用 @Named 注解</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E5%BF%BD%E7%95%A5%E5%B1%9E%E6%80%A7%E4%B8%8D%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">6. 忽略属性不转换</span></a></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Vue2 总结（基础）","uid":"b7312c89ee509493a26684384e3e1543","slug":"BlogRepository/Vue/Vue2 总结（基础）","date":"2022-03-28T02:38:54.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/Vue/Vue2 总结（基础）.json","keywords":null,"cover":"https://cover.png","text":"1. 简介1.1 特点 遵循 MVVM 模式 编码简洁, 体积小, 运行效率高, 适合移动&#x2F;PC 端开发 它本身只关注 UI, 也可以引入其它第三方库开发项目 1.2 与其它 JS 框架的关联 借鉴 Angular 的模板和数据绑定技术 借鉴 React 的组件化和虚拟...","link":"","photos":[],"count_time":{"symbolsCount":"61k","symbolsTime":"55 mins."},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"JWT 总结","uid":"8c40486acfd1c17dcd4c39c1d08317e3","slug":"BlogRepository/开发技术及框架/JWT 总结","date":"2022-03-17T03:48:47.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/JWT 总结.json","keywords":null,"cover":"https://cover.png","text":"1. 跨域身份验证1.1 传统的 session 流程 浏览器发起请求登陆，向服务器发送用户名和密码 服务端验证身份，生成身份验证信息（用户角色、登录时间等），存储在服务端 的 session 中 服务器向用户返回 session_id，session 信息都会写入到用户的 Co...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":9,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"JWT","slug":"JWT","count":1,"path":"api/tags/JWT.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}