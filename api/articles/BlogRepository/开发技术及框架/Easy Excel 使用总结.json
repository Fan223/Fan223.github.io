{"title":"Easy Excel 使用总结","uid":"4d007a7b93e6f215777cd8e4cac0925d","slug":"BlogRepository/开发技术及框架/Easy Excel 使用总结","date":"2022-10-14T09:33:57.000Z","updated":"2023-03-13T19:13:04.956Z","comments":true,"path":"api/articles/BlogRepository/开发技术及框架/Easy Excel 使用总结.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p><strong>官网地址：<a href=\"https://easyexcel.opensource.alibaba.com/\">EasyExcel 官方文档 - 基于 Java 的 Excel 处理工具 | Easy Excel (alibaba.com)</a></strong></p>\n<p>EasyExcel 是一个基于 Java 的、快速、简洁、解决大文件内存溢出的 Excel 处理工具。他能让你在不用考虑性能、内存的等因素的情况下，快速完成 Excel 的读、写等功能</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9a96eb37e97a4ac8b15ae70f60e78a85.png\" alt=\"在这里插入图片描述\"></p>\n<p>导入依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;easyexcel&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;最新版本&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h1 id=\"2-常用注解\"><a href=\"#2-常用注解\" class=\"headerlink\" title=\"2. 常用注解\"></a>2. 常用注解</h1><h3 id=\"2-2-1-ExcelProperty\"><a href=\"#2-2-1-ExcelProperty\" class=\"headerlink\" title=\"2.2.1 @ExcelProperty\"></a>2.2.1 @ExcelProperty</h3><p>用于匹配 Excel 和实体类的匹配，参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>空</td>\n<td>用于匹配 Excel 中的头，必须全匹配，如果有多行头，会匹配最后一行头</td>\n</tr>\n<tr>\n<td>order</td>\n<td>Integer.MAX_VALUE</td>\n<td>优先级高于 <code>value</code>，会根据 <code>order</code> 的顺序来匹配实体和 excel 中数据的顺序</td>\n</tr>\n<tr>\n<td>index</td>\n<td>-1</td>\n<td>优先级高于 <code>value</code> 和 <code>order</code>，会根据 <code>index</code> 直接指定到 excel 中具体的哪一列</td>\n</tr>\n<tr>\n<td>converter</td>\n<td>自动选择</td>\n<td>指定当前字段用什么转换器，默认会自动选择。读的情况下只要实现 <code>com.alibaba.excel.converters.Converter#convertToJavaData(com.alibaba.excel.converters.ReadConverterContext&lt;?&gt;)</code> 方法即可</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-2-ExcelIgnore\"><a href=\"#2-2-2-ExcelIgnore\" class=\"headerlink\" title=\"2.2.2 @ExcelIgnore\"></a>2.2.2 @ExcelIgnore</h3><p>默认所有字段都会和 Excel 去匹配，加了这个注解会忽略该字段</p>\n<h3 id=\"2-2-3-ExcelIgnoreUnannotated\"><a href=\"#2-2-3-ExcelIgnoreUnannotated\" class=\"headerlink\" title=\"2.2.3 @ExcelIgnoreUnannotated\"></a>2.2.3 @ExcelIgnoreUnannotated</h3><p>默认不管加不加 <code>ExcelProperty</code> 的注解的所有字段都会参与读写，加了 <code>ExcelIgnoreUnannotated</code> 注解以后，不加 <code>ExcelProperty</code> 注解的字段就不会参与</p>\n<h3 id=\"2-2-4-DateTimeFormat\"><a href=\"#2-2-4-DateTimeFormat\" class=\"headerlink\" title=\"2.2.4 @DateTimeFormat\"></a>2.2.4 @DateTimeFormat</h3><p>日期转换，用 <code>String</code> 去接收 Excel 日期格式的数据会调用这个注解，参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>空</td>\n<td>参照 <code>java.text.SimpleDateFormat</code> 书写即可</td>\n</tr>\n<tr>\n<td>use1904windowing</td>\n<td>自动选择</td>\n<td>Excel 中时间是存储 1900 年起的一个双精度浮点数，但是有时候默认开始日期是 1904，所以设置这个值改成默认 1904 年开始</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-5-NumberFormat\"><a href=\"#2-2-5-NumberFormat\" class=\"headerlink\" title=\"2.2.5 @NumberFormat\"></a>2.2.5 @NumberFormat</h3><p>数字转换，用 <code>String</code> 去接收 Excel 数字格式的数据会调用这个注解</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>空</td>\n<td>参照 <code>java.text.DecimalFormat</code> 书写即可</td>\n</tr>\n<tr>\n<td>roundingMode</td>\n<td>RoundingMode.HALF_UP</td>\n<td>格式化的时候设置舍入模式</td>\n</tr>\n</tbody></table>\n<h1 id=\"3-写-Excel（导出）\"><a href=\"#3-写-Excel（导出）\" class=\"headerlink\" title=\"3. 写 Excel（导出）\"></a>3. 写 Excel（导出）</h1><h2 id=\"3-1-常用参数\"><a href=\"#3-1-常用参数\" class=\"headerlink\" title=\"3.1 常用参数\"></a>3.1 常用参数</h2><ul>\n<li><code>WriteWorkbook</code>：可以理解成一个 Excel</li>\n<li><code>WriteSheet</code>：理解成一个 Excel 里面的一个表单</li>\n<li><code>WriteTable</code>：一个表单里面如果有多个实际用的表格，则可以用 <code>WriteTable</code></li>\n</ul>\n<h3 id=\"3-1-1-通用参数\"><a href=\"#3-1-1-通用参数\" class=\"headerlink\" title=\"3.1.1 通用参数\"></a>3.1.1 通用参数</h3><p><code>WriteWorkbook</code>，<code>WriteSheet</code> ，<code>WriteTable</code> 都会有的参数，如果为空，默认使用上级</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>converter</td>\n<td>空</td>\n<td>默认加载了很多转换器，这里可以加入不支持的字段</td>\n</tr>\n<tr>\n<td>writeHandler</td>\n<td>空</td>\n<td>写的处理器。可以实现 <code>WorkbookWriteHandler</code>，<code>SheetWriteHandler</code>，<code>RowWriteHandler</code>，<code>CellWriteHandler</code>，在写入 Excel 的不同阶段会调用</td>\n</tr>\n<tr>\n<td>relativeHeadRowIndex</td>\n<td>0</td>\n<td>写入到 Excel 和上面空开几行</td>\n</tr>\n<tr>\n<td>head</td>\n<td>空</td>\n<td>与 <code>clazz</code> 二选一。读取文件头对应的列表，会根据列表匹配数据，建议使用 class</td>\n</tr>\n<tr>\n<td>clazz</td>\n<td>空</td>\n<td>与 <code>head</code> 二选一。读取文件的头对应的 class，也可以使用注解。如果两个都不指定，则会读取全部数据</td>\n</tr>\n<tr>\n<td>autoTrim</td>\n<td>true</td>\n<td>会对头、读取数据等进行自动 trim</td>\n</tr>\n<tr>\n<td>use1904windowing</td>\n<td>false</td>\n<td>Excel 中时间是存储 1900 年起的一个双精度浮点数，但是有时候默认开始日期是 1904，所以设置这个值改成默认 1904 年开始</td>\n</tr>\n<tr>\n<td>useScientificFormat</td>\n<td>false</td>\n<td>数字转文本的时候在较大的数值的是否是否采用科学计数法</td>\n</tr>\n<tr>\n<td>needHead</td>\n<td>true</td>\n<td>是否需要写入头到 Excel</td>\n</tr>\n<tr>\n<td>useDefaultStyle</td>\n<td>true</td>\n<td>是否使用默认的样式</td>\n</tr>\n<tr>\n<td>automaticMergeHead</td>\n<td>true</td>\n<td>自动合并头，头中相同的字段上下左右都会去尝试匹配</td>\n</tr>\n<tr>\n<td>excludeColumnIndexes</td>\n<td>空</td>\n<td>需要排除对象中的 index 的数据</td>\n</tr>\n<tr>\n<td>excludeColumnFieldNames</td>\n<td>空</td>\n<td>需要排除对象中的字段的数据</td>\n</tr>\n<tr>\n<td>includeColumnIndexes</td>\n<td>空</td>\n<td>只要导出对象中的 index 的数据</td>\n</tr>\n<tr>\n<td>includeColumnFieldNames</td>\n<td>空</td>\n<td>只要导出对象中的字段的数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-2-WriteWorkbook\"><a href=\"#3-1-2-WriteWorkbook\" class=\"headerlink\" title=\"3.1.2 WriteWorkbook\"></a>3.1.2 WriteWorkbook</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">EasyExcel.write(fileName, DemoData.class)\n           &#x2F;&#x2F; 在 write 方法之后， 在 sheet 方法之前都是设置 WriteWorkbook 的参数\n           .sheet(&quot;模板&quot;)\n           .doWrite(() -&gt; &#123;\n               &#x2F;&#x2F; 分页查询数据\n               return data();\n           &#125;);</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>excelType</td>\n<td>空</td>\n<td>当前 Excel 的类型,支持 XLS、XLSX、CSV</td>\n</tr>\n<tr>\n<td>outputStream</td>\n<td>空</td>\n<td>与 <code>file</code> 二选一。写入文件的流</td>\n</tr>\n<tr>\n<td>file</td>\n<td>空</td>\n<td>与 <code>outputStream</code> 二选一。写入的文件</td>\n</tr>\n<tr>\n<td>templateInputStream</td>\n<td>空</td>\n<td>模板的文件流</td>\n</tr>\n<tr>\n<td>templateFile</td>\n<td>空</td>\n<td>模板文件</td>\n</tr>\n<tr>\n<td>charset</td>\n<td>Charset#defaultCharset</td>\n<td>只有 csv 文件有用，写入文件的时候使用的编码</td>\n</tr>\n<tr>\n<td>autoCloseStream</td>\n<td>true</td>\n<td>自动关闭写入的流</td>\n</tr>\n<tr>\n<td>password</td>\n<td>空</td>\n<td>读取文件的密码</td>\n</tr>\n<tr>\n<td>inMemory</td>\n<td>false</td>\n<td>是否在内存处理，默认会生成临时文件以节约内存。内存模式效率会更好，但是容易 OOM</td>\n</tr>\n<tr>\n<td>writeExcelOnException</td>\n<td>false</td>\n<td>写入过程中抛出异常了，是否尝试把数据写入到 Excel</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-3-WriteSheet\"><a href=\"#3-1-3-WriteSheet\" class=\"headerlink\" title=\"3.1.3 WriteSheet\"></a>3.1.3 WriteSheet</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">EasyExcel.write(fileName, DemoData.class)\n           .sheet(&quot;模板&quot;)\n            &#x2F;&#x2F; 在 sheet 方法之后，在 doWrite 方法之前都是设置 WriteSheet 的参数\n           .doWrite(() -&gt; &#123;\n               &#x2F;&#x2F; 分页查询数据\n               return data();\n           &#125;);</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sheetNo</td>\n<td>0</td>\n<td>需要写入的编码</td>\n</tr>\n<tr>\n<td>sheetName</td>\n<td>空</td>\n<td>需要些的 Sheet 名称，默认同 <code>sheetNo</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-4-WriteTable\"><a href=\"#3-1-4-WriteTable\" class=\"headerlink\" title=\"3.1.4 WriteTable\"></a>3.1.4 WriteTable</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">EasyExcel.write(fileName, DemoData.class)\n    .sheet(&quot;模板&quot;)\n    .table()\n    &#x2F;&#x2F; 在 table 方法之后， 在 doWrite 方法之前都是设置 WriteTable 的参数\n    .doWrite(() -&gt; &#123;\n        &#x2F;&#x2F; 分页查询数据\n        return data();\n    &#125;);</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tableNo</td>\n<td>0</td>\n<td>需要写入的编码</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-简单的写\"><a href=\"#3-2-简单的写\" class=\"headerlink\" title=\"3.2 简单的写\"></a>3.2 简单的写</h2><p>省略其他获取数据和定义接口等实现</p>\n<p><img src=\"https://img-blog.csdnimg.cn/dc6bfa96515a49d485f2e93e613d9902.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-2-1-定义表格实体类\"><a href=\"#3-2-1-定义表格实体类\" class=\"headerlink\" title=\"3.2.1 定义表格实体类\"></a>3.2.1 定义表格实体类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExcelDO &#123;\n\n    @ExcelProperty(&quot;员工ID&quot;)\n    private String empId;\n    @ExcelProperty(&quot;员工姓名&quot;)\n    private String empName;\n    @ExcelProperty(&quot;员工工号&quot;)\n    private String empCode;\n    @ExcelProperty(&quot;身份证号&quot;)\n    private String idcardNo;\n    @ExcelProperty(&quot;性别&quot;)\n    private String gender;\n    @ExcelProperty(&quot;电话号码&quot;)\n    private String phone;\n    @ExcelProperty(&quot;地址&quot;)\n    private String address;\n    @ExcelProperty(&quot;邮箱&quot;)\n    private String email;\n    @ExcelProperty(&quot;备注&quot;)\n    private String remark;\n    @ExcelProperty(&quot;有效标志&quot;)\n    private String valiFlag;\n    @ExcelProperty(&quot;创建时间&quot;)\n    private Timestamp createTime;\n    @ExcelIgnore\n    private Timestamp updateTime;\n&#125;</code></pre>\n\n<h3 id=\"3-2-2-实现类\"><a href=\"#3-2-2-实现类\" class=\"headerlink\" title=\"3.2.2 实现类\"></a>3.2.2 实现类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class ExcelServiceImpl implements ExcelService &#123;\n\n    @Resource\n    private EmployeeService employeeService;\n\n    @Override\n    public void simpleWrite() &#123;\n        String fileName &#x3D; &quot;D:&#x2F;&#x2F;simpleWrite&quot; + System.currentTimeMillis() + &quot;.xlsx&quot;;\n\n        &#x2F;&#x2F; 写法1\n        EasyExcel.write(fileName, ExcelDO.class)\n                .sheet(&quot;模板&quot;)\n                .doWrite(() -&gt; getData());\n  \n        &#x2F;&#x2F; 写法2\n        EasyExcel.write(fileName, ExcelDO.class).sheet(&quot;模板&quot;).doWrite(getData());\n  \n        &#x2F;&#x2F; 写法3\n        try (ExcelWriter excelWriter &#x3D; EasyExcel.write(fileName, ExcelDO.class).build()) &#123;\n            WriteSheet writeSheet &#x3D; EasyExcel.writerSheet(&quot;模板&quot;).build();\n            excelWriter.write(getData(), writeSheet);\n        &#125;\n    &#125;\n\n    private List&lt;ExcelDO&gt; getData() &#123;\n        List&lt;ExcelDO&gt; list &#x3D; ListUtils.newArrayList();\n\n        List records &#x3D; employeeService.getEmployee().getRecords();\n        list.addAll(records);\n\n        return list;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-3-Controller\"><a href=\"#3-2-3-Controller\" class=\"headerlink\" title=\"3.2.3 Controller\"></a>3.2.3 Controller</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ExcelController &#123;\n\n    @Resource\n    private ExcelService excelService;\n\n    @PostMapping(&quot;&#x2F;simpleWrite&quot;)\n    public void simpleWrite() &#123;\n        excelService.simpleWrite();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-4-定义特殊格式转换-Convert\"><a href=\"#3-2-4-定义特殊格式转换-Convert\" class=\"headerlink\" title=\"3.2.4 定义特殊格式转换 Convert\"></a>3.2.4 定义特殊格式转换 Convert</h3><p>当使用 <code>LocalDateTime</code> 或 <code>Timestamp</code> 等格式时，会报 ExcelWriteDataConvertException，此时需要自定义类型转换器</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2b91c753420448719f11428db95418ab.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>TimestampConvert</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TimestampConvert implements Converter&lt;Timestamp&gt; &#123;\n\n    &#x2F;&#x2F; 在Java中数据类型\n    @Override\n    public Class&lt;Timestamp&gt; supportJavaTypeKey() &#123;\n        return Timestamp.class;\n    &#125;\n\n    &#x2F;&#x2F; 在Excel中的数据类型\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey() &#123;\n        return CellDataTypeEnum.STRING;\n    &#125;\n\n    &#x2F;&#x2F; 将Excel的数据类型转为Java数据类型\n    @Override\n    public Timestamp convertToJavaData(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty,\n                                       GlobalConfiguration globalConfiguration) throws Exception &#123;\n        return Timestamp.valueOf(cellData.getStringValue());\n    &#125;\n\n    &#x2F;&#x2F; 将Java的数据类型转为Excel数据类型\n    @Override\n    public WriteCellData&lt;?&gt; convertToExcelData(Timestamp value, ExcelContentProperty contentProperty,\n                                               GlobalConfiguration globalConfiguration) throws Exception &#123;\n        return new WriteCellData&lt;&gt;(value.toString());\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-5-Convert-使用\"><a href=\"#3-2-5-Convert-使用\" class=\"headerlink\" title=\"3.2.5 Convert 使用\"></a>3.2.5 Convert 使用</h3><p><strong>1、找到需要转换的字段，在 <code>@ExcelProperty</code> 上添加 converter 属性&#96;</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/ded8d84e44be464eaf57e139bba772c8.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>2、<code>ExcelWriterBuilders</code> 是支持对单次的操作添加 converter 的，那样就不需要为每个需要转换的字段单独添加 converter 了</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/8010db58c65a4322897d511aa7403f37.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>3、全局 Convert</strong></p>\n<p>即将自定义的 Convert 添加到 EasyExcel 的 Convert Map 转换器 Map 里（<code>Map&lt;ConverterKey, Converter&lt;?&gt;&gt; converterMap()</code>）</p>\n<p>详细可见：<a href=\"https://blog.csdn.net/fsadkjl/article/details/105823830\">EasyExcel 自定义 Converter 全局加载器以及加载 Converter</a></p>\n<p><strong>4、第二种方法还能这样写，在单次操作中加入转换器 Map 里</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void simpleWrite() &#123;\n        String fileName &#x3D; &quot;D:&#x2F;&#x2F;simpleWrite&quot; + System.currentTimeMillis() + &quot;.xlsx&quot;;\n\n&#x2F;&#x2F;        EasyExcel.write(fileName, ExcelDO.class)\n&#x2F;&#x2F;                .registerConverter(new TimestampConvert())\n&#x2F;&#x2F;                .sheet(&quot;模板&quot;)\n&#x2F;&#x2F;                .doWrite(() -&gt; getData());\n        ExcelWriter excelWriter &#x3D; EasyExcel.write(fileName, ExcelDO.class).build();\n\n        TimestampConvert timestampConvert &#x3D; new TimestampConvert();\n        excelWriter.writeContext().currentWriteHolder().converterMap()\n                .put(ConverterKeyBuild.buildKey(timestampConvert.supportJavaTypeKey()), timestampConvert);\n        excelWriter.writeContext().currentWriteHolder().converterMap()\n                .put(ConverterKeyBuild.buildKey(timestampConvert.supportJavaTypeKey(), timestampConvert.supportExcelTypeKey()), timestampConvert);\n\n        WriteSheet writeSheet &#x3D; EasyExcel.writerSheet(&quot;模板&quot;).build();\n        excelWriter.write(getData(), writeSheet);\n&#125;</code></pre>\n\n<h3 id=\"3-2-6-定义内容转换-Convert\"><a href=\"#3-2-6-定义内容转换-Convert\" class=\"headerlink\" title=\"3.2.6 定义内容转换 Convert\"></a>3.2.6 定义内容转换 Convert</h3><p>导出后，发现性别和有效标志等字段，显示的是数据库中存储的数字，应该将其转换为对应的含义</p>\n<p><img src=\"https://img-blog.csdnimg.cn/317f3e49d93d4dd8a300f4acebbf2f06.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>GenderConverter</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class GenderConverter implements Converter&lt;String&gt; &#123;\n\n    @Override\n    public Class&lt;String&gt; supportJavaTypeKey() &#123;\n        return String.class;\n    &#125;\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey() &#123;\n        return CellDataTypeEnum.STRING;\n    &#125;\n\n    @Override\n    public String convertToJavaData(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) throws Exception &#123;\n        return &quot;男&quot;.equals(cellData.getStringValue()) ? &quot;1&quot; : &quot;0&quot;;\n    &#125;\n\n    @Override\n    public WriteCellData&lt;?&gt; convertToExcelData(String value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) throws Exception &#123;\n        return new WriteCellData&lt;&gt;(value.equals(&quot;1&quot;) ? &quot;男&quot; : &quot;女&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>使用 Convert 的第一种使用方法</p>\n<p><img src=\"https://img-blog.csdnimg.cn/e2cafd24c51e4d6da78754097f2dd553.png\" alt=\"在这里插入图片描述\"></p>\n<p>再导出后，性别已经由数字转换为对应的含义</p>\n<p><img src=\"https://img-blog.csdnimg.cn/66ec47f6dc834a918bc6344c4d2bf0a9.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-3-Web-中的写（下载）\"><a href=\"#3-3-Web-中的写（下载）\" class=\"headerlink\" title=\"3.3 Web 中的写（下载）\"></a>3.3 Web 中的写（下载）</h2><p>与简单的写类似</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ExcelController &#123;\n\n    @Resource\n    private ExcelService excelService;\n\n    @GetMapping(&quot;&#x2F;download&quot;)\n    public void download(HttpServletResponse response) throws IOException &#123;\n        response.setContentType(&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);\n        response.setCharacterEncoding(&quot;UTF-8&quot;);\n        &#x2F;&#x2F; 这里 URLEncoder.encode可以防止中文乱码，和 EasyExcel 没有关系\n        String fileName &#x3D; URLEncoder.encode(&quot;测试&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);\n        response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*&#x3D;utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);\n\n        EasyExcel.write(response.getOutputStream(), ExcelDO.class).sheet(&quot;模板&quot;).doWrite(excelService.getData());\n    &#125;\n&#125;</code></pre>\n\n<p>浏览器地址栏输入接口地址，会弹出文件下载</p>\n<p><img src=\"https://img-blog.csdnimg.cn/90e7a7be977b4e94a3b6c9bd346f5d0f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/c4bdcc0f963b4bfb9c6a0a00e9675ac0.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>下载失败的时候返回 JSON</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ExcelController &#123;\n\n    @Resource\n    private ExcelService excelService;\n\n    @GetMapping(&quot;&#x2F;download&quot;)\n    public void download(HttpServletResponse response) throws IOException &#123;\n        try &#123;\n            &#x2F;&#x2F; 正确设置 response 的 content-type；即设置正确的 mime type\n            response.setContentType(&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);\n            response.setCharacterEncoding(&quot;UTF-8&quot;);\n            &#x2F;&#x2F; 这里 URLEncoder.encode可以防止中文乱码 当然和 EasyExcel 没有关系\n            String fileName &#x3D; URLEncoder.encode(&quot;测试&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);\n            response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*&#x3D;utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);\n  \n&#x2F;&#x2F;            int i &#x3D; 1 &#x2F; 0;\n            EasyExcel.write(response.getOutputStream(), ExcelDO.class).sheet(&quot;模板&quot;).doWrite(excelService.getData());\n        &#125; catch (Exception e) &#123;\n            response.reset();\n            response.setContentType(&quot;application&#x2F;json&quot;);\n            response.setCharacterEncoding(&quot;UTF-8&quot;);\n  \n            response.getWriter().println(JSON.toJSONString(Result.fail(&quot;下载文件失败&quot;)));\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/039838c46b364719a414c63ae7e567b9.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-读-Excel（导入）\"><a href=\"#4-读-Excel（导入）\" class=\"headerlink\" title=\"4. 读 Excel（导入）\"></a>4. 读 Excel（导入）</h1><h2 id=\"4-1-常用参数\"><a href=\"#4-1-常用参数\" class=\"headerlink\" title=\"4.1 常用参数\"></a>4.1 常用参数</h2><ul>\n<li><code>ReadWorkbook</code> 可以理解成一个 excel</li>\n<li><code>ReadSheet</code> 理解成一个 excel 里面的一个表单</li>\n</ul>\n<h3 id=\"4-1-1-通用参数\"><a href=\"#4-1-1-通用参数\" class=\"headerlink\" title=\"4.1.1 通用参数\"></a>4.1.1 通用参数</h3><p><code>ReadWorkbook</code>,<code>ReadSheet</code> 都会有的参数，如果为空，默认使用上级</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>converter</td>\n<td>空</td>\n<td>默认加载了很多转换器，这里可以加入不支持的字段</td>\n</tr>\n<tr>\n<td>readListener</td>\n<td>空</td>\n<td>可以注册多个监听器，读取 Excel 的时候会不断的回调监听器中的方法</td>\n</tr>\n<tr>\n<td>headRowNumber</td>\n<td>1</td>\n<td>excel 中头的行数，默认 1 行</td>\n</tr>\n<tr>\n<td>head</td>\n<td>空</td>\n<td>与 <code>clazz</code> 二选一。读取文件头对应的列表，会根据列表匹配数据，建议使用 class</td>\n</tr>\n<tr>\n<td>clazz</td>\n<td>空</td>\n<td>与 <code>head</code> 二选一。读取文件的头对应的 class，也可以使用注解。如果两个都不指定，则会读取全部数据</td>\n</tr>\n<tr>\n<td>autoTrim</td>\n<td>true</td>\n<td>会对头、读取数据等进行自动 trim</td>\n</tr>\n<tr>\n<td>use1904windowing</td>\n<td>false</td>\n<td>Excel 中时间是存储 1900 年起的一个双精度浮点数，但是有时候默认开始日期是 1904，所以设置这个值改成默认 1904 年开始</td>\n</tr>\n<tr>\n<td>useScientificFormat</td>\n<td>false</td>\n<td>数字转文本的时候在较大的数值的是否是否采用科学计数法</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-1-2-ReadWorkbook\"><a href=\"#4-1-2-ReadWorkbook\" class=\"headerlink\" title=\"4.1.2 ReadWorkbook\"></a>4.1.2 ReadWorkbook</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">EasyExcel.read(fileName, DemoData.class, new DemoDataListener())\n          &#x2F;&#x2F; 在 read 方法之后， 在 sheet方法之前都是设置ReadWorkbook的参数\n          .sheet()\n          .doRead();</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>excelType</td>\n<td>空</td>\n<td>当前 excel 的类型,支持 XLS、XLSX、CSV</td>\n</tr>\n<tr>\n<td>inputStream</td>\n<td>空</td>\n<td>与 <code>file</code> 二选一。读取文件的流，如果接收到的是流就只用，不用流建议使用 <code>file</code> 参数。因为使用了 <code>inputStream</code> easyexcel 会帮忙创建临时文件，最终还是 <code>file</code></td>\n</tr>\n<tr>\n<td>file</td>\n<td>空</td>\n<td>与 <code>inputStream</code> 二选一。读取文件的文件。</td>\n</tr>\n<tr>\n<td>mandatoryUseInputStream</td>\n<td>false</td>\n<td>强制使用 <code>inputStream</code> 来创建对象，性能会变差，但是不会创建临文件。</td>\n</tr>\n<tr>\n<td>charset</td>\n<td>Charset#defaultCharset</td>\n<td>只有 csv 文件有用，读取文件的时候使用的编码</td>\n</tr>\n<tr>\n<td>autoCloseStream</td>\n<td>true</td>\n<td>自动关闭读取的流。</td>\n</tr>\n<tr>\n<td>readCache</td>\n<td>空</td>\n<td>默认小于 5M 用 内存，超过 5M 会使用 <code>EhCache</code>,这里不建议使用这个参数。</td>\n</tr>\n<tr>\n<td>readCacheSelector</td>\n<td>SimpleReadCacheSelector</td>\n<td>用于选择什么时候用内存去存储临时数据，什么时候用磁盘存储临时数据</td>\n</tr>\n<tr>\n<td>ignoreEmptyRow</td>\n<td>true</td>\n<td>忽略空的行</td>\n</tr>\n<tr>\n<td>password</td>\n<td>空</td>\n<td>读取文件的密码</td>\n</tr>\n<tr>\n<td>xlsxSAXParserFactoryName</td>\n<td>空</td>\n<td>指定 sax 读取使用的 class 的名称，例如：<code>com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl</code></td>\n</tr>\n<tr>\n<td>useDefaultListener</td>\n<td>true</td>\n<td><code>@since 2.1.4</code> 默认会加入 <code>ModelBuildEventListener</code> 来帮忙转换成传入 <code>class</code> 的对象，设置成 <code>false</code> 后将不会协助转换对象，自定义的监听器会接收到 <code>Map&lt;Integer,CellData&gt;</code> 对象，如果还想继续接听到 <code>class</code> 对象，请调用 <code>readListener</code> 方法，加入自定义的 <code>beforeListener</code>、 <code>ModelBuildEventListener</code>、 自定义的 <code>afterListener</code> 即可。</td>\n</tr>\n<tr>\n<td>extraReadSet</td>\n<td>空</td>\n<td>额外需要读取内容的 set，默认不读取这些数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-1-3-ReadSheet\"><a href=\"#4-1-3-ReadSheet\" class=\"headerlink\" title=\"4.1.3 ReadSheet\"></a>4.1.3 ReadSheet</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">EasyExcel.read(fileName, DemoData.class, new DemoDataListener())\n          .sheet()\n          &#x2F;&#x2F; 在 sheet 方法之后， 在 doRead方法之前都是设置ReadSheet的参数\n          .doRead();</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sheetNo</td>\n<td>0</td>\n<td>需要读取 Sheet 的编码，建议使用这个来指定读取哪个 Sheet</td>\n</tr>\n<tr>\n<td>sheetName</td>\n<td>空</td>\n<td>根据名字去匹配 Sheet</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-2-简单的读\"><a href=\"#4-2-简单的读\" class=\"headerlink\" title=\"4.2 简单的读\"></a>4.2 简单的读</h2><p>读取的表格就使用上面导出的表格</p>\n<h3 id=\"4-2-1-表格实体类和-Convert\"><a href=\"#4-2-1-表格实体类和-Convert\" class=\"headerlink\" title=\"4.2.1 表格实体类和 Convert\"></a>4.2.1 表格实体类和 Convert</h3><p>表格实体类和 Convert 就使用写 Excel 的实体类和 Convert</p>\n<h3 id=\"4-2-2-实现类\"><a href=\"#4-2-2-实现类\" class=\"headerlink\" title=\"4.2.2 实现类\"></a>4.2.2 实现类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class ExcelServiceImpl implements ExcelService &#123;\n\n    @Resource\n    private EmployeeDAO employeeDAO;\n\n    public void simpleRead() &#123;\n        String fileName &#x3D; &quot;D:\\\\simpleWrite1665735316967.xlsx&quot;;\n\n        &#x2F;&#x2F; 写法1：不用额外写一个 ExcelListener\n        &#x2F;&#x2F; 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭\n        &#x2F;&#x2F; 这里每次会读取100条数据 然后返回过来 直接调用使用数据就行\n        EasyExcel.read(fileName, ExcelDO.class, new PageReadListener&lt;ExcelDO&gt;(excelDOS -&gt; &#123;\n            for (ExcelDO excelDO : excelDOS) &#123;\n                System.out.println(excelDO);\n            &#125;\n        &#125;)).sheet().doRead();\n\n        &#x2F;&#x2F; 写法2：匿名内部类 不用额外写一个 ExcelListener\n        EasyExcel.read(fileName, ExcelDO.class, new ReadListener&lt;ExcelDO&gt;() &#123;\n            &#x2F;&#x2F; 单次缓存的数据量\n            public static final int BATCH_COUNT &#x3D; 100;\n            &#x2F;&#x2F; 临时存储\n            private List&lt;ExcelDO&gt; cachedDataList &#x3D; ListUtils.newArrayListWithExpectedSize(BATCH_COUNT);\n\n            @Override\n            public void invoke(ExcelDO data, AnalysisContext context) &#123;\n                cachedDataList.add(data);\n                if (cachedDataList.size() &gt;&#x3D; BATCH_COUNT) &#123;\n                    saveData();\n                    &#x2F;&#x2F; 存储完成清理 list\n                    cachedDataList &#x3D; ListUtils.newArrayListWithExpectedSize(BATCH_COUNT);\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 所有数据解析完成了 都会来调用\n            @Override\n            public void doAfterAllAnalysed(AnalysisContext context) &#123;\n                saveData();\n            &#125;\n\n            &#x2F;&#x2F; 存储到数据库，批量插入\n            private void saveData() &#123;\n                for (ExcelDO excelDO : cachedDataList) &#123;\n                    System.out.println(excelDO);\n                &#125;\n            &#125;\n        &#125;).sheet().doRead();\n\n        &#x2F;&#x2F; 写法3：有个很重要的点 ExcelListener 不能被Spring管理，要每次读取Excel都要new,然后里面用到Spring可以构造方法传进去\n        EasyExcel.read(fileName, ExcelDO.class, new ExcelListener(employeeDAO)).sheet().doRead();\n\n        &#x2F;&#x2F; 写法4：一个文件一个reader\n        try (ExcelReader excelReader &#x3D; EasyExcel.read(fileName, ExcelDO.class, new ExcelListener(employeeDAO)).build()) &#123;\n            &#x2F;&#x2F; 构建一个sheet 这里可以指定名字或者no\n            ReadSheet readSheet &#x3D; EasyExcel.readSheet(0).build();\n            &#x2F;&#x2F; 读取一个sheet\n            excelReader.read(readSheet);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"4-2-3-监听器\"><a href=\"#4-2-3-监听器\" class=\"headerlink\" title=\"4.2.3 监听器\"></a>4.2.3 监听器</h3><p>即把第二种写法的匿名内部类单独抽出来，<strong>监听器不能被 Spring 管理，每次读取 Excel 都要 new，然后里面用到 Spring 可以构造方法传进去</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ExcelListener implements ReadListener&lt;ExcelDO&gt; &#123;\n\n    &#x2F;&#x2F; 单次缓存的数据量\n    public static final int BATCH_COUNT &#x3D; 100;\n    &#x2F;&#x2F; 临时存储\n    private List&lt;ExcelDO&gt; cachedDataList &#x3D; ListUtils.newArrayListWithExpectedSize(BATCH_COUNT);\n\n    private EmployeeDAO employeeDAO;\n\n    &#x2F;**\n     * 如果使用了Spring，使用这个构造方法。每次创建Listener的时候需要把Spring管理的类传进来\n     *\n     * @param employeeDAO\n     *&#x2F;\n    public ExcelListener(EmployeeDAO employeeDAO) &#123;\n        this.employeeDAO &#x3D; employeeDAO;\n    &#125;\n\n    &#x2F;**\n     * 这个每一条数据解析都会来调用\n     *\n     * @param data    one row value. Is same as &#123;@link AnalysisContext#readRowHolder()&#125;\n     * @param context\n     *&#x2F;\n    @Override\n    public void invoke(ExcelDO data, AnalysisContext context) &#123;\n        cachedDataList.add(data);\n        &#x2F;&#x2F; 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM\n        if (cachedDataList.size() &gt;&#x3D; BATCH_COUNT) &#123;\n            saveData();\n            &#x2F;&#x2F; 存储完成清理 list\n            cachedDataList &#x3D; ListUtils.newArrayListWithExpectedSize(BATCH_COUNT);\n        &#125;\n    &#125;\n\n    &#x2F;**\n     * 所有数据解析完成了 都会来调用\n     *\n     * @param context\n     *&#x2F;\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext context) &#123;\n        &#x2F;&#x2F; 这里也要保存数据，确保最后遗留的数据也存储到数据库\n        saveData();\n    &#125;\n\n    &#x2F;&#x2F; 存储到数据库，批量存储\n    private void saveData() &#123;\n&#x2F;&#x2F;        employeeDAO.save(cachedDataList);\n        for (ExcelDO excelDO : cachedDataList) &#123;\n            System.out.println(excelDO);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"4-2-4-Controller\"><a href=\"#4-2-4-Controller\" class=\"headerlink\" title=\"4.2.4 Controller\"></a>4.2.4 Controller</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ExcelController &#123;\n\n    @Resource\n    private ExcelService excelService;\n\n    @PostMapping(&quot;&#x2F;simpleRead&quot;)\n    public void simpleRead() &#123;\n        excelService.simpleRead();\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/a1b8762d83704375acdf861d5e02852b.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-3-Web-中的读（上传）\"><a href=\"#4-3-Web-中的读（上传）\" class=\"headerlink\" title=\"4.3 Web 中的读（上传）\"></a>4.3 Web 中的读（上传）</h2><p>与简单的读类似</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ExcelController &#123;\n\n    @Resource\n    private EmployeeDAO employeeDAO;\n\n    @PostMapping(&quot;upload&quot;)\n    public Result upload(MultipartFile file) throws IOException &#123;\n        EasyExcel.read(file.getInputStream(), ExcelDO.class, new ExcelListener(employeeDAO)).sheet().doRead();\n        return Result.success(&quot;上传成功&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/e6b2e657fa294fd99207269fee4b13f7.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/9ed0a157a0f84bf3af0aa11895b73433.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>更多读写相关操作详见官方文档：<a href=\"https://easyexcel.opensource.alibaba.com/docs/current/\">关于 Easyexcel | Easy Excel (alibaba.com)</a></strong></p>\n","feature":false,"text":"1. 概述官网地址：EasyExcel 官方文档 - 基于 Java 的 Excel 处理工具 | Easy Excel (alibaba.com) EasyExcel 是一个基于 Java 的、快速、简洁、解决大文件内存溢出的 Excel 处理工具。他能让你在不用考虑性能、内存...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":8,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"Excel","slug":"Excel","count":1,"path":"api/tags/Excel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">2. 常用注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-ExcelProperty\"><span class=\"toc-text\">2.2.1 @ExcelProperty</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-ExcelIgnore\"><span class=\"toc-text\">2.2.2 @ExcelIgnore</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-3-ExcelIgnoreUnannotated\"><span class=\"toc-text\">2.2.3 @ExcelIgnoreUnannotated</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-4-DateTimeFormat\"><span class=\"toc-text\">2.2.4 @DateTimeFormat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-5-NumberFormat\"><span class=\"toc-text\">2.2.5 @NumberFormat</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%86%99-Excel%EF%BC%88%E5%AF%BC%E5%87%BA%EF%BC%89\"><span class=\"toc-text\">3. 写 Excel（导出）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.1 常用参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E9%80%9A%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.1.1 通用参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-WriteWorkbook\"><span class=\"toc-text\">3.1.2 WriteWorkbook</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-3-WriteSheet\"><span class=\"toc-text\">3.1.3 WriteSheet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-4-WriteTable\"><span class=\"toc-text\">3.1.4 WriteTable</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E7%AE%80%E5%8D%95%E7%9A%84%E5%86%99\"><span class=\"toc-text\">3.2 简单的写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1-%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%A0%BC%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">3.2.1 定义表格实体类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">3.2.2 实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-3-Controller\"><span class=\"toc-text\">3.2.3 Controller</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-4-%E5%AE%9A%E4%B9%89%E7%89%B9%E6%AE%8A%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2-Convert\"><span class=\"toc-text\">3.2.4 定义特殊格式转换 Convert</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-5-Convert-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.2.5 Convert 使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-6-%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E8%BD%AC%E6%8D%A2-Convert\"><span class=\"toc-text\">3.2.6 定义内容转换 Convert</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-Web-%E4%B8%AD%E7%9A%84%E5%86%99%EF%BC%88%E4%B8%8B%E8%BD%BD%EF%BC%89\"><span class=\"toc-text\">3.3 Web 中的写（下载）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E8%AF%BB-Excel%EF%BC%88%E5%AF%BC%E5%85%A5%EF%BC%89\"><span class=\"toc-text\">4. 读 Excel（导入）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.1 常用参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-1-%E9%80%9A%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.1.1 通用参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-2-ReadWorkbook\"><span class=\"toc-text\">4.1.2 ReadWorkbook</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-3-ReadSheet\"><span class=\"toc-text\">4.1.3 ReadSheet</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%BB\"><span class=\"toc-text\">4.2 简单的读</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-1-%E8%A1%A8%E6%A0%BC%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%92%8C-Convert\"><span class=\"toc-text\">4.2.1 表格实体类和 Convert</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-2-%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">4.2.2 实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-3-%E7%9B%91%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">4.2.3 监听器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-4-Controller\"><span class=\"toc-text\">4.2.4 Controller</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-Web-%E4%B8%AD%E7%9A%84%E8%AF%BB%EF%BC%88%E4%B8%8A%E4%BC%A0%EF%BC%89\"><span class=\"toc-text\">4.3 Web 中的读（上传）</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"DataGrip 下载安装及使用教程","uid":"245c60f16cbe1e87f80f18c4eff1ab55","slug":"BlogRepository/开发工具及环境/DataGrip 下载安装及使用教程","date":"2022-10-18T07:29:19.000Z","updated":"2023-03-13T19:13:04.948Z","comments":true,"path":"api/articles/BlogRepository/开发工具及环境/DataGrip 下载安装及使用教程.json","keywords":null,"cover":"https://cover.png","text":"1. 下载官网下载：DataGrip: The Cross-Platform IDE for Databases &amp;&amp; SQL by JetBrains 点击 Download 跳转到下载界面 下载最新版本的可以直接点击 Download 下载，下载其他版本的点击...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"开发工具及环境","slug":"开发工具及环境","count":11,"path":"api/categories/开发工具及环境.json"}],"tags":[{"name":"数据库","slug":"数据库","count":3,"path":"api/tags/数据库.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Spring Validation 使用总结","uid":"e080051a012a1ddc507e547da7a01efc","slug":"BlogRepository/Spring/Spring Validation 使用总结","date":"2022-10-12T09:35:57.000Z","updated":"2023-03-13T19:13:04.940Z","comments":true,"path":"api/articles/BlogRepository/Spring/Spring Validation 使用总结.json","keywords":null,"cover":"https://cover.png","text":"1. 概述及常用注解数据的校验是交互式网站一个不可或缺的功能，前端的 JS 校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。但是为了避免用户绕过浏览器，使用 HTTP 工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}