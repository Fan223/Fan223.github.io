{"title":"Spring Security + Vue2 + Element-UI 总结","uid":"d525d12dddb4f5a1f4b9cd14617eb49e","slug":"BlogRepository/开发实践/Spring Security + Vue2 + Element-UI 总结","date":"2022-05-08T20:03:09.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/开发实践/Spring Security + Vue2 + Element-UI 总结.json","keywords":null,"cover":"https://cover.png","content":"<p><strong>Vue 基础部分见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/123573568\">https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;123573568</a></strong><br><strong>Vue 开发部分见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/123789272\">https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;123789272</a></strong></p>\n<h1 id=\"1-Vue-UI-创建项目\"><a href=\"#1-Vue-UI-创建项目\" class=\"headerlink\" title=\"1. Vue UI 创建项目\"></a>1. Vue UI 创建项目</h1><p><strong>Vue UI 是 @vue&#x2F;cli3.0 增加的一个可视化项目管理工具，可以运行项目、打包项目，检查等操作</strong></p>\n<p><strong>1、在命令行输入 vue ui，运行</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152529.png\"></p>\n<p><strong>2、进入可视化界面</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152544.png\"></p>\n<p><strong>3、选择项目路径，新建项目</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152559.png\"></p>\n<p><strong>4、输入项目名，下一步</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152614.png\"></p>\n<p><strong>5、可以选择预设或者自定义，默认预设即可。这里选择手动，下一步</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152628.png\"></p>\n<p><strong>6、选择功能，加上 Router 和 Vuex</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152642.png\"></p>\n<p><strong>7、选择 Vue 的版本和路由的模式，这里选择 Vue2 与 不使用 History 模式</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152656.png\"></p>\n<p><strong>8、不保存预设</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152709.png\"></p>\n<p><strong>9、创建完成</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152721.png\"></p>\n<p><strong>10、启动项目，选择 任务 –&gt; serve –&gt; 运行，后续进入项目可通过命令行启动</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152733.png\"></p>\n<p><strong>11、启动成功</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152748.png\"></p>\n<p><strong>12、访问 <a href=\"http://localhost:8080/\">localhost:8080</a>，初始界面，因没有选择 History 路由模式，地址会带上 # 号</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152802.png\"></p>\n<p><strong>13、项目初始结构</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152816.png\"></p>\n<h1 id=\"2-Vue-项目搭建\"><a href=\"#2-Vue-项目搭建\" class=\"headerlink\" title=\"2. Vue 项目搭建\"></a>2. Vue 项目搭建</h1><h2 id=\"2-1-引入-Element-UI、Axios、Mockjs、QS\"><a href=\"#2-1-引入-Element-UI、Axios、Mockjs、QS\" class=\"headerlink\" title=\"2.1 引入 Element-UI、Axios、Mockjs、QS\"></a>2.1 引入 Element-UI、Axios、Mockjs、QS</h2><h3 id=\"2-1-1-引入-Element-UI\"><a href=\"#2-1-1-引入-Element-UI\" class=\"headerlink\" title=\"2.1.1 引入 Element-UI\"></a>2.1.1 引入 Element-UI</h3><ol>\n<li>安装：<code>npm install element-ui -S</code></li>\n<li><strong>完整引入：</strong> 在 main.js 引入<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Element UI 组件库\nimport ElementUI from &#39;element-ui&#39;;\n&#x2F;&#x2F; 引入 Element UI 全部样式\nimport &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;\n&#x2F;&#x2F; 应用 Element UI\nVue.use(ElementUI);</code></pre></li>\n<li><strong>按需引入：</strong><ol>\n<li>安装：<code>npm install babel-plugin-component -D </code>，-D 表示开发依赖</li>\n<li>将 babel.config.js 修改为：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  presets: [ &#x2F;&#x2F; 预设\n    &#39;@vue&#x2F;cli-plugin-babel&#x2F;preset&#39;, &#x2F;&#x2F; vue-cli 原有的\n    [&#39;@babel&#x2F;preset-env&#39;, &#123; modules: false &#125;] &#x2F;&#x2F; 在原有的后面添加\n  ],\n  plugins: [\n    [\n      &quot;component&quot;,\n      &#123;\n        &quot;libraryName&quot;: &quot;element-ui&quot;,\n        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;\n      &#125;\n    ]\n  ]\n&#125;</code></pre></li>\n<li>在 main.js 引入需要的部分组件：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Button、Select 和 Option，按钮、选择器和选项\nimport &#123; Button, Select, Option &#125; from &#39;element-ui&#39;;\n&#x2F;&#x2F; Button.name 即使用时标签的默认名字 &lt;el-button&gt;&lt;&#x2F;el-button&gt;，el-xxx\nVue.component(Button.name, Button);\n&#x2F;&#x2F; 可以简写为：Vue.use(Button)\nVue.component(Select.name, Select);\n&#x2F;&#x2F; 可以自定义标签名字，则使用时标签也为自定义的标签名字而不是默认的 el-xxx\nVue.component(&#39;fan-option&#39;, Option)</code></pre></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2-1-2-引入-Axios、Mockjs\"><a href=\"#2-1-2-引入-Axios、Mockjs\" class=\"headerlink\" title=\"2.1.2 引入 Axios、Mockjs\"></a>2.1.2 引入 Axios、<a href=\"http://mockjs.com/?fileGuid=HXqVy6jx8qkWKPJq\">Mockjs</a></h3><p><strong>安装 axios：<code>npm install axios --save</code></strong><br><strong>安装 mockjs：<code>npm install mockjs</code></strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152836.png\"></p>\n<p><strong>在 src 目录下 新建 mock&#x2F;index.js</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152854.png\"></p>\n<p><strong>在 main.js 里引入<br>这里引入了 Mockjs，所有的请求都会被拦截。与后端接口对接时，需要在 main.js 中去掉 Mockjs 的引入，这样前端就可以访问后端的接口而不被 Mock 拦截</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 App 组件\nimport App from &#39;.&#x2F;App.vue&#39;\n&#x2F;&#x2F; 引入 store\nimport store from &#39;.&#x2F;store&#39;\n&#x2F;&#x2F; 引入 VueRouter\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入路由器\nimport router from &#39;.&#x2F;router&#x2F;index.js&#39;\n&#x2F;&#x2F; 引入 Axios\nimport axios from &#39;axios&#39;\n&#x2F;&#x2F; 引入 Element UI 组件库\nimport ElementUI from &#39;element-ui&#39;;\n&#x2F;&#x2F; 引入 Element UI 全部样式\nimport &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;\n\nVue.config.productionTip &#x3D; false\n&#x2F;&#x2F; 全局应用 Axios\nVue.prototype.$axios &#x3D; axios\n&#x2F;&#x2F; 应用 VueRouter 插件\nVue.use(VueRouter)\n&#x2F;&#x2F; 应用 Element UI\nVue.use(ElementUI);\n&#x2F;&#x2F; 引入mock数据\nrequire(&#39;.&#x2F;mock&#x2F;index.js&#39;)\n\nnew Vue(&#123;\n  store,\n  router,\n  render: h &#x3D;&gt; h(App),\n&#125;).$mount(&#39;#app&#39;)</code></pre>\n\n<h3 id=\"2-1-3-引入-QS\"><a href=\"#2-1-3-引入-QS\" class=\"headerlink\" title=\"2.1.3 引入 QS\"></a>2.1.3 引入 QS</h3><p><strong>安装 qs：<code>npm install qs</code></strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152925.png\"></p>\n<p><strong>在 main.js 文件中引入</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 qs\nimport qs from &#39;qs&#39;\n&#x2F;&#x2F; 配置全局 qs 属性\nVue.prototype.$qs &#x3D; qs</code></pre>\n\n<h2 id=\"2-2-登录页\"><a href=\"#2-2-登录页\" class=\"headerlink\" title=\"2.2 登录页\"></a>2.2 登录页</h2><p><img src=\"http://img.fan223.cn/2023/04/20230419152946.png\"></p>\n<h3 id=\"2-2-1-新建登录组件\"><a href=\"#2-2-1-新建登录组件\" class=\"headerlink\" title=\"2.2.1 新建登录组件\"></a>2.2.1 新建登录组件</h3><p><strong>在 views 目录下，将原来的默认组件删掉，新建一个 Login 组件</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419152957.png\"></p>\n<p><strong>1、使用 Element-UI 的 Layout 布局，加上表单验证</strong></p>\n<ol>\n<li>:model 表示表单数据对象</li>\n<li>:rules 表示表单验证规则</li>\n<li>:status-icon 表示输入框中校验结果反馈图标</li>\n<li>:hide-required-asterisk 表示表单验证必填项的 * 号</li>\n<li>label 表示标签名字</li>\n<li>label-width 表示标签宽度</li>\n<li>ref 给元素注册引用信息</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-row&gt;\n    &lt;el-col :span&#x3D;&quot;24&quot;&gt;\n\n      &lt;el-form\n        :model&#x3D;&quot;loginForm&quot;\n        ref&#x3D;&quot;loginForm&quot;\n        :rules&#x3D;&quot;rules&quot;\n        :status-icon&#x3D;&quot;true&quot;\n        :hide-required-asterisk&#x3D;&quot;true&quot;\n        @keyup.enter.native&#x3D;&quot;login&quot;\n      &gt;\n        &lt;el-form-item&gt;\n          &lt;div class&#x3D;&quot;el-form-login-title&quot;&gt;系统登录&lt;&#x2F;div&gt;\n        &lt;&#x2F;el-form-item&gt;\n        &lt;el-form-item\n          prop&#x3D;&quot;username&quot;\n          label&#x3D;&quot;用户名&quot;\n          label-width&#x3D;&quot;80px&quot;\n        &gt;\n          &lt;el-input\n            type&#x3D;&quot;input&quot;\n            v-model&#x3D;&quot;loginForm.username&quot;\n            autocomplete&#x3D;&quot;off&quot;\n            placeholder&#x3D;&quot;请输入用户名&quot;\n          &gt;&lt;&#x2F;el-input&gt;\n        &lt;&#x2F;el-form-item&gt;\n        &lt;el-form-item\n          prop&#x3D;&quot;password&quot;\n          label&#x3D;&quot;密码&quot;\n          label-width&#x3D;&quot;80px&quot;\n        &gt;\n          &lt;el-input\n            type&#x3D;&quot;password&quot;\n            v-model&#x3D;&quot;loginForm.password&quot;\n            autocomplete&#x3D;&quot;off&quot;\n            placeholder&#x3D;&quot;请输入密码&quot;\n          &gt;&lt;&#x2F;el-input&gt;\n        &lt;&#x2F;el-form-item&gt;\n        &lt;el-form-item\n          prop&#x3D;&quot;captcha&quot;\n          label&#x3D;&quot;验证码&quot;\n          label-width&#x3D;&quot;80px&quot;\n        &gt;\n          &lt;el-input\n            type&#x3D;&quot;input&quot;\n            v-model&#x3D;&quot;loginForm.captcha&quot;\n            autocomplete&#x3D;&quot;off&quot;\n            placeholder&#x3D;&quot;请输入验证码&quot;\n            style&#x3D;&quot;width: 380px; float: left;&quot;\n          &gt;&lt;&#x2F;el-input&gt;\n          &lt;el-image\n            :src&#x3D;&quot;captchaImg&quot;\n            @click&#x3D;&quot;getCaptcha&quot;\n            style&#x3D;&quot;margin-left: 15px; border-radius: 5px;&quot;\n          &gt;&lt;&#x2F;el-image&gt;\n        &lt;&#x2F;el-form-item&gt;\n        &lt;el-form-item class&#x3D;&quot;el-form-login-submit&quot;&gt;\n          &lt;el-button\n            type&#x3D;&quot;primary&quot;\n            @click&#x3D;&quot;login&quot;\n          &gt;登 录&lt;&#x2F;el-button&gt;\n          &lt;el-button\n            type&#x3D;&quot;primary&quot;\n            @click&#x3D;&quot;() &#x3D;&gt; this.$refs.loginForm.resetFields()&quot;\n          &gt;重 置&lt;&#x2F;el-button&gt;\n        &lt;&#x2F;el-form-item&gt;\n      &lt;&#x2F;el-form&gt;\n    &lt;&#x2F;el-col&gt;\n  &lt;&#x2F;el-row&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<p><strong>2、required 表示是否必填，message 表示提示信息，trigger 表示触发方式</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Login&#39;,\n  data() &#123;\n    return &#123;\n      &#x2F;&#x2F; 表单数据对象\n      loginForm: &#123;\n        username: &#39;&#39;,\n        password: &#39;&#39;,\n        captcha: &#39;&#39;,\n        token: &#39;&#39;,\n      &#125;,\n      &#x2F;&#x2F; 表单验证规则\n      rules: &#123;\n        username: [\n          &#x2F;&#x2F; required 表示是否必填，message 表示提示信息，trigger 表示触发方式\n          &#123; required: true, message: &#39;请输入用户名&#39;, trigger: &#39;blur&#39; &#125;,\n        ],\n        password: [\n          &#123; required: true, message: &#39;请输入密码&#39;, trigger: &#39;blur&#39; &#125;,\n        ],\n        captcha: [\n          &#123; required: true, message: &#39;请输入验证码&#39;, trigger: &#39;blur&#39; &#125;,\n        ],\n      &#125;,\n      captchaImg: &#39;&#39;,\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>3、修改表单验证提示语样式</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&lt;style scoped&gt;\n::v-deep .el-form-item__error &#123;\n  font-size: 14px;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>4、修改表单标签样式</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&lt;style scoped&gt;\n::v-deep .el-form-item__label &#123;\n  color: #fff;\n  font-weight: bold;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>5、重置表单</strong><br><strong><code>this.$refs[&#39;loginForm&#39;]</code>表示获取表单，或者写为 <code>this.$refs.loginForm</code>，<code>resetFields()</code> 用于对整个表单进行重置，将所有字段值重置为初始值并移除校验结果。<code>@click=&quot;() =&gt; this.$refs.loginForm.resetFields()&quot;</code></strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-form :model&#x3D;&quot;loginForm&quot; ref&#x3D;&quot;loginForm&quot; :rules&#x3D;&quot;rules&quot;&gt;\n  &lt;el-form-item&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;el-button&gt;\n        &lt;!-- 重置表单 --&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;() &#x3D;&gt; this.$refs.loginForm.resetFields()&quot;&gt;重置&lt;&#x2F;el-button&gt;\n  &lt;&#x2F;el-form-item&gt;\n&lt;&#x2F;el-form&gt;</code></pre>\n\n<p><strong>6、表单按下回车提交</strong><br><strong><code>@keyup.enter.native</code> 表示按下回车触发事件</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-form :model&#x3D;&quot;formLogin&quot; ref&#x3D;&quot;formLogin&quot; :rules&#x3D;&quot;rules&quot;\n\t@keyup.enter.native&#x3D;&quot;login&quot;&gt;\n&lt;&#x2F;el-form&gt;</code></pre>\n\n<p><strong>7、表单提交校验</strong><br><strong><code>this.$refs[&#39;loginForm&#39;]</code>获取表单，<code>validate()</code>表示对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nexport default &#123;\n  methods: &#123;\n    login() &#123;\n      this.$refs[&#39;loginForm&#39;].validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          alert(&#39;submit!&#39;);\n        &#125; else &#123;\n          return false;\n        &#125;\n      &#125;);\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"2-2-2-添加路由\"><a href=\"#2-2-2-添加路由\" class=\"headerlink\" title=\"2.2.2 添加路由\"></a>2.2.2 添加路由</h3><p><strong>在 src&#x2F;router&#x2F;index.js 文件里添加 &#x2F;login 的路由，并且绑定到上面的 Login 组件</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入VueRouter\nimport VueRouter from &#39;vue-router&#39;\n\n&#x2F;&#x2F; 创建 router 实例对象（路由器），去管理一组一组的路由规则，并暴露出去\nexport default new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123;\n      path: &#39;&#x2F;login&#39;,\n      name: &#39;Login&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;Login.vue&#39;),\n    &#125;,\n  ]\n&#125;)</code></pre>\n\n<h3 id=\"2-2-3-App-vue\"><a href=\"#2-2-3-App-vue\" class=\"headerlink\" title=\"2.2.3 App.vue\"></a>2.2.3 App.vue</h3><p><strong>在 App.vue 里添加 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 标签，并且将边距设为 0</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;App&#39;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\nbody,\nhtml &#123;\n  margin: 0;\n  padding: 0;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h3 id=\"2-2-4-访问登录页面\"><a href=\"#2-2-4-访问登录页面\" class=\"headerlink\" title=\"2.2.4 访问登录页面\"></a>2.2.4 访问登录页面</h3><p><strong>访问路径 <a href=\"http://localhost:8080/#/login\">localhost:8080&#x2F;#&#x2F;login</a> 即可访问登录页面</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153020.png\"></p>\n<h2 id=\"2-3-登录校验\"><a href=\"#2-3-登录校验\" class=\"headerlink\" title=\"2.3 登录校验\"></a>2.3 登录校验</h2><h3 id=\"2-3-1-图片验证码\"><a href=\"#2-3-1-图片验证码\" class=\"headerlink\" title=\"2.3.1 图片验证码\"></a>2.3.1 图片验证码</h3><p><strong>1、Login 组件里给图片验证码加上 src 属性，图片源。在 data 里定义该图片源</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-image\n\t:src&#x3D;&quot;captchaImg&quot;\n\tstyle&#x3D;&quot;margin-left: 20px; border-radius: 5px;&quot;\n&gt;&lt;&#x2F;el-image&gt;</code></pre>\n\n<p><strong>2、Login 组件里定义 getCaptcha 方法，获取验证码信息以及 token，同时组件加载时加载验证码</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Login&#39;,\n  data() &#123;\n    return &#123;\n      &#x2F;&#x2F; 验证码图片\n      captchaImg: &#39;&#39;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    getCaptcha() &#123;\n      this.$axios.get(&#39;&#x2F;hrms&#x2F;api&#x2F;getCaptcha&#39;).then((res) &#x3D;&gt; &#123;\n        this.captchaImg &#x3D; res.data.data.captchaImg;\n        this.loginForm.token &#x3D; res.data.data.token;\n        this.loginForm.captcha &#x3D; &#39;&#39;;\n      &#125;)\n    &#125;,\n  &#125;,\n  mounted() &#123;\n    this.getCaptcha()\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>3、未与后端接口对接时，可以先使用 Mockjs 模拟接口发送数据，在 src&#x2F;mock&#x2F;inde.js 文件中模拟发送数据（验证码和 token）。后续未对接的接口都可以在此模拟接口数据</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const Mock &#x3D; require(&#39;mockjs&#39;)\nconst Random &#x3D; Mock.Random\n\nlet Result &#x3D; &#123;\n  code: 200,\n  msg: &#39;成功&#39;,\n  data: &#123;&#125;\n&#125;\n\nMock.mock(&#39;&#x2F;hrms&#x2F;api&#x2F;getCaptcha&#39;, &#39;get&#39;, () &#x3D;&gt; &#123;\n  Result.data &#x3D; &#123;\n    token: Random.string(32),\n    captchaImg: Random.dataImage(&#39;120x40&#39;, &#39;4A7BF7&#39;)\n  &#125;\n  return Result;\n&#125;)</code></pre>\n\n<p><strong>4、成功显示验证码</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153037.png\"></p>\n<h3 id=\"2-3-2-登录验证\"><a href=\"#2-3-2-登录验证\" class=\"headerlink\" title=\"2.3.2 登录验证\"></a>2.3.2 登录验证</h3><p><strong>1、Login 组件里定义 login 方法，发送登录请求，将登录表单的数据传过去，假如登录成功，获取并调用处理 jwt 方法，然后进行跳转</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nexport default &#123;\n  methods: &#123;\n  \tlogin() &#123;\n      this.$refs.loginForm.validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          this.$axios.post(&#39;&#x2F;hrms&#x2F;login?&#39; + this.$qs.stringify(this.loginForm)).then((res) &#x3D;&gt; &#123;\n            this.$message.success(&#39;登录成功&#39;)\n            &#x2F;&#x2F; eslint-disable-next-line no-unused-vars\n            const jwt &#x3D; res.headers.authorization\n            this.$store.commit(&#39;SET_JWT&#39;, jwt)\n            this.$router.push(&#39;&#x2F;home&#39;).catch(() &#x3D;&gt; &#123; &#125;)\n          &#125;)\n        &#125; else &#123;\n          return false;\n        &#125;\n      &#125;);\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>2、在 src&#x2F;store&#x2F;index.js 文件中接收并存储 jwt</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 Vuex\nimport Vuex from &#39;vuex&#39;\n&#x2F;&#x2F; 应用 Vuex 插件\nVue.use(Vuex)\n\n&#x2F;&#x2F; 准备 actions——用于响应组件中的动作\nconst actions &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备 mutations——用于操作数据（state）\nconst mutations &#x3D; &#123;\n  SET_JWT(state, jwt) &#123;\n    state.jwt &#x3D; jwt;\n    localStorage.setItem(&#39;jwt&#39;, jwt);\n  &#125;\n&#125;\n&#x2F;&#x2F; 准备state——用于存储数据\nconst state &#x3D; &#123;\n  jwt: &#39;&#39;,\n&#125;\n&#x2F;&#x2F; 准备getters——用于将state中的数据进行加工\nconst getters &#x3D; &#123;&#125;\n\n&#x2F;&#x2F;创建并暴露 store\nexport default new Vuex.Store(&#123;\n  &#x2F;&#x2F;actions: actions,\n  actions,\n  mutations,\n  state,\n  getters\n&#125;)\n</code></pre>\n\n<h3 id=\"2-3-3-全局-Axios-拦截器\"><a href=\"#2-3-3-全局-Axios-拦截器\" class=\"headerlink\" title=\"2.3.3 全局 Axios 拦截器\"></a>2.3.3 全局 Axios 拦截器</h3><p><strong>1、在 src 目录下新建 axios.js 文件，拦截所有请求，对于 200 状态码的请求放行，对其他状态码请求进行处理</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import axios from &quot;axios&quot;;\nimport ElementUI from &quot;element-ui&quot;;\nimport router from &quot;.&#x2F;router&quot;;\n\nconst request &#x3D; axios.create(&#123;\n  timeout: 5000,\n  headers: &#123;\n    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,\n  &#125;,\n&#125;);\n\nrequest.interceptors.request.use(config &#x3D;&gt; &#123;\n  if (localStorage.getItem(&quot;token&quot;)) &#123;\n  \t&#x2F;&#x2F; 请求头带上 token\n    config.headers.Authorization &#x3D; localStorage.getItem(&quot;jwt&quot;);\n  &#125;\n  return config;\n&#125;);\n\nrequest.interceptors.response.use(response &#x3D;&gt; &#123;\n  let res &#x3D; response.data;\n\n  if (res.code &#x3D;&#x3D;&#x3D; 200) &#123;\n    return response;\n  &#125;else &#123;\n    ElementUI.Message.error(res.message ? res.message : &#39;系统异常&#39;);\n    return Promise.reject(res.message);\n  &#125;\n&#125;, error &#x3D;&gt; &#123;\n  if (error.response) &#123;\n    switch (error.response.status) &#123;\n      case 401:\n        router.push(&quot;&#x2F;login&quot;);\n        break;\n      case 403:\n        ElementUI.Message.error(&quot;拒绝访问&quot;);\n        break;\n      case 404:\n        ElementUI.Message.error(&quot;请求错误,未找到该资源&quot;);\n        break;\n      case 500:\n        ElementUI.Message.error(&quot;服务器出错&quot;);\n        break;\n      default:\n        ElementUI.Message.error(&quot;未知错误&quot;);\n    &#125;\n  &#125;\n  return Promise.reject(error);\n&#125;);\n\nexport default request</code></pre>\n\n<p><strong>2、在 main.js 里修改 axios 的引入路径</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 src&#x2F;axios.js 请求拦截器\nimport request from &#39;.&#x2F;axios&#39;\n&#x2F;&#x2F; 全局应用 axios 请求拦截器\nVue.prototype.$axios &#x3D; request</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153059.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153112.png\"></p>\n<h2 id=\"2-4-整体布局\"><a href=\"#2-4-整体布局\" class=\"headerlink\" title=\"2.4 整体布局\"></a>2.4 整体布局</h2><p><strong>在 src 目录下创建 layout 文件夹，并且分别创建三个布局组件。使用 Element-UI 的 Container 布局容器</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153126.png\"></p>\n<h3 id=\"2-4-1-主容器-Main-vue\"><a href=\"#2-4-1-主容器-Main-vue\" class=\"headerlink\" title=\"2.4.1 主容器 Main.vue\"></a>2.4.1 主容器 Main.vue</h3><p><strong>包括左侧菜单栏和顶部菜单栏，以及主体部分，后续组件都使用嵌套路由套在该容器下，继承左侧菜单栏和顶部菜单栏</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-container&gt;\n    &lt;el-aside width&#x3D;&quot;&#123;asideWidth: &#39;200px&#39;&#125;&quot;&gt;\n      &lt;NavAside&gt;&lt;&#x2F;NavAside&gt;\n    &lt;&#x2F;el-aside&gt;\n    &lt;el-container&gt;\n      &lt;el-header&gt;\n        &lt;NavHeader&gt;&lt;&#x2F;NavHeader&gt;\n      &lt;&#x2F;el-header&gt;\n      &lt;el-main&gt;\n        &lt;router-view style&#x3D;&quot;padding: 0 20px 0 20px&quot;&gt;&lt;&#x2F;router-view&gt;\n      &lt;&#x2F;el-main&gt;\n    &lt;&#x2F;el-container&gt;\n  &lt;&#x2F;el-container&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport NavAside from &#39;@&#x2F;layout&#x2F;NavAside.vue&#39;\nimport NavHeader from &#39;@&#x2F;layout&#x2F;NavHeader.vue&#39;\nimport Tabs from &#39;@&#x2F;layout&#x2F;Tabs.vue&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Main&#39;,\n  components: &#123;\n    NavAside,\n    NavHeader\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n.el-header &#123;\n  background-color: #333;\n  color: #fff;\n&#125;\n.el-aside &#123;\n  background-color: #545c64;\n&#125;\n.el-main &#123;\n  background-color: #f3f3f4;\n  padding: 0;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h3 id=\"2-4-2-左侧菜单栏-NavAside-vue\"><a href=\"#2-4-2-左侧菜单栏-NavAside-vue\" class=\"headerlink\" title=\"2.4.2 左侧菜单栏 NavAside.vue\"></a>2.4.2 左侧菜单栏 NavAside.vue</h3><p><strong>collapse 属性表示是否收缩，使用 router-link 进行路由跳转。同时更改 a 链接的样式去掉 router-link 的下划线</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-menu\n    class&#x3D;&quot;el-menu-vertical-demo&quot;\n    :collapse&#x3D;&quot;$store.state.isCollapse&quot;\n    background-color&#x3D;&quot;#545c64&quot;\n    text-color&#x3D;&quot;#fff&quot;\n    active-text-color&#x3D;&quot;#ffd04b&quot;\n    :default-active&#x3D;&quot;this.$store.state.menu.editableTabsValue&quot;\n  &gt;\n    &lt;el-menu-item\n      index&#x3D;&quot;title&quot;\n      @click&#x3D;&quot;$router.go(0)&quot;\n    &gt;\n      &lt;span\n        slot&#x3D;&quot;title&quot;\n        style&#x3D;&quot;margin-left: 8px&quot;\n      &gt; &lt;b&gt;企业人力资源管理系统&lt;&#x2F;b&gt; &lt;&#x2F;span&gt;\n      &lt;i\n        class&#x3D;&quot;el-icon-menu&quot;\n        v-show&#x3D;&quot;$store.state.isCollapse&quot;\n      &gt;&lt;&#x2F;i&gt;\n    &lt;&#x2F;el-menu-item&gt;\n\n    &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;\n      &lt;el-menu-item index&#x3D;&quot;Home&quot;&gt;\n        &lt;i class&#x3D;&#39;el-icon-s-home&#39;&gt;&lt;&#x2F;i&gt;\n        &lt;span slot&#x3D;&quot;title&quot;&gt; 首页 &lt;&#x2F;span&gt;\n      &lt;&#x2F;el-menu-item&gt;\n    &lt;&#x2F;router-link&gt;\n\n    &lt;template v-for&#x3D;&quot;menu in menuList&quot;&gt;\n      &lt;el-submenu\n        v-if&#x3D;&quot;menu.children &amp;&amp; menu.children.length &gt; 0&quot;\n        :key&#x3D;&quot;menu.name&quot;\n        :index&#x3D;&quot;menu.name&quot;\n      &gt;\n        &lt;template slot&#x3D;&quot;title&quot;&gt;\n          &lt;i :class&#x3D;menu.icon&gt;&lt;&#x2F;i&gt;\n          &lt;span slot&#x3D;&quot;title&quot;&gt; &#123;&#123; menu.title &#125;&#125; &lt;&#x2F;span&gt;\n        &lt;&#x2F;template&gt;\n        &lt;template v-for&#x3D;&quot;child in menu.children&quot;&gt;\n          &lt;router-link\n            :to&#x3D;&quot;child.path&quot;\n            :key&#x3D;&quot;child.name&quot;\n          &gt;\n            &lt;el-menu-item\n              :index&#x3D;&quot;child.name&quot;\n              @click&#x3D;&quot;addTab(child)&quot;\n            &gt;\n              &lt;i :class&#x3D;child.icon&gt;&lt;&#x2F;i&gt;\n              &lt;span slot&#x3D;&quot;title&quot;&gt; &#123;&#123; child.title &#125;&#125; &lt;&#x2F;span&gt;\n            &lt;&#x2F;el-menu-item&gt;\n          &lt;&#x2F;router-link&gt;\n        &lt;&#x2F;template&gt;\n\n      &lt;&#x2F;el-submenu&gt;\n\n      &lt;router-link\n        v-else\n        :to&#x3D;&quot;menu.path&quot;\n        :key&#x3D;&quot;menu.name&quot;\n      &gt;\n        &lt;el-menu-item\n          :index&#x3D;&quot;menu.name&quot;\n          @click&#x3D;&quot;addTab(menu)&quot;\n        &gt;\n          &lt;i :class&#x3D;menu.icon&gt;&lt;&#x2F;i&gt;\n          &lt;span slot&#x3D;&quot;title&quot;&gt; &#123;&#123; menu.title &#125;&#125; &lt;&#x2F;span&gt;\n        &lt;&#x2F;el-menu-item&gt;\n      &lt;&#x2F;router-link&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-menu&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;NavAside&#39;,\n  computed: &#123;\n    menuList() &#123;\n      return this.$store.state.menu.menuList\n    &#125;\n  &#125;,\n  methods: &#123;\n    addTab(menu) &#123;\n      this.$store.commit(&#39;ADD_TAB&#39;, menu)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n.el-menu-vertical-demo:not(.el-menu--collapse) &#123;\n  width: 200px;\n&#125;\n.el-menu &#123;\n  height: 100vh;\n  background-color: #545c64;\n  color: #fff;\n&#125;\na &#123;\n  text-decoration: none;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h3 id=\"2-4-3-顶部菜单栏-NavHeader-vue\"><a href=\"#2-4-3-顶部菜单栏-NavHeader-vue\" class=\"headerlink\" title=\"2.4.3 顶部菜单栏 NavHeader.vue\"></a>2.4.3 顶部菜单栏 NavHeader.vue</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-row&gt;\n    &lt;el-col :span&#x3D;&quot;24&quot;&gt;\n      &lt;el-button\n        size&#x3D;&quot;mini&quot;\n        v-show&#x3D;&quot;!$store.state.isCollapse&quot;\n        @click&#x3D;&quot;handleCollapse&quot;\n        icon&#x3D;&quot;el-icon-s-fold&quot;\n      &gt;&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        size&#x3D;&quot;mini&quot;\n        v-show&#x3D;&quot;$store.state.isCollapse&quot;\n        @click&#x3D;&quot;handleCollapse&quot;\n        icon&#x3D;&quot;el-icon-s-unfold&quot;\n      &gt;&lt;&#x2F;el-button&gt;\n\n      &lt;el-dropdown&gt;\n        &lt;el-avatar\n          class&#x3D;&quot;el-avatar&quot;\n          shape&#x3D;&quot;circle&quot;\n          :size&#x3D;&quot;45&quot;\n          :src&#x3D;&quot;userInfo.avatar&quot;\n        &gt;&lt;&#x2F;el-avatar&gt;\n        &lt;span style&#x3D;&quot;color: #ddd; margin-left: 10px;&quot;&gt;\n          &#123;&#123;userInfo.empName&#125;&#125;&lt;i class&#x3D;&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;&#x2F;i&gt;\n        &lt;&#x2F;span&gt;\n        &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;\n          &lt;router-link to&#x3D;&quot;&#x2F;userCenter&quot;&gt;\n            &lt;el-dropdown-item&gt;个人中心&lt;&#x2F;el-dropdown-item&gt;\n          &lt;&#x2F;router-link&gt;\n          &lt;el-dropdown-item @click.native&#x3D;&quot;logout&quot;&gt;退出&lt;&#x2F;el-dropdown-item&gt;\n        &lt;&#x2F;el-dropdown-menu&gt;\n      &lt;&#x2F;el-dropdown&gt;\n    &lt;&#x2F;el-col&gt;\n  &lt;&#x2F;el-row&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;NavHeader&#39;,\n  data() &#123;\n    return &#123;\n      userInfo: &#123;&#125;\n    &#125;\n  &#125;,\n  methods: &#123;\n    handleCollapse() &#123;\n      this.$store.commit(&#39;HANDLE_COLLAPSE&#39;);\n    &#125;,\n    logout() &#123;\n      this.$axios.post(&#39;&#x2F;hrms&#x2F;logout&#39;).then(() &#x3D;&gt; &#123;\n        this.$store.commit(&#39;LOGOUT&#39;);\n        this.$router.push(&#39;&#x2F;login&#39;);\n      &#125;);\n    &#125;,\n    getUserInfo() &#123;\n      this.$axios.get(&quot;&#x2F;hrms&#x2F;employee&#x2F;getUserInfo&quot;).then(res &#x3D;&gt; &#123;\n        this.userInfo &#x3D; res.data.data;\n      &#125;)\n    &#125;\n  &#125;,\n  mounted() &#123;\n    this.getUserInfo();\n\n    this.$bus.$on(&#39;refreshNavHeader&#39;, () &#x3D;&gt; &#123;\n      this.getUserInfo();\n    &#125;)\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n.el-col &#123;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  line-height: 60px;\n&#125;\n.el-button &#123;\n  margin-left: -5px;\n&#125;\n.el-avatar &#123;\n  vertical-align: middle;\n&#125;\na &#123;\n  text-decoration: none;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153143.png\"></p>\n<h3 id=\"2-4-4-展开-x2F-收缩侧边栏\"><a href=\"#2-4-4-展开-x2F-收缩侧边栏\" class=\"headerlink\" title=\"2.4.4 展开&#x2F;收缩侧边栏\"></a>2.4.4 展开&#x2F;收缩侧边栏</h3><p><strong>在 src&#x2F;store&#x2F;index.js 文件中添加 isCollapse 属性来决定是否收缩，使用 HANDLE_COLLAPSE 方法来进行控制</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 Vuex\nimport Vuex from &#39;vuex&#39;\n&#x2F;&#x2F; 应用 Vuex 插件\nVue.use(Vuex)\n\n&#x2F;&#x2F; 准备 actions——用于响应组件中的动作\nconst actions &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备 mutations——用于操作数据（state）\nconst mutations &#x3D; &#123;\n  SET_JWT(state, jwt) &#123;\n    state.jwt &#x3D; jwt;\n    localStorage.setItem(&#39;jwt&#39;, jwt);\n  &#125;,\n  HANDLE_COLLAPSE(state) &#123;\n    state.isCollapse &#x3D; !state.isCollapse\n  &#125;,\n&#125;\n&#x2F;&#x2F; 准备state——用于存储数据\nconst state &#x3D; &#123;\n  jwt: &#39;&#39;,\n  isCollapse: false,\n&#125;\n&#x2F;&#x2F; 准备getters——用于将state中的数据进行加工\nconst getters &#x3D; &#123;&#125;\n\n&#x2F;&#x2F;创建并暴露 store\nexport default new Vuex.Store(&#123;\n  actions,\n  mutations,\n  state,\n  getters\n&#125;)</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153155.png\"></p>\n<h2 id=\"2-5-退出与动态导航路由、动态标签页绑定\"><a href=\"#2-5-退出与动态导航路由、动态标签页绑定\" class=\"headerlink\" title=\"2.5 退出与动态导航路由、动态标签页绑定\"></a>2.5 退出与动态导航路由、动态标签页绑定</h2><h3 id=\"2-5-1-退出\"><a href=\"#2-5-1-退出\" class=\"headerlink\" title=\"2.5.1 退出\"></a>2.5.1 退出</h3><p><strong>1、在顶部菜单栏，NavHeader.vue 组件中，给退出下拉框添加点击事件，一个退出的方法</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-row&gt;\n    &lt;el-col :span&#x3D;&quot;24&quot;&gt;\n      &lt;el-dropdown&gt;\n        &lt;el-avatar\n          class&#x3D;&quot;el-avatar&quot;\n          shape&#x3D;&quot;circle&quot;\n          :size&#x3D;&quot;45&quot;\n          :src&#x3D;&quot;userInfo.avatar&quot;\n        &gt;&lt;&#x2F;el-avatar&gt;\n        &lt;span style&#x3D;&quot;color: #ddd; margin-left: 10px;&quot;&gt;\n          &#123;&#123;userInfo.empName&#125;&#125;&lt;i class&#x3D;&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;&#x2F;i&gt;\n        &lt;&#x2F;span&gt;\n  \n        &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;\n          &lt;router-link to&#x3D;&quot;&#x2F;userCenter&quot;&gt;\n            &lt;el-dropdown-item&gt;个人中心&lt;&#x2F;el-dropdown-item&gt;\n          &lt;&#x2F;router-link&gt;\n          &lt;el-dropdown-item @click.native&#x3D;&quot;logout&quot;&gt;退出&lt;&#x2F;el-dropdown-item&gt;\n        &lt;&#x2F;el-dropdown-menu&gt;\n      &lt;&#x2F;el-dropdown&gt;\n    &lt;&#x2F;el-col&gt;\n  &lt;&#x2F;el-row&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<p><strong>2、发送退出请求，调用处理退出的方法，然后路由到登录页面</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nexport default &#123;\n  name: &#39;NavHeader&#39;,\n  methods: &#123;\n    handleCollapse() &#123;\n      this.$store.commit(&#39;HANDLE_COLLAPSE&#39;);\n    &#125;,\n    logout() &#123;\n      this.$axios.post(&#39;&#x2F;hrms&#x2F;logout&#39;).then(() &#x3D;&gt; &#123;\n        this.$store.commit(&#39;LOGOUT&#39;);\n        this.$router.push(&#39;&#x2F;login&#39;);\n      &#125;);\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>3、在 src&#x2F;store&#x2F;index.js 文件里处理退出，清除缓存信息</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const mutations &#x3D; &#123;\n  LOGOUT(state) &#123;\n    localStorage.removeItem(&#39;jwt&#39;);\n    state.jwt &#x3D; &#39;&#39;;\n    &#x2F;&#x2F; localStorage.clear();\n    &#x2F;&#x2F; state.menu.menuList &#x3D; [];\n    &#x2F;&#x2F; state.menu.permissions &#x3D; [];\n    &#x2F;&#x2F; state.menu.hasRoute &#x3D; false;\n    state.menu.editableTabsValue &#x3D; &#39;Home&#39;;\n    state.menu.editableTabs &#x3D; [&#123;\n      title: &#39;首页&#39;,\n      name: &#39;Home&#39;,\n    &#125;];\n  &#125;,\n&#125;</code></pre>\n\n<h3 id=\"2-5-2-动态导航与动态路由绑定\"><a href=\"#2-5-2-动态导航与动态路由绑定\" class=\"headerlink\" title=\"2.5.2 动态导航与动态路由绑定\"></a>2.5.2 动态导航与动态路由绑定</h3><p><strong>1、设置全局前置路由守卫，加载菜单信息，还可以通过判断是否登录页面，是否有 jwt 等判断条件提前判断是否能加载菜单，同时还可以通过开关 hasRoute 来动态判断是否已经加载过菜单。<br>将获取到的菜单动态生成路由，进行绑定，将 title、icon 等非路由属性放到 meta 路由元信息中。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入VueRouter\nimport VueRouter from &#39;vue-router&#39;\n&#x2F;&#x2F; 引入 Axios\nimport axios from &#39;..&#x2F;axios&#39;\n&#x2F;&#x2F; 引入 Vuex\nimport store from &#39;..&#x2F;store&#39;\n\n&#x2F;&#x2F; 创建 router 实例对象（路由器），去管理一组一组的路由规则，并暴露出去\nconst router &#x3D; new VueRouter(&#123;\n  &#x2F;&#x2F; 路由配置\n  routes: [\n    &#123;\n      path: &#39;&#x2F;&#39;,\n      redirect: &#39;&#x2F;home&#39;,\n      name: &#39;Main&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;layout&#x2F;Main.vue&#39;),\n      children: [\n        &#123;\n          path: &#39;&#x2F;userCenter&#39;,\n          name: &#39;UserCenter&#39;,\n          component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;UserCenter.vue&#39;),\n          meta: &#123;\n            title: &#39;个人中心&#39;,\n          &#125;,\n        &#125;,\n        &#123;\n          path: &#39;&#x2F;home&#39;,\n          name: &#39;Home&#39;,\n          component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;Home.vue&#39;)\n        &#125;,\n      ]\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;login&#39;,\n      name: &#39;Login&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;Login.vue&#39;),\n    &#125;\n  ]\n&#125;)\n\nrouter.beforeEach((to, from, next) &#x3D;&gt; &#123;\n  let hasRoute &#x3D; store.state.menu.hasRoute;\n  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;\n    next();\n  &#125; else if(!localStorage.getItem(&#39;jwt&#39;))&#123;\n    next(&#39;&#x2F;login&#39;);\n  &#125; else if (!hasRoute)&#123;\n    axios.get(&#39;&#x2F;hrms&#x2F;sys&#x2F;menu&#x2F;getNavMenu&#39;).then(res &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 拿到 menuList 菜单列表\n      store.commit(&#39;SET_MENU_LIST&#39;, res.data.data.menuList);\n      &#x2F;&#x2F; 拿到 permissionList 权限列表\n      store.commit(&#39;SET_PERMISSION_LIST&#39;, res.data.data.permissionList);\n  \n      &#x2F;&#x2F; 动态绑定路由\n      res.data.data.menuList.forEach(menu &#x3D;&gt; &#123;\n        if (menu.children) &#123;\n          menu.children.forEach(child &#x3D;&gt; &#123;\n            &#x2F;&#x2F; 转成路由\n            let route &#x3D; menuToRouter(child);\n            &#x2F;&#x2F; 把路由添加到路由管理器中\n            if (route) &#123;\n              router.addRoute(&#39;Main&#39;, route);\n            &#125;\n          &#125;)\n        &#125; else &#123;\n          let route &#x3D; menuToRouter(menu);\n          if (route) &#123;\n            router.addRoute(&#39;Main&#39;, route);\n          &#125;\n        &#125;\n      &#125;);\n      hasRoute &#x3D; true;\n      store.commit(&#39;CHANGE_ROUTE_STATUS&#39;, hasRoute);\n      next(to.path);\n    &#125;)\n  &#125;else &#123;\n    next();\n  &#125;\n&#125;)\n\nconst menuToRouter &#x3D; (menu) &#x3D;&gt; &#123;\n  if(!menu.component)&#123;\n    return null;\n  &#125; else &#123;\n    return &#123;\n      path: menu.path,\n      name: menu.name,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;&#39; + menu.component +&#39;.vue&#39;),\n      meta: &#123;\n        title: menu.title,\n        icon: menu.icon\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\nexport default router</code></pre>\n\n<p><strong>2、在 src&#x2F;store 目录中新建 menu.js，用来存储菜单数据</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153215.png\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入 Vue\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F; 引入 Vuex\nimport Vuex from &#39;vuex&#39;\n&#x2F;&#x2F; 应用 Vuex 插件\nVue.use(Vuex)\n\nexport default &#123;\n  mutations: &#123;\n    SET_MENU_LIST(state, menuList) &#123;\n      state.menuList &#x3D; menuList;\n    &#125;,\n    SET_PERMISSION_LIST(state, permissionList) &#123;\n      state.permissionList &#x3D; permissionList;\n    &#125;,\n    CHANGE_ROUTE_STATUS(state, hasRoute) &#123;\n      state.hasRoute &#x3D; hasRoute;\n    &#125;,\n  &#125;,\n  state: &#123;\n    menuList: [],\n    permissionList: [],\n    hasRoute: false,\n  &#125;,\n&#125;</code></pre>\n\n<p><strong>3、在 src&#x2F;store&#x2F;index.js 文件中引入 menu.js，然后添加到 modules</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import menu from &#39;.&#x2F;menu&#39;\n\n&#x2F;&#x2F;创建并暴露 store\nexport default new Vuex.Store(&#123;\n  actions,\n  mutations,\n  state,\n  getters,\n  modules: &#123;\n    menu,\n  &#125;,\n&#125;)</code></pre>\n\n<p><strong>4、在左侧菜单栏 NavAside.vue 中直接获取 store 中的 menuList 数据，显示菜单</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\nexport default &#123;\n  name: &#39;NavAside&#39;,\n  computed: &#123;\n    menuList() &#123;\n      return this.$store.state.menu.menuList\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"2-5-3-导航与动态标签页绑定\"><a href=\"#2-5-3-导航与动态标签页绑定\" class=\"headerlink\" title=\"2.5.3 导航与动态标签页绑定\"></a>2.5.3 导航与动态标签页绑定</h3><p><strong>1、在 src&#x2F;layout 目录下新建 Tabs.vue 文件，删除标签页时，判断首页不能删除，以及点击标签页跳转到对应路由</strong></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153228.png\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-tabs\n    v-model&#x3D;&quot;editableTabsValue&quot;\n    type&#x3D;&quot;card&quot;\n    closable\n    @tab-remove&#x3D;&quot;removeTab&quot;\n    @tab-click&#x3D;&quot;clickTab&quot;\n  &gt;\n    &lt;el-tab-pane\n      v-for&#x3D;&quot;tab in editableTabs&quot;\n      :key&#x3D;&quot;tab.name&quot;\n      :label&#x3D;&quot;tab.title&quot;\n      :name&#x3D;&quot;tab.name&quot;\n    &gt;\n    &lt;&#x2F;el-tab-pane&gt;\n  &lt;&#x2F;el-tabs&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Tabs&#39;,\n  computed: &#123;\n    editableTabsValue: &#123;\n      get() &#123;\n        return this.$store.state.menu.editableTabsValue\n      &#125;,\n      set(val) &#123;\n        this.$store.state.menu.editableTabsValue &#x3D; val\n      &#125;\n    &#125;,\n    editableTabs: &#123;\n      get() &#123;\n        return this.$store.state.menu.editableTabs\n      &#125;,\n      set(val) &#123;\n        this.$store.state.menu.editableTabs &#x3D; val\n      &#125;\n    &#125;\n  &#125;,\n  methods: &#123;\n    removeTab(targetName) &#123;\n      let tabs &#x3D; this.editableTabs;\n      let activeName &#x3D; this.editableTabsValue;\n\n      if (targetName &#x3D;&#x3D;&#x3D; &#39;Home&#39;) &#123;\n        return false;\n      &#125;\n      if (activeName &#x3D;&#x3D;&#x3D; targetName) &#123;\n        tabs.forEach((tab, index) &#x3D;&gt; &#123;\n          if (tab.name &#x3D;&#x3D;&#x3D; targetName) &#123;\n            let nextTab &#x3D; tabs[index + 1] || tabs[index - 1];\n            if (nextTab) &#123;\n              activeName &#x3D; nextTab.name;\n            &#125;\n          &#125;\n        &#125;);\n      &#125;\n\n      this.editableTabsValue &#x3D; activeName;\n      this.editableTabs &#x3D; tabs.filter(tab &#x3D;&gt; tab.name !&#x3D;&#x3D; targetName);\n      this.$router.push(&#123; name: activeName &#125;)\n    &#125;,\n    clickTab(tab) &#123;\n      this.$router.push(&#123; name: tab.name &#125;)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>2、在主容器 Main.vue 中的主体部分加上标签页</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-container&gt;\n    &lt;el-aside width&#x3D;&quot;&#123;asideWidth: &#39;200px&#39;&#125;&quot;&gt;\n      &lt;NavAside&gt;&lt;&#x2F;NavAside&gt;\n    &lt;&#x2F;el-aside&gt;\n    &lt;el-container&gt;\n      &lt;el-header&gt;\n        &lt;NavHeader&gt;&lt;&#x2F;NavHeader&gt;\n      &lt;&#x2F;el-header&gt;\n      &lt;el-main&gt;\n        &lt;Tabs &#x2F;&gt;\n        &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n      &lt;&#x2F;el-main&gt;\n    &lt;&#x2F;el-container&gt;\n  &lt;&#x2F;el-container&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport NavAside from &#39;@&#x2F;layout&#x2F;NavAside.vue&#39;\nimport NavHeader from &#39;@&#x2F;layout&#x2F;NavHeader.vue&#39;\nimport Tabs from &#39;@&#x2F;layout&#x2F;Tabs.vue&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Main&#39;,\n  components: &#123;\n    NavAside,\n    NavHeader,\n    Tabs\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>3、在 src&#x2F;store&#x2F;menu.js 文件里添加点击路由添加对应标签页的方法，并激活对应标签页。只有标签页不存在，才进行添加</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  mutations: &#123;\n    ADD_TAB(state, tab) &#123;\n      let index &#x3D; state.editableTabs.findIndex(item &#x3D;&gt; item.name &#x3D;&#x3D;&#x3D; tab.name);\n      if (index &#x3D;&#x3D;&#x3D; -1) &#123;\n        state.editableTabs.push(&#123;\n          title: tab.title,\n          name: tab.name,\n        &#125;);\n      &#125;\n      state.editableTabsValue &#x3D; tab.name;\n    &#125;,\n  &#125;,\n  state: &#123;\n    editableTabsValue: &#39;Home&#39;,\n    editableTabs: [&#123;\n      title: &#39;首页&#39;,\n      name: &#39;Home&#39;,\n    &#125;],\n  &#125;,\n&#125;</code></pre>\n\n<p><strong>4、在左侧菜单栏 NavAside.vue 文件中，给菜单项加上点击事件，调用上面的添加标签页方法</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n\t&lt;router-link\n\t  v-else\n\t  :to&#x3D;&quot;menu.path&quot;\n\t  :key&#x3D;&quot;menu.name&quot;\n\t&gt;\n\t  &lt;el-menu-item\n\t\t:index&#x3D;&quot;menu.name&quot;\n\t\t@click&#x3D;&quot;addTab(menu)&quot;\n\t  &gt;\n          &lt;i :class&#x3D;&quot;&#39;el-icon-&#39; + menu.icon&quot;&gt;&lt;&#x2F;i&gt;\n          &lt;span slot&#x3D;&quot;title&quot;&gt; &#123;&#123; menu.title &#125;&#125; &lt;&#x2F;span&gt;\n\t  &lt;&#x2F;el-menu-item&gt;\n\t&lt;&#x2F;router-link&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;NavAside&#39;,\n  methods: &#123;\n    addTab(menu) &#123;\n      this.$store.commit(&#39;ADD_TAB&#39;, menu)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>5、在 App.vue 中监视刷新浏览器后回显之前激活的标签页</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;App&#39;,\n  watch: &#123;\n    $route(to) &#123;\n      if (to.path !&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;\n        let obj &#x3D; &#123;\n          name: to.name,\n          title: to.meta.title,\n        &#125;\n        this.$store.commit(&#39;ADD_TAB&#39;, obj)\n      &#125;\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153244.png\"></p>\n<h2 id=\"2-6-菜单管理\"><a href=\"#2-6-菜单管理\" class=\"headerlink\" title=\"2.6 菜单管理\"></a>2.6 菜单管理</h2><p><img src=\"http://img.fan223.cn/2023/04/20230419153255.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153305.png\"></p>\n<p><strong>1、新建菜单组件 Menu.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div\n      class&#x3D;&quot;mainHeader&quot;\n      style&#x3D;&quot;height: 630px;&quot;\n    &gt;\n      &lt;el-row\n        type&#x3D;&quot;flex&quot;\n        justify&#x3D;&quot;space-between&quot;\n        class&#x3D;&quot;mainMessage&quot;\n      &gt;\n        &lt;el-col class&#x3D;&quot;mainMessageLeft&quot;&gt;\n          &lt;div&gt;&lt;b&gt;菜单管理&lt;&#x2F;b&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;el-col&gt;\n        &lt;el-col\n          :span&#x3D;&quot;4&quot;\n          class&#x3D;&quot;mainMessageRight&quot;\n          style&#x3D;&quot;margin-right: 7px;&quot;\n        &gt;\n          &lt;div&gt;\n            &lt;el-button\n              type&#x3D;&quot;primary&quot;\n              size&#x3D;&quot;small&quot;\n              @click&#x3D;&quot;$bus.$emit(&#39;menuAdd&#39;, menuList)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;sys:menu:add&#39;)&quot;\n            &gt;新增&lt;&#x2F;el-button&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;el-col&gt;\n      &lt;&#x2F;el-row&gt;\n      &lt;!--列表--&gt;\n      &lt;el-table\n        :data&#x3D;&quot;menuList&quot;\n        id&#x3D;&quot;out-table&quot;\n        class&#x3D;&quot;mainTable&quot;\n        :header-cell-style&#x3D;&quot;&#123;background:&#39;#ddd&#39;&#125;&quot;\n        max-height&#x3D;&quot;520&quot;\n        border\n        :fit&#x3D;&quot;true&quot;\n        row-key&#x3D;&quot;menuId&quot;\n        :tree-props&#x3D;&quot;&#123;children: &#39;children&#39;, hasChildren: &#39;hasChildren&#39;&#125;&quot;\n      &gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;menuName&quot;\n          label&#x3D;&quot;名称&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;150&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;permission&quot;\n          label&#x3D;&quot;权限编码&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;120&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;icon&quot;\n          label&#x3D;&quot;图标&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;180&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;type&quot;\n          label&#x3D;&quot;类型&quot;\n          align&#x3D;&quot;center&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-tag\n              v-if&#x3D;&quot;scope.row.type &#x3D;&#x3D;&#x3D; 0&quot;\n              size&#x3D;&quot;small&quot;\n            &gt;目录&lt;&#x2F;el-tag&gt;\n            &lt;el-tag\n              v-else-if&#x3D;&quot;scope.row.type &#x3D;&#x3D;&#x3D; 1&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;success&quot;\n            &gt;菜单&lt;&#x2F;el-tag&gt;\n            &lt;el-tag\n              v-else-if&#x3D;&quot;scope.row.type &#x3D;&#x3D;&#x3D; 2&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;info&quot;\n            &gt;按钮&lt;&#x2F;el-tag&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;path&quot;\n          label&#x3D;&quot;菜单URL&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;120&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;component&quot;\n          label&#x3D;&quot;菜单组件&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;200&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;orderNum&quot;\n          label&#x3D;&quot;排序号&quot;\n          align&#x3D;&quot;center&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;valiFlag&quot;\n          label&#x3D;&quot;状态&quot;\n          align&#x3D;&quot;center&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-tag\n              v-if&#x3D;&quot;scope.row.valiFlag &#x3D;&#x3D;&#x3D; 0&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;danger&quot;\n            &gt;禁用&lt;&#x2F;el-tag&gt;\n            &lt;el-tag\n              v-else-if&#x3D;&quot;scope.row.valiFlag &#x3D;&#x3D;&#x3D; 1&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;success&quot;\n            &gt;正常&lt;&#x2F;el-tag&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          label&#x3D;&quot;操作&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;200&quot;\n          fixed&#x3D;&quot;right&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-button\n              type&#x3D;&quot;primary&quot;\n              size&#x3D;&quot;small&quot;\n              @click&#x3D;&quot;$bus.$emit(&#39;menuEdit&#39;, menuList, scope.row)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;sys:menu:update&#39;)&quot;\n            &gt;编辑&lt;&#x2F;el-button&gt;\n            &lt;el-button\n              type&#x3D;&quot;danger&quot;\n              size&#x3D;&quot;small&quot;\n              slot&#x3D;&quot;reference&quot;\n              @click&#x3D;&quot;menuDel(scope.row.menuId)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;sys:menu:delete&#39;)&quot;\n            &gt;删除&lt;&#x2F;el-button&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n      &lt;MenuAdd &#x2F;&gt;\n      &lt;MenuEdit &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nimport MenuAdd from &#39;.&#x2F;MenuAdd&#39;\nimport MenuEdit from &#39;.&#x2F;MenuEdit&#39;\nimport &#39;..&#x2F;..&#x2F;..&#x2F;assets&#x2F;css&#x2F;mainStyle.css&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &#39;Menu&#39;,\n  data() &#123;\n    return &#123;\n      menuList: [],\n      dialogFormVisible: false,\n    &#125;\n  &#125;,\n  methods: &#123;\n    getMenuTree() &#123;\n      this.$axios.get(&#39;&#x2F;hrms&#x2F;sys&#x2F;menu&#x2F;getMenuList?valiFlag&#x3D;&#39;).then(res &#x3D;&gt; &#123;\n        this.menuList &#x3D; res.data.data;\n      &#125;)\n    &#125;,\n    menuDel(menuId) &#123;\n      this.$confirm(&#39;确定删除吗&#39;, &#39;提示&#39;, &#123;\n        confirmButtonText: &#39;确定&#39;,\n        cancelButtonText: &#39;取消&#39;,\n        type: &#39;warning&#39;\n      &#125;).then(() &#x3D;&gt; &#123;\n        this.$axios.delete(&quot;&#x2F;hrms&#x2F;sys&#x2F;menu&#x2F;deleteMenu&#x2F;&quot; + menuId).then(() &#x3D;&gt; &#123;\n          this.$message.success(&quot;删除成功&quot;)\n          this.getMenuTree()\n        &#125;)\n      &#125;).catch(() &#x3D;&gt; &#123;\n        this.$message.success(&#39;已取消删除&#39;);\n      &#125;)\n    &#125;,\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;refreshMenuList&#39;, () &#x3D;&gt; &#123;\n      this.getMenuTree();\n    &#125;);\n  &#125;,\n  created() &#123;\n    this.getMenuTree();\n  &#125;,\n  components: &#123;\n    MenuAdd,\n    MenuEdit,\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>2、新增菜单对话框 MenuAdd.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;菜单信息&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n    class&#x3D;&quot;el-dialog-menu&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;addForm&quot;\n      :rules&#x3D;&quot;addFormRules&quot;\n      ref&#x3D;&quot;addForm&quot;\n    &gt;\n      &lt;el-form-item\n        label&#x3D;&quot;上级菜单&quot;\n        prop&#x3D;&quot;parentId&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;!--模拟树形下拉框--&gt;\n        &lt;el-select\n          v-model&#x3D;&quot;addForm.parentId&quot;\n          placeholder&#x3D;&quot;请选择上级菜单&quot;\n        &gt;\n          &lt;template v-for&#x3D;&quot;item in menuList&quot;&gt;\n            &lt;el-option\n              :key&#x3D;&quot;item.menuId&quot;\n              :label&#x3D;&quot;item.menuName&quot;\n              :value&#x3D;&quot;item.menuId&quot;\n            &gt;&lt;&#x2F;el-option&gt;\n            &lt;template v-for&#x3D;&quot;child in item.children&quot;&gt;\n              &lt;el-option\n                :key&#x3D;&quot;child.menuId&quot;\n                :label&#x3D;&quot;child.menuName&quot;\n                :value&#x3D;&quot;child.menuId&quot;\n              &gt;\n                &lt;span&gt;&#123;&#123; &#39;- &#39; + child.menuName &#125;&#125;&lt;&#x2F;span&gt;\n              &lt;&#x2F;el-option&gt;\n            &lt;&#x2F;template&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-select&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;菜单名称&quot;\n        prop&#x3D;&quot;menuName&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.menuName&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;权限编码&quot;\n        prop&#x3D;&quot;permission&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.permission&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;图标&quot;\n        prop&#x3D;&quot;icon&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.icon&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;菜单URL&quot;\n        prop&#x3D;&quot;path&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.path&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;菜单组件&quot;\n        prop&#x3D;&quot;component&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.component&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;类型&quot;\n        prop&#x3D;&quot;type&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;addForm.type&quot;&gt;\n          &lt;el-radio :label&#x3D;0&gt;目录&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;1&gt;菜单&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;2&gt;按钮&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;状态&quot;\n        prop&#x3D;&quot;valiFlag&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;addForm.valiFlag&quot;&gt;\n          &lt;el-radio :label&#x3D;0&gt;禁用&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;1&gt;正常&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;排序号&quot;\n        prop&#x3D;&quot;orderNum&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input-number\n          v-model&#x3D;&quot;addForm.orderNum&quot;\n          :min&#x3D;&quot;1&quot;\n          label&#x3D;&quot;排序号&quot;\n        &gt;1&lt;&#x2F;el-input-number&gt;\n      &lt;&#x2F;el-form-item&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;resetForm(&#39;addForm&#39;)&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;submitAddForm(&#39;addForm&#39;)&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;MenuAdd&#39;,\n  data() &#123;\n    return &#123;\n      dialogFormVisible: false,\n      menuList: [],\n      addForm: &#123;&#125;,\n      addFormRules: &#123;\n        menuName: [\n          &#123; required: true, message: &#39;请输入名称&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        permission: [\n          &#123; required: true, message: &#39;请输入权限编码&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        type: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        orderNum: [\n          &#123; required: true, message: &#39;请填入排序号&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        valiFlag: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ]\n      &#125;\n    &#125;\n  &#125;,\n  methods: &#123;\n    submitAddForm(formName) &#123;\n      this.$refs[formName].validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          this.$axios.post(&#39;&#x2F;hrms&#x2F;sys&#x2F;menu&#x2F;addMenu&#39;, this.addForm).then(() &#x3D;&gt; &#123;\n            this.resetForm(formName)\n            this.$message.success(&#39;添加成功&#39;)\n            this.$bus.$emit(&#39;refreshMenuList&#39;)\n          &#125;)\n        &#125; else &#123;\n          console.log(&#39;error submit!!&#39;);\n          return false;\n        &#125;\n      &#125;);\n    &#125;,\n    resetForm(formName) &#123;\n      this.$refs[formName].resetFields();\n      this.addForm &#x3D; &#123;&#125;\n      this.dialogFormVisible &#x3D; false\n    &#125;\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;menuAdd&#39;, (menuList) &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true\n      this.menuList &#x3D; menuList\n    &#125;)\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n.el-dialog-menu &#123;\n  width: 100%;\n  margin-top: -90px;\n  overflow: hidden;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p><strong>3、编辑菜单对话框 MenuEdit.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;菜单信息&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n    class&#x3D;&quot;el-dialog-menu&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;editForm&quot;\n      :rules&#x3D;&quot;editFormRules&quot;\n      ref&#x3D;&quot;editForm&quot;\n    &gt;\n      &lt;el-form-item\n        label&#x3D;&quot;上级菜单&quot;\n        prop&#x3D;&quot;parentId&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;!--模拟树形下拉框--&gt;\n        &lt;el-select\n          v-model&#x3D;&quot;editForm.parentId&quot;\n          placeholder&#x3D;&quot;请选择上级菜单&quot;\n        &gt;\n          &lt;template v-for&#x3D;&quot;item in menuList&quot;&gt;\n            &lt;el-option\n              :key&#x3D;&quot;item.menuId&quot;\n              :label&#x3D;&quot;item.menuName&quot;\n              :value&#x3D;&quot;item.menuId&quot;\n            &gt;&lt;&#x2F;el-option&gt;\n            &lt;template v-for&#x3D;&quot;child in item.children&quot;&gt;\n              &lt;el-option\n                :key&#x3D;&quot;child.menuId&quot;\n                :label&#x3D;&quot;child.menuName&quot;\n                :value&#x3D;&quot;child.menuId&quot;\n              &gt;\n                &lt;span&gt;&#123;&#123; &#39;- &#39; + child.menuName &#125;&#125;&lt;&#x2F;span&gt;\n              &lt;&#x2F;el-option&gt;\n            &lt;&#x2F;template&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-select&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;菜单名称&quot;\n        prop&#x3D;&quot;menuName&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.menuName&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;权限编码&quot;\n        prop&#x3D;&quot;permission&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.permission&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;图标&quot;\n        prop&#x3D;&quot;icon&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.icon&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;菜单URL&quot;\n        prop&#x3D;&quot;path&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.path&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;菜单组件&quot;\n        prop&#x3D;&quot;component&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.component&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;类型&quot;\n        prop&#x3D;&quot;type&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;editForm.type&quot;&gt;\n          &lt;el-radio :label&#x3D;0&gt;目录&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;1&gt;菜单&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;2&gt;按钮&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;状态&quot;\n        prop&#x3D;&quot;valiFlag&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;editForm.valiFlag&quot;&gt;\n          &lt;el-radio :label&#x3D;0&gt;禁用&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;1&gt;正常&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;排序号&quot;\n        prop&#x3D;&quot;orderNum&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input-number\n          v-model&#x3D;&quot;editForm.orderNum&quot;\n          :min&#x3D;&quot;1&quot;\n          label&#x3D;&quot;排序号&quot;\n        &gt;1&lt;&#x2F;el-input-number&gt;\n      &lt;&#x2F;el-form-item&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;resetForm(&#39;editForm&#39;)&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;submitEditForm(&#39;editForm&#39;)&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;MenuEdit&#39;,\n  data() &#123;\n    return &#123;\n      dialogFormVisible: false,\n      menuList: [],\n      editForm: &#123;&#125;,\n      editFormRules: &#123;\n        menuName: [\n          &#123; required: true, message: &#39;请输入名称&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        permission: [\n          &#123; required: true, message: &#39;请输入权限编码&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        type: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        orderNum: [\n          &#123; required: true, message: &#39;请填入排序号&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        valiFlag: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ]\n      &#125;\n    &#125;\n  &#125;,\n  methods: &#123;\n    submitEditForm(formName) &#123;\n      this.$refs[formName].validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          this.$axios.put(&#39;&#x2F;hrms&#x2F;sys&#x2F;menu&#x2F;updateMenu&#39;, this.editForm).then(() &#x3D;&gt; &#123;\n            this.dialogFormVisible &#x3D; false;\n            this.$message.success(&#39;修改成功&#39;);\n            this.$bus.$emit(&#39;refreshMenuList&#39;)\n          &#125;)\n        &#125; else &#123;\n          console.log(&#39;error submit!!&#39;);\n          return false;\n        &#125;\n      &#125;)\n    &#125;,\n    resetForm(formName) &#123;\n      this.$refs[formName].resetFields();\n      this.$bus.$emit(&#39;refreshMenuList&#39;)\n      this.dialogFormVisible &#x3D; false\n    &#125;\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;menuEdit&#39;, (menuList, menu) &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true\n      this.menuList &#x3D; menuList\n      this.editForm &#x3D; menu\n    &#125;)\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n.el-dialog-menu &#123;\n  width: 100%;\n  margin-top: -90px;\n  overflow: hidden;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"2-7-角色管理\"><a href=\"#2-7-角色管理\" class=\"headerlink\" title=\"2.7 角色管理\"></a>2.7 角色管理</h2><p><img src=\"http://img.fan223.cn/2023/04/20230419153325.png\"></p>\n<p><strong>1、新建角色组件 Role.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class&#x3D;&quot;mainHeader&quot;&gt;\n      &lt;el-form\n        :inline&#x3D;&quot;true&quot;\n        class&#x3D;&quot;demo-form-inline&quot;\n        size&#x3D;&quot;small&quot;\n        :model&#x3D;&quot;searchForm&quot;\n        ref&#x3D;&quot;searchForm&quot;\n        @submit.native.prevent&#x3D;&quot;getRoleList&quot;\n      &gt;\n        &lt;el-form-item\n          label&#x3D;&quot;角色名称&quot;\n          prop&#x3D;&quot;roleName&quot;\n        &gt;\n          &lt;el-input\n            v-model&#x3D;&quot;searchForm.roleName&quot;\n            placeholder&#x3D;&quot;请输入角色名称&quot;\n            clearable\n          &gt;\n          &lt;&#x2F;el-input&gt;\n        &lt;&#x2F;el-form-item&gt;\n        &lt;el-form-item&gt;\n          &lt;el-button\n            size&#x3D;&quot;small&quot;\n            type&#x3D;&quot;primary&quot;\n            icon&#x3D;&quot;el-icon-search&quot;\n            @click&#x3D;&quot;getRoleList()&quot;\n          &gt;查询&lt;&#x2F;el-button&gt;\n          &lt;el-button\n            @click&#x3D;&quot;() &#x3D;&gt; this.$refs[&#39;searchForm&#39;].resetFields()&quot;\n            icon&#x3D;&quot;el-icon-refresh-right&quot;\n          &gt;重置&lt;&#x2F;el-button&gt;\n        &lt;&#x2F;el-form-item&gt;\n      &lt;&#x2F;el-form&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;div class&#x3D;&quot;mainBody&quot;&gt;\n      &lt;el-row\n        type&#x3D;&quot;flex&quot;\n        justify&#x3D;&quot;space-between&quot;\n        class&#x3D;&quot;mainMessage&quot;\n      &gt;\n        &lt;el-col class&#x3D;&quot;mainMessageLeft&quot;&gt;\n          &lt;div&gt;&lt;b&gt;查询结果&lt;&#x2F;b&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;el-col&gt;\n        &lt;el-col\n          :span&#x3D;&quot;4&quot;\n          class&#x3D;&quot;mainMessageRight&quot;\n        &gt;\n          &lt;div&gt;\n            &lt;el-button\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;primary&quot;\n              @click&#x3D;&quot;roleAdd&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;sys:role:add&#39;)&quot;\n            &gt;\n              新增\n            &lt;&#x2F;el-button&gt;\n            &lt;el-button\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;danger&quot;\n              :disabled&#x3D;&quot;delBatchBtn&quot;\n              @click&#x3D;&quot;delRole(null)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;sys:role:delete&#39;)&quot;\n            &gt;删除选中&lt;&#x2F;el-button&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;el-col&gt;\n      &lt;&#x2F;el-row&gt;\n      &lt;RoleAdd &#x2F;&gt;\n\n      &lt;template&gt;\n        &lt;el-table\n          ref&#x3D;&quot;multipleTable&quot;\n          class&#x3D;&quot;mainTable&quot;\n          border\n          :fit&#x3D;&quot;true&quot;\n          :data&#x3D;&quot;roleList&quot;\n          max-height&#x3D;&quot;420&quot;\n          :header-cell-style&#x3D;&quot;&#123;background:&#39;#ddd&#39;&#125;&quot;\n          @selection-change&#x3D;&quot;handleSelectionChange&quot;\n          :default-sort&#x3D;&quot;&#123;prop: &#39;roleName&#39;, order: &#39;ascending&#39;&#125;&quot;\n        &gt;\n          &lt;el-table-column type&#x3D;&quot;selection&quot;&gt;\n          &lt;&#x2F;el-table-column&gt;\n          &lt;el-table-column\n            prop&#x3D;&quot;roleName&quot;\n            align&#x3D;&quot;center&quot;\n            sortable\n            label&#x3D;&quot;名称&quot;\n          &gt;\n          &lt;&#x2F;el-table-column&gt;\n          &lt;el-table-column\n            prop&#x3D;&quot;code&quot;\n            align&#x3D;&quot;center&quot;\n            label&#x3D;&quot;唯一编码&quot;\n            width&#x3D;&quot;120&quot;\n          &gt;\n          &lt;&#x2F;el-table-column&gt;\n          &lt;el-table-column\n            prop&#x3D;&quot;remark&quot;\n            align&#x3D;&quot;center&quot;\n            label&#x3D;&quot;描述&quot;\n            width&#x3D;&quot;500&quot;\n          &gt;\n          &lt;&#x2F;el-table-column&gt;\n          &lt;el-table-column\n            prop&#x3D;&quot;valiFlag&quot;\n            label&#x3D;&quot;状态&quot;\n            align&#x3D;&quot;center&quot;\n          &gt;\n            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n              &lt;el-tag\n                v-if&#x3D;&quot;scope.row.valiFlag &#x3D;&#x3D;&#x3D; 0&quot;\n                size&#x3D;&quot;small&quot;\n                type&#x3D;&quot;danger&quot;\n              &gt;禁用&lt;&#x2F;el-tag&gt;\n              &lt;el-tag\n                v-else-if&#x3D;&quot;scope.row.valiFlag &#x3D;&#x3D;&#x3D; 1&quot;\n                size&#x3D;&quot;small&quot;\n                type&#x3D;&quot;success&quot;\n              &gt;正常&lt;&#x2F;el-tag&gt;\n            &lt;&#x2F;template&gt;\n          &lt;&#x2F;el-table-column&gt;\n          &lt;el-table-column\n            label&#x3D;&quot;操作&quot;\n            align&#x3D;&quot;center&quot;\n            width&#x3D;&quot;320&quot;\n          &gt;\n            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n              &lt;el-button\n                size&#x3D;&quot;small&quot;\n                type&#x3D;&quot;primary&quot;\n                @click&#x3D;&quot;rolePermission(scope.row)&quot;\n                v-if&#x3D;&quot;hasAuth(&#39;sys:role:permission&#39;)&quot;\n              &gt;分配权限&lt;&#x2F;el-button&gt;\n              &lt;el-button\n                size&#x3D;&quot;small&quot;\n                type&#x3D;&quot;success&quot;\n                @click&#x3D;&quot;roleEdit(scope.row)&quot;\n                v-if&#x3D;&quot;hasAuth(&#39;sys:role:update&#39;)&quot;\n              &gt;编辑&lt;&#x2F;el-button&gt;\n              &lt;el-button\n                size&#x3D;&quot;small&quot;\n                type&#x3D;&quot;danger&quot;\n                @click&#x3D;&quot;delRole(scope.row.roleId)&quot;\n                v-if&#x3D;&quot;hasAuth(&#39;sys:role:delete&#39;)&quot;\n              &gt;删除&lt;&#x2F;el-button&gt;\n            &lt;&#x2F;template&gt;\n          &lt;&#x2F;el-table-column&gt;\n        &lt;&#x2F;el-table&gt;\n        &lt;RolePermission &#x2F;&gt;\n        &lt;RoleEdit &#x2F;&gt;\n      &lt;&#x2F;template&gt;\n\n      &lt;el-pagination\n        class&#x3D;&quot;mainPagination&quot;\n        @size-change&#x3D;&quot;handleSizeChange&quot;\n        @current-change&#x3D;&quot;handleCurrentChange&quot;\n        :current-page&#x3D;&quot;current&quot;\n        :page-sizes&#x3D;&quot;[10, 20, 50, 100]&quot;\n        :page-size&#x3D;&quot;size&quot;\n        layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;\n        :total&#x3D;&quot;total&quot;\n      &gt;\n      &lt;&#x2F;el-pagination&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nimport &#39;..&#x2F;..&#x2F;..&#x2F;assets&#x2F;css&#x2F;mainStyle.css&#39;;\nimport RoleAdd from &#39;.&#x2F;RoleAdd.vue&#39;;\nimport RolePermission from &#39;.&#x2F;RolePermission.vue&#39;;\nimport RoleEdit from &#39;.&#x2F;RoleEdit.vue&#39;;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &quot;Role&quot;,\n  data() &#123;\n    return &#123;\n      searchForm: &#123;\n        roleName: &#39;&#39;\n      &#125;,\n      roleList: [],\n      multipleSelection: [],\n      delBatchBtn: true,\n      current: 1,\n      size: 10,\n      total: 0,\n    &#125;\n  &#125;,\n  methods: &#123;\n    roleAdd() &#123;\n      this.$bus.$emit(&#39;roleAdd&#39;)\n    &#125;,\n    rolePermission(row) &#123;\n      this.$bus.$emit(&#39;RolePermission&#39;, row)\n    &#125;,\n    roleEdit(row) &#123;\n      this.$bus.$emit(&#39;RoleEdit&#39;, row)\n    &#125;,\n    handleSelectionChange(val) &#123;\n      this.multipleSelection &#x3D; val;\n      this.delBatchBtn &#x3D; val.length &#x3D;&#x3D; 0\n    &#125;,\n    getRoleList() &#123;\n      this.$axios.get(&#39;&#x2F;hrms&#x2F;sys&#x2F;role&#x2F;getRoleList&#39;, &#123;\n        params: &#123;\n          roleName: this.searchForm.roleName,\n          valiFlag: &#39;&#39;,\n          current: this.current,\n          size: this.size\n        &#125;\n      &#125;).then(res &#x3D;&gt; &#123;\n        this.roleList &#x3D; res.data.data.records;\n        this.current &#x3D; res.data.data.current;\n        this.size &#x3D; res.data.data.size;\n        this.total &#x3D; res.data.data.total;\n      &#125;);\n    &#125;,\n    handleSizeChange(val) &#123;\n      this.size &#x3D; val\n      this.getRoleList()\n    &#125;,\n    handleCurrentChange(val) &#123;\n      this.current &#x3D; val\n      this.getRoleList()\n    &#125;,\n    delRole(roleId) &#123;\n      this.$confirm(&#39;是否确定删除?&#39;, &#39;提示&#39;, &#123;\n        confirmButtonText: &#39;确定&#39;,\n        cancelButtonText: &#39;取消&#39;,\n        type: &#39;warning&#39;\n      &#125;).then(() &#x3D;&gt; &#123;\n        var roleIds &#x3D; []\n        roleId ? roleIds.push(roleId) : this.multipleSelection.forEach(row &#x3D;&gt; &#123;\n          roleIds.push(row.roleId)\n        &#125;)\n        this.$axios.delete(&quot;&#x2F;hrms&#x2F;sys&#x2F;role&#x2F;deleteRole&quot;, &#123;\n          data: &#123;\n            roleIds: roleIds\n          &#125;\n        &#125;).then(() &#x3D;&gt; &#123;\n          this.$message.success(&#39;删除角色成功&#39;)\n          this.getRoleList()\n        &#125;)\n      &#125;).catch(() &#x3D;&gt; &#123;\n        this.$message(&#123;\n          type: &#39;success&#39;,\n          message: &#39;已取消删除&#39;\n        &#125;);\n      &#125;);\n    &#125;,\n  &#125;,\n  created() &#123;\n    this.getRoleList()\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;refreshRoleList&#39;, () &#x3D;&gt; &#123;\n      this.getRoleList()\n    &#125;)\n  &#125;,\n  components: &#123;\n    RoleAdd,\n    RolePermission,\n    RoleEdit\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>2、新增角色对话框 RoleAdd.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;角色信息&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    width&#x3D;&quot;600px&quot;\n    @close&#x3D;&quot;resetForm(&#39;addForm&#39;)&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;addForm&quot;\n      :rules&#x3D;&quot;addFormRules&quot;\n      ref&#x3D;&quot;addForm&quot;\n    &gt;\n      &lt;el-form-item\n        label&#x3D;&quot;角色名称&quot;\n        prop&#x3D;&quot;roleName&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.roleName&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;唯一编码&quot;\n        prop&#x3D;&quot;code&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.code&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;描述&quot;\n        prop&#x3D;&quot;remark&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;addForm.remark&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;状态&quot;\n        prop&#x3D;&quot;valiFlag&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;addForm.valiFlag&quot;&gt;\n          &lt;el-radio :label&#x3D;&quot;0&quot;&gt;禁用&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;&quot;1&quot;&gt;正常&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;dialogFormVisible &#x3D; false&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;submitAddForm(&#39;addForm&#39;)&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;RoleAdd&#39;,\n  data() &#123;\n    return &#123;\n      dialogFormVisible: false,\n      addForm: &#123;&#125;,\n      addFormRules: &#123;\n        roleName: [\n          &#123; required: true, message: &#39;请输入名称&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        code: [\n          &#123; required: true, message: &#39;请输入唯一编码&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        valiFlag: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ]\n      &#125;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    submitAddForm(formName) &#123;\n      this.$refs[formName].validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          this.$axios.post(&#39;&#x2F;hrms&#x2F;sys&#x2F;role&#x2F;addRole&#39;, this.addForm).then(() &#x3D;&gt; &#123;\n            this.$message.success(&#39;添加角色成功&#39;)\n            this.dialogFormVisible &#x3D; false;\n            this.$bus.$emit(&#39;refreshRoleList&#39;)\n          &#125;)\n        &#125; else &#123;\n          console.log(&#39;error submit!!&#39;);\n          return false;\n        &#125;\n      &#125;);\n    &#125;,\n    resetForm(formName) &#123;\n      this.$refs[formName].resetFields();\n    &#125;,\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;roleAdd&#39;, () &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true\n    &#125;)\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>3、编辑角色对话框 RoleEdit.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;角色信息&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    width&#x3D;&quot;600px&quot;\n    @close&#x3D;&quot;resetForm&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;editForm&quot;\n      :rules&#x3D;&quot;editFormRules&quot;\n      ref&#x3D;&quot;editForm&quot;\n    &gt;\n      &lt;el-form-item\n        label&#x3D;&quot;角色名称&quot;\n        prop&#x3D;&quot;roleName&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.roleName&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;唯一编码&quot;\n        prop&#x3D;&quot;code&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.code&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;描述&quot;\n        prop&#x3D;&quot;remark&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.remark&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;状态&quot;\n        prop&#x3D;&quot;valiFlag&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;editForm.valiFlag&quot;&gt;\n          &lt;el-radio :label&#x3D;&quot;0&quot;&gt;禁用&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;&quot;1&quot;&gt;正常&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;dialogFormVisible &#x3D; false&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;updateRole(&#39;editForm&#39;)&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;RoleEdit&#39;,\n  data() &#123;\n    return &#123;\n      dialogFormVisible: false,\n      editForm: &#123;&#125;,\n      editFormRules: &#123;\n        roleName: [\n          &#123; required: true, message: &#39;请输入名称&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        code: [\n          &#123; required: true, message: &#39;请输入唯一编码&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        valiFlag: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ]\n      &#125;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    updateRole(formName) &#123;\n      this.$refs[formName].validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          this.$axios.put(&#39;&#x2F;hrms&#x2F;sys&#x2F;role&#x2F;updateRole&#39;, this.editForm).then(() &#x3D;&gt; &#123;\n            this.$message.success(&#39;修改角色成功&#39;)\n            this.dialogFormVisible &#x3D; false;\n          &#125;)\n        &#125; else &#123;\n          console.log(&#39;error submit!!&#39;);\n          return false;\n        &#125;\n      &#125;);\n    &#125;,\n    resetForm() &#123;\n      this.editForm &#x3D; &#123;&#125;;\n      this.$bus.$emit(&#39;refreshRoleList&#39;)\n    &#125;,\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;RoleEdit&#39;, row &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true\n      this.editForm &#x3D; row\n    &#125;)\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>4、分配权限对话框 RolePermission.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;分配权限&quot;\n    class&#x3D;&quot;el-dialog-role&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    width&#x3D;&quot;600px&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n    @closed&#x3D;&quot;resetForm(&#39;permissionForm&#39;)&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;permissionForm&quot;\n      ref&#x3D;&quot;permissionForm&quot;\n    &gt;\n      &lt;el-tree\n        :data&#x3D;&quot;permissionTree&quot;\n        show-checkbox\n        ref&#x3D;&quot;permissionTree&quot;\n        :check-strictly&#x3D;&quot;checkStrictly&quot;\n        node-key&#x3D;&quot;menuId&quot;\n        :default-expand-all&#x3D;true\n        :props&#x3D;&quot;defaultProps&quot;\n      &gt;\n      &lt;&#x2F;el-tree&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;dialogFormVisible &#x3D; false&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;rolePermission&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;RolePermission&#39;,\n  data() &#123;\n    return &#123;\n      dialogFormVisible: false,\n      permissionTree: [],\n      permissionForm: &#123;&#125;,\n      defaultProps: &#123;\n        children: &#39;children&#39;,\n        label: &#39;menuName&#39;,\n      &#125;,\n      checkStrictly: true,\n    &#125;\n  &#125;,\n  methods: &#123;\n    rolePermission() &#123;\n      var menuIds &#x3D; this.$refs.permissionTree.getCheckedKeys();\n      &#x2F;&#x2F; menuIds &#x3D; menuIds.concat(this.$refs.permTree.getHalfCheckedKeys()) &#x2F;&#x2F; 半选中状态的父节点\n      this.$axios.post(&quot;&#x2F;hrms&#x2F;sys&#x2F;role&#x2F;assignPermissions&#x2F;&quot; + this.permissionForm.roleId, menuIds).then(() &#x3D;&gt; &#123;\n        this.$message.success(&quot;分配权限成功&quot;);\n        this.$bus.$emit(&quot;refreshRoleList&quot;);\n        this.$store.state.menu.hasRoute &#x3D; false;\n        this.dialogFormVisible &#x3D; false\n      &#125;)\n    &#125;,\n    resetForm(formName) &#123;\n      this.$refs[formName].resetFields();\n    &#125;,\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;RolePermission&#39;, row &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true;\n      this.permissionForm &#x3D; row;\n      this.$axios.get(&quot;&#x2F;hrms&#x2F;sys&#x2F;menu&#x2F;getMenuList?valiFlag&#x3D;1&quot;).then(res &#x3D;&gt; &#123;\n        this.permissionTree &#x3D; res.data.data;\n        this.$refs.permissionTree.setCheckedKeys(row.menuIds);\n      &#125;)\n    &#125;)\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n.el-dialog-role &#123;\n  width: 100%;\n  margin-top: -90px;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h2 id=\"2-8-用户管理\"><a href=\"#2-8-用户管理\" class=\"headerlink\" title=\"2.8 用户管理\"></a>2.8 用户管理</h2><p><img src=\"http://img.fan223.cn/2023/04/20230419153341.png\"></p>\n<p><strong>1、新建用户组件 User.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class&#x3D;&quot;mainHeader&quot;&gt;\n      &lt;el-form\n        :inline&#x3D;&quot;true&quot;\n        class&#x3D;&quot;demo-form-inline&quot;\n        size&#x3D;&quot;small&quot;\n        :model&#x3D;&quot;searchForm&quot;\n        ref&#x3D;&quot;searchForm&quot;\n        @submit.native.prevent&#x3D;&quot;getEmployeeList&quot;\n      &gt;\n        &lt;el-form-item\n          label&#x3D;&quot;姓名&quot;\n          prop&#x3D;&quot;empName&quot;\n        &gt;\n          &lt;el-input\n            v-model&#x3D;&quot;searchForm.empName&quot;\n            placeholder&#x3D;&quot;请输入用户姓名&quot;\n            clearable\n          &gt;\n          &lt;&#x2F;el-input&gt;\n        &lt;&#x2F;el-form-item&gt;\n        &lt;el-form-item&gt;\n          &lt;el-button\n            size&#x3D;&quot;small&quot;\n            type&#x3D;&quot;primary&quot;\n            icon&#x3D;&quot;el-icon-search&quot;\n            @click&#x3D;&quot;getEmployeeList&quot;\n          &gt;查询&lt;&#x2F;el-button&gt;\n          &lt;el-button\n            @click&#x3D;&quot;() &#x3D;&gt; this.$refs[&#39;searchForm&#39;].resetFields()&quot;\n            icon&#x3D;&quot;el-icon-refresh-right&quot;\n          &gt;重置&lt;&#x2F;el-button&gt;\n        &lt;&#x2F;el-form-item&gt;\n      &lt;&#x2F;el-form&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;div class&#x3D;&quot;mainBody&quot;&gt;\n      &lt;el-row\n        type&#x3D;&quot;flex&quot;\n        justify&#x3D;&quot;space-between&quot;\n        class&#x3D;&quot;mainMessage&quot;\n      &gt;\n        &lt;el-col class&#x3D;&quot;mainMessageLeft&quot;&gt;\n          &lt;div&gt;&lt;b&gt;查询结果&lt;&#x2F;b&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;el-col&gt;\n      &lt;&#x2F;el-row&gt;\n      &lt;el-table\n        class&#x3D;&quot;mainTable&quot;\n        ref&#x3D;&quot;multipleTable&quot;\n        border\n        :fit&#x3D;&quot;true&quot;\n        :header-cell-style&#x3D;&quot;&#123;background:&#39;#ddd&#39;&#125;&quot;\n        max-height&#x3D;&quot;420&quot;\n        :data&#x3D;&quot;employeeList&quot;\n        :default-sort&#x3D;&quot;&#123;prop: &#39;empName&#39;, order: &#39;ascending&#39;&#125;&quot;\n      &gt;\n        &lt;el-table-column\n          label&#x3D;&quot;头像&quot;\n          align&#x3D;&quot;center&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-avatar\n              size&#x3D;&quot;small&quot;\n              :src&#x3D;&quot;scope.row.avatar&quot;\n            &gt;&lt;&#x2F;el-avatar&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;empName&quot;\n          label&#x3D;&quot;用户名&quot;\n          align&#x3D;&quot;center&quot;\n          sortable\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          label&#x3D;&quot;角色名称&quot;\n          align&#x3D;&quot;center&quot;\n          width&#x3D;&quot;200&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-tag\n              style&#x3D;&quot;margin-right: 5px;&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;info&quot;\n              v-for&#x3D;&quot;item in scope.row.sysRoleDOS&quot;\n              :key&#x3D;&quot;item.empId&quot;\n            &gt;&#123;&#123;item.roleName&#125;&#125;&lt;&#x2F;el-tag&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;empCode&quot;\n          label&#x3D;&quot;工号&quot;\n          sortable\n          align&#x3D;&quot;center&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;idcardNo&quot;\n          label&#x3D;&quot;身份证号&quot;\n          width&#x3D;&quot;180&quot;\n          align&#x3D;&quot;center&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          label&#x3D;&quot;状态&quot;\n          align&#x3D;&quot;center&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-tag\n              v-if&#x3D;&quot;scope.row.valiFlag &#x3D;&#x3D;&#x3D; 0&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;danger&quot;\n            &gt;禁用&lt;&#x2F;el-tag&gt;\n            &lt;el-tag\n              v-else-if&#x3D;&quot;scope.row.valiFlag &#x3D;&#x3D;&#x3D; 1&quot;\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;success&quot;\n            &gt;正常&lt;&#x2F;el-tag&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;createTime&quot;\n          label&#x3D;&quot;创建时间&quot;\n          sortable\n          align&#x3D;&quot;center&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          align&#x3D;&quot;center&quot;\n          label&#x3D;&quot;操作&quot;\n          fixed&#x3D;&quot;right&quot;\n          width&#x3D;&quot;300&quot;\n        &gt;\n          &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n            &lt;el-button\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;primary&quot;\n              @click&#x3D;&quot;userRole(scope.row)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;employee:role&#39;)&quot;\n            &gt;分配角色&lt;&#x2F;el-button&gt;\n            &lt;el-button\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;danger&quot;\n              @click&#x3D;&quot;rePassword(scope.row)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;employee:resetPassword&#39;)&quot;\n            &gt;重置密码&lt;&#x2F;el-button&gt;\n            &lt;el-button\n              size&#x3D;&quot;small&quot;\n              type&#x3D;&quot;success&quot;\n              @click&#x3D;&quot;userEdit(scope.row)&quot;\n              v-if&#x3D;&quot;hasAuth(&#39;employee:update&#39;)&quot;\n            &gt;编辑&lt;&#x2F;el-button&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n      &lt;el-pagination\n        class&#x3D;&quot;mainPagination&quot;\n        @size-change&#x3D;&quot;handleSizeChange&quot;\n        @current-change&#x3D;&quot;handleCurrentChange&quot;\n        :current-page&#x3D;&quot;current&quot;\n        :page-sizes&#x3D;&quot;[10, 20, 50, 100]&quot;\n        :page-size&#x3D;&quot;size&quot;\n        layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;\n        :total&#x3D;&quot;total&quot;\n      &gt;\n      &lt;&#x2F;el-pagination&gt;\n    &lt;&#x2F;div&gt;\n    &lt;UserEdit &#x2F;&gt;\n    &lt;UserRole &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport &#39;..&#x2F;..&#x2F;..&#x2F;assets&#x2F;css&#x2F;mainStyle.css&#39;\nimport UserEdit from &#39;.&#x2F;UserEdit&#39;\nimport UserRole from &#39;.&#x2F;UserRole&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; eslint-disable-next-line vue&#x2F;multi-word-component-names\n  name: &quot;User&quot;,\n  data() &#123;\n    return &#123;\n      searchForm: &#123;\n        empName: &#39;&#39;\n      &#125;,\n      current: 1,\n      total: 0,\n      size: 10,\n      dialogFormVisible: false,\n      employeeList: [],\n    &#125;\n  &#125;,\n  methods: &#123;\n    getEmployeeList() &#123;\n      this.$axios.get(&#39;&#x2F;hrms&#x2F;employee&#x2F;getEmployeeList&#39;, &#123;\n        params: &#123;\n          empName: this.searchForm.empName,\n          pageNum: this.current,\n          pageSize: this.size,\n          valiFlag: 1\n        &#125;\n      &#125;).then(res &#x3D;&gt; &#123;\n        this.employeeList &#x3D; res.data.data.records\n        this.current &#x3D; res.data.data.current\n        this.size &#x3D; res.data.data.size\n        this.total &#x3D; res.data.data.total\n      &#125;)\n    &#125;,\n    handleSizeChange(val) &#123;\n      this.size &#x3D; val\n      this.getEmployeeList()\n    &#125;,\n    handleCurrentChange(val) &#123;\n      this.current &#x3D; val\n      this.getEmployeeList()\n    &#125;,\n    userEdit(row) &#123;\n      this.$bus.$emit(&#39;UserEdit&#39;, row)\n    &#125;,\n    userRole(row) &#123;\n      this.$bus.$emit(&#39;UserRole&#39;, row)\n    &#125;,\n    rePassword(row) &#123;\n      this.$confirm(&#39;将重置用户【&#39; + row.empName + &#39;】的密码, 是否继续?&#39;, &#39;提示&#39;, &#123;\n        confirmButtonText: &#39;确定&#39;,\n        cancelButtonText: &#39;取消&#39;,\n        type: &#39;warning&#39;\n      &#125;).then(() &#x3D;&gt; &#123;\n        this.$axios.post(&quot;&#x2F;hrms&#x2F;employee&#x2F;resetPassword&quot;, row.empId).then(() &#x3D;&gt; &#123;\n          this.$message.success(&#39;重置密码成功&#39;)\n        &#125;)\n      &#125;).catch(() &#x3D;&gt; &#123;\n        this.$message.success(&#39;已取消重置密码&#39;)\n      &#125;)\n    &#125;\n  &#125;,\n  created() &#123;\n    this.getEmployeeList()\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;refreshEmployeeList&#39;, () &#x3D;&gt; this.getEmployeeList())\n  &#125;,\n  components: &#123;\n    UserEdit,\n    UserRole\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>2、编辑用户对话框 UserEdit.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;用户信息&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    width&#x3D;&quot;600px&quot;\n    @closed&#x3D;&quot;resetForm(&#39;editForm&#39;)&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;editForm&quot;\n      :rules&#x3D;&quot;editFormRules&quot;\n      ref&#x3D;&quot;editForm&quot;\n    &gt;\n      &lt;el-form-item\n        label&#x3D;&quot;用户名&quot;\n        prop&#x3D;&quot;empName&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.empName&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;工号&quot;\n        prop&#x3D;&quot;empCode&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.empCode&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;身份证号&quot;\n        prop&#x3D;&quot;idcardNo&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-input\n          v-model&#x3D;&quot;editForm.idcardNo&quot;\n          autocomplete&#x3D;&quot;off&quot;\n        &gt;&lt;&#x2F;el-input&gt;\n      &lt;&#x2F;el-form-item&gt;\n      &lt;el-form-item\n        label&#x3D;&quot;状态&quot;\n        prop&#x3D;&quot;valiFlag&quot;\n        label-width&#x3D;&quot;100px&quot;\n      &gt;\n        &lt;el-radio-group v-model&#x3D;&quot;editForm.valiFlag&quot;&gt;\n          &lt;el-radio :label&#x3D;&quot;0&quot;&gt;禁用&lt;&#x2F;el-radio&gt;\n          &lt;el-radio :label&#x3D;&quot;1&quot;&gt;正常&lt;&#x2F;el-radio&gt;\n        &lt;&#x2F;el-radio-group&gt;\n      &lt;&#x2F;el-form-item&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;dialogFormVisible &#x3D; false&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;updateEmployee(&#39;editForm&#39;)&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;UserEdit&#39;,\n  data() &#123;\n    return &#123;\n      editForm: &#123;&#125;,\n      dialogFormVisible: false,\n      editFormRules: &#123;\n        empName: [\n          &#123; required: true, message: &#39;请输入用户名称&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        empCode: [\n          &#123; required: true, message: &#39;请输入工号&#39;, trigger: &#39;blur&#39; &#125;\n        ],\n        valiFlag: [\n          &#123; required: true, message: &#39;请选择状态&#39;, trigger: &#39;blur&#39; &#125;\n        ]\n      &#125;,\n    &#125;\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;UserEdit&#39;, row &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true;\n      this.editForm &#x3D; row\n    &#125;)\n  &#125;,\n  methods: &#123;\n    updateEmployee(formName) &#123;\n      this.$refs[formName].validate((valid) &#x3D;&gt; &#123;\n        if (valid) &#123;\n          this.$axios.put(&#39;&#x2F;hrms&#x2F;employee&#x2F;updateEmployee&#39;, this.editForm).then(() &#x3D;&gt; &#123;\n            this.$message.success(&#39;修改成功&#39;)\n            this.dialogFormVisible &#x3D; false;\n          &#125;)\n        &#125; else &#123;\n          console.log(&#39;error submit!!&#39;);\n          return false;\n        &#125;\n      &#125;);\n    &#125;,\n    resetForm() &#123;\n      this.editForm &#x3D; &#123;&#125;;\n      this.$bus.$emit(&#39;refreshEmployeeList&#39;)\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>3、分配角色对话框 UserRole.vue</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;el-dialog\n    title&#x3D;&quot;分配角色&quot;\n    :visible.sync&#x3D;&quot;dialogFormVisible&quot;\n    width&#x3D;&quot;600px&quot;\n    @closed&#x3D;&quot;resetForm(&#39;userRoleForm&#39;)&quot;\n    :close-on-click-modal&#x3D;&quot;false&quot;\n  &gt;\n    &lt;el-form\n      :model&#x3D;&quot;userRoleForm&quot;\n      ref&#x3D;&quot;userRoleForm&quot;\n    &gt;\n      &lt;el-tree\n        :data&#x3D;&quot;roleTree&quot;\n        show-checkbox\n        ref&#x3D;&quot;roleTree&quot;\n        node-key&#x3D;&quot;roleId&quot;\n        :check-strictly&#x3D;&quot;checkStrictly&quot;\n        :default-expand-all&#x3D;true\n        :props&#x3D;&quot;defaultProps&quot;\n      &gt;\n      &lt;&#x2F;el-tree&gt;\n    &lt;&#x2F;el-form&gt;\n    &lt;div\n      slot&#x3D;&quot;footer&quot;\n      class&#x3D;&quot;dialog-footer&quot;\n    &gt;\n      &lt;el-button @click&#x3D;&quot;dialogFormVisible &#x3D; false&quot;&gt;取 消&lt;&#x2F;el-button&gt;\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        @click&#x3D;&quot;userRole&quot;\n      &gt;确 定&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;UserRole&#39;,\n  data() &#123;\n    return &#123;\n      dialogFormVisible: false,\n      userRoleForm: &#123;&#125;,\n      roleTree: [],\n      defaultProps: &#123;\n        children: &#39;children&#39;,\n        label: &#39;roleName&#39;\n      &#125;,\n      checkStrictly: true,\n    &#125;\n  &#125;,\n  mounted() &#123;\n    this.$bus.$on(&#39;UserRole&#39;, row &#x3D;&gt; &#123;\n      this.dialogFormVisible &#x3D; true;\n      this.userRoleForm &#x3D; row;\n\n      this.$axios.get(&#39;&#x2F;hrms&#x2F;sys&#x2F;role&#x2F;getRoleList&#39;, &#123;\n        params: &#123;\n          roleName: &#39;&#39;,\n          valiFlag: &#39;1&#39;,\n          current: 1,\n          size: 10\n        &#125;\n      &#125;).then(res &#x3D;&gt; &#123;\n        this.roleTree &#x3D; res.data.data.records\n        this.$refs.roleTree.setCheckedKeys(row.roleIds);\n      &#125;)\n    &#125;)\n  &#125;,\n  methods: &#123;\n    userRole() &#123;\n      var roleIds &#x3D; this.$refs.roleTree.getCheckedKeys()\n      this.$axios.post(&quot;&#x2F;hrms&#x2F;employee&#x2F;assignRoles&#x2F;&quot; + this.userRoleForm.empId, roleIds).then(() &#x3D;&gt; &#123;\n        this.$message.success(&#39;分配角色成功&#39;)\n        this.$store.state.menu.hasRoute &#x3D; false;\n        this.$bus.$emit(&#39;refreshEmployeeList&#39;)\n        this.dialogFormVisible &#x3D; false\n      &#125;)\n    &#125;,\n    resetForm(formName) &#123;\n      this.$refs[formName].resetFields();\n      this.roleTree &#x3D; &#123;&#125;\n    &#125;,\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h1 id=\"3-Spring-Security-后端项目搭建\"><a href=\"#3-Spring-Security-后端项目搭建\" class=\"headerlink\" title=\"3. Spring Security 后端项目搭建\"></a>3. Spring Security 后端项目搭建</h1><h2 id=\"3-1-执行流程图\"><a href=\"#3-1-执行流程图\" class=\"headerlink\" title=\"3.1 执行流程图\"></a>3.1 执行流程图</h2><p><img src=\"http://img.fan223.cn/2023/04/20230419153356.png\"></p>\n<p><strong>流程说明：</strong></p>\n<ol>\n<li>客户端发起一个请求，进入 Security 过滤器链</li>\n<li>当到 LogoutFilter 的时候判断是否是登出路径，如果是登出路径则到 logoutHandler ，如果登出成功则到 logoutSuccessHandler 登出成功处理。如果不是登出路径则直接进入下一个过滤器</li>\n<li>当到 UsernamePasswordAuthenticationFilter 的时候判断是否为登录路径，如果是，则进入该过滤器进行登录操作，如果登录失败则到 AuthenticationFailureHandler 登录失败处理器处理，如果登录成功则到 AuthenticationSuccessHandler 登录成功处理器处理，如果不是登录请求则不进入该过滤器</li>\n<li>进入认证 BasicAuthenticationFilter 进行用户认证，成功的话会把认证了的结果写入到 SecurityContextHolder 中 SecurityContext 的属性 authentication 上面。如果认证失败就会交给 AuthenticationEntryPoint 认证失败处理类，或者抛出异常被后续 ExceptionTranslationFilter 过滤器处理异常，如果是 AuthenticationException 就交给 AuthenticationEntryPoint 处理，如果是 AccessDeniedException 异常则交给 AccessDeniedHandler 处理</li>\n<li>当到 FilterSecurityInterceptor 的时候会拿到 uri ，根据 uri 去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到 Controller 层，否则到 AccessDeniedHandler 鉴权失败处理器处理</li>\n</ol>\n<p><strong>Spring Security 详细可参考：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/123482893\">https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;123482893</a></strong></p>\n<p><strong>项目中用到的部分组件：</strong></p>\n<ul>\n<li>LogoutFilter - 登出过滤器</li>\n<li>logoutSuccessHandler - 登出成功之后的处理器</li>\n<li>UsernamePasswordAuthenticationFilter - from提交用户名密码登录认证过滤器</li>\n<li>AuthenticationFailureHandler - 登录失败处理器</li>\n<li>AuthenticationSuccessHandler - 登录成功处理器</li>\n<li>BasicAuthenticationFilter - Basic身份认证过滤器</li>\n<li>SecurityContextHolder - 安全上下文静态工具类</li>\n<li>AuthenticationEntryPoint - 认证失败入口</li>\n<li>ExceptionTranslationFilter - 异常处理过滤器</li>\n<li>AccessDeniedHandler - 权限不足操作类</li>\n<li>FilterSecurityInterceptor - 权限判断拦截器、出口</li>\n</ul>\n<h2 id=\"3-2-准备\"><a href=\"#3-2-准备\" class=\"headerlink\" title=\"3.2 准备\"></a>3.2 准备</h2><h3 id=\"3-2-1-Security-POM-依赖\"><a href=\"#3-2-1-Security-POM-依赖\" class=\"headerlink\" title=\"3.2.1 Security POM 依赖\"></a>3.2.1 Security POM 依赖</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- Spring Security --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- Redis --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.6.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- jjwt --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;$&#123;jjwt.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- kaptcha --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;cloud.agileframework&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;spring-boot-starter-kaptcha&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;2.1.0.M19&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"3-2-2-RedisConfig-配置类\"><a href=\"#3-2-2-RedisConfig-配置类\" class=\"headerlink\" title=\"3.2.2 RedisConfig 配置类\"></a>3.2.2 RedisConfig 配置类</h3><p><strong>重新定义 Redis 的序列化规则。将 RedisTemplate 的 Key 的序列化规则设为 StringRedisSerializer，Value 的序列化规则设为 Jackson2JsonRedisSerializer</strong></p>\n<p><strong>关于 Redis 序列化规则参考：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/124565124\">https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;124565124</a></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class RedisConfig &#123;\n\n    @Bean\n    RedisTemplate redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n        RedisTemplate redisTemplate &#x3D; new RedisTemplate();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);\n        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);\n\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n  \n        return redisTemplate;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-3-CorsConfig-跨域配置类\"><a href=\"#3-2-3-CorsConfig-跨域配置类\" class=\"headerlink\" title=\"3.2.3 CorsConfig 跨域配置类\"></a>3.2.3 CorsConfig 跨域配置类</h3><p>浏览器出于安全的考虑，使用 XMLHttpRequest 对象发起 HTTP 请求时必须遵守同源策略，否则就是跨域的 HTTP 请求，默认情况下是被禁止的。同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致</p>\n<p>前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题，需要进行处理让前端能进行跨域请求</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class CorsConfig implements WebMvcConfigurer &#123;\n\n    private CorsConfiguration buildConfig() &#123;\n        CorsConfiguration corsConfiguration &#x3D; new CorsConfiguration();\n        corsConfiguration.addAllowedOrigin(&quot;*&quot;); &#x2F;&#x2F; 允许所有来源\n        corsConfiguration.addAllowedHeader(&quot;*&quot;); &#x2F;&#x2F; 允许所有请求头\n        corsConfiguration.addAllowedMethod(&quot;*&quot;); &#x2F;&#x2F; 允许所有方法\n        corsConfiguration.addExposedHeader(&quot;Authorization&quot;);\n        return corsConfiguration;\n    &#125;\n\n    @Bean\n    public CorsFilter corsFilter() &#123;\n        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource &#x3D; new UrlBasedCorsConfigurationSource();\n        urlBasedCorsConfigurationSource.registerCorsConfiguration(&quot;&#x2F;**&quot;, buildConfig());\n        return new CorsFilter(urlBasedCorsConfigurationSource);\n    &#125;\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) &#123;\n        &#x2F;&#x2F; 设置允许跨域的路径\n        registry.addMapping(&quot;&#x2F;**&quot;)\n                &#x2F;&#x2F; 设置允许跨域请求的域名\n                .allowedOriginPatterns(&quot;*&quot;)\n                &#x2F;&#x2F; 是否允许 cookie\n&#x2F;&#x2F;                .allowCredentials(true)\n                &#x2F;&#x2F; 设置允许的请求方式\n                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot;)\n                &#x2F;&#x2F; 设置允许的 header 属性\n                .allowedHeaders(&quot;*&quot;)\n                &#x2F;&#x2F; 跨域允许时间\n                .maxAge(3600);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-4-MybatisPlusConfig-配置类\"><a href=\"#3-2-4-MybatisPlusConfig-配置类\" class=\"headerlink\" title=\"3.2.4 MybatisPlusConfig 配置类\"></a>3.2.4 MybatisPlusConfig 配置类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@MapperScan(&quot;fan.**.dao&quot;)\npublic class MybatisPlusConfig &#123;\n\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;\n        MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();\n        &#x2F;&#x2F; 添加分页插件\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        &#x2F;&#x2F; 添加全表更新删除插件\n        interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor());\n        return interceptor;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-5-RedisUtil-工具类\"><a href=\"#3-2-5-RedisUtil-工具类\" class=\"headerlink\" title=\"3.2.5 RedisUtil 工具类\"></a>3.2.5 RedisUtil 工具类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class RedisUtil &#123;\n\n    @Resource\n    private RedisTemplate redisTemplate;\n\n    &#x2F;&#x2F; 指定缓存失效时间\n    public boolean expire(String key, long time) &#123;\n        try &#123;\n            if (time &gt; 0) &#123;\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            &#125;\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; hash 存储数据\n    public boolean hashSet(String key, String item, Object value) &#123;\n        try &#123;\n            redisTemplate.opsForHash().put(key, item, value);\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; hash 存储数据带过期时间\n    public boolean hashSet(String key, String item, Object value, long time) &#123;\n        try &#123;\n            redisTemplate.opsForHash().put(key, item, value);\n            if (time &gt; 0) &#123;\n                expire(key, time);\n            &#125;\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; hash 获取数据\n    public Object hashGet(String key, String item) &#123;\n        return redisTemplate.opsForHash().get(key, item);\n    &#125;\n\n    &#x2F;&#x2F; hash 删除值\n    public void hashDel(String key, Object... item) &#123;\n        redisTemplate.opsForHash().delete(key, item);\n    &#125;\n\n    &#x2F;&#x2F; String 存储数据\n    public boolean set(String key, Object value) &#123;\n        try &#123;\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        &#125; catch (Exception e) &#123;\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; String 存储数据带过期时间\n    public boolean set(String key, Object value, long time) &#123;\n        try &#123;\n            if (time &gt; 0) &#123;\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            &#125; else &#123;\n                set(key, value);\n            &#125;\n            return true;\n        &#125; catch (Exception e) &#123;\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; String 获取数据\n    public Object get(String key) &#123;\n        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);\n    &#125;\n\n    &#x2F;&#x2F; 判断key是否存在\n    public boolean hasKey(String key) &#123;\n        try &#123;\n            return redisTemplate.hasKey(key);\n        &#125; catch (Exception e) &#123;\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 删除缓存\n    public void del(String... key) &#123;\n        if (key !&#x3D; null &amp;&amp; key.length &gt; 0) &#123;\n            if (key.length &#x3D;&#x3D; 1) &#123;\n                redisTemplate.delete(key[0]);\n            &#125; else &#123;\n                redisTemplate.delete(CollectionUtils.arrayToList(key));\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-2-6-Result-统一结果处理\"><a href=\"#3-2-6-Result-统一结果处理\" class=\"headerlink\" title=\"3.2.6 Result 统一结果处理\"></a>3.2.6 Result 统一结果处理</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Builder\npublic class Result implements Serializable &#123;\n\n    private static final long serialVersionUID &#x3D; -1L;\n    private Integer code;\n    private String message;\n    private Object data;\n\n    public static Result success(Object data) &#123;\n        return Result.builder().code(200).message(&quot;操作成功&quot;).data(data).build();\n    &#125;\n\n    public static Result success(String message, Object data) &#123;\n        return Result.builder().code(200).message(message).data(data).build();\n    &#125;\n\n    public static Result success(int code, String message, Object data) &#123;\n        return Result.builder().code(code).message(message).data(data).build();\n    &#125;\n\n    public static Result fail(String message) &#123;\n        return Result.builder().code(400).message(message).build();\n    &#125;\n\n    public static Result fail(int code, String message) &#123;\n        return Result.builder().code(code).message(message).build();\n    &#125;\n\n    public static Result fail(int code, String message, Object data) &#123;\n        return Result.builder().code(code).message(message).data(data).build();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-3-用户认证\"><a href=\"#3-3-用户认证\" class=\"headerlink\" title=\"3.3 用户认证\"></a>3.3 用户认证</h2><p><strong>用户认证问题，分为首次登陆和二次认证</strong></p>\n<ul>\n<li>首次登录认证：用户名、密码和验证码完成登录</li>\n<li>二次 token 认证：请求头携带 Jwt 进行身份认证</li>\n</ul>\n<h3 id=\"3-3-1-生成验证码\"><a href=\"#3-3-1-生成验证码\" class=\"headerlink\" title=\"3.3.1 生成验证码\"></a>3.3.1 生成验证码</h3><p><strong>1、在前面导入了 Google 的 Kaptcha 依赖包，可以用这个来生成图片验证码，首先新建一个图片验证码配置类，配置图片验证码的参数</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class KaptchaConfig &#123;\n    @Bean\n    public DefaultKaptcha producer() &#123;\n        Properties properties &#x3D; new Properties();\n        properties.put(&quot;kaptcha.border&quot;, &quot;no&quot;);\n        properties.put(&quot;kaptcha.textproducer.font.color&quot;, &quot;black&quot;);\n        properties.put(&quot;kaptcha.textproducer.char.space&quot;, &quot;4&quot;);\n        properties.put(&quot;kaptcha.image.height&quot;, &quot;40&quot;);\n        properties.put(&quot;kaptcha.image.width&quot;, &quot;120&quot;);\n        properties.put(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;);\n\n        Config config &#x3D; new Config(properties);\n        DefaultKaptcha defaultKaptcha &#x3D; new DefaultKaptcha();\n        defaultKaptcha.setConfig(config);\n\n        return defaultKaptcha;\n    &#125;\n&#125;</code></pre>\n\n<p><strong>2、然后在 Controller 中生成图片验证码并进行映射<br>把验证码存入 Redis，使用一个随机字符串作为 Key，并传给前端，前端再把 Key 和用户输入的验证码传回来，这样就可以通过 Key 获取到保存的验证码和用户的验证码进行比较了是否一致<br>因为是图片验证码的方式，所以进行了 encode，把图片进行了 base64 编码，这样前端就可以显示图片</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\n@RequestMapping(&quot;&#x2F;api&quot;)\npublic class AuthController &#123;\n\n    @Resource\n    private Producer producer;\n\n    @Resource\n    private RedisUtil redisUtil;\n\n    @GetMapping(&quot;&#x2F;api&#x2F;getCaptcha&quot;)\n    public Result getCaptcha() throws IOException &#123;\n\n        String token &#x3D; UUID.randomUUID().toString();\n        String captcha &#x3D; producer.createText(); &#x2F;&#x2F; 生成验证码字符串\n\n        BufferedImage image &#x3D; producer.createImage(captcha);\n        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();\n        ImageIO.write(image, &quot;jpg&quot;, byteArrayOutputStream); &#x2F;&#x2F; 生成图片字节数组\n\n        Base64Encoder base64Encoder &#x3D; new Base64Encoder();\n        &#x2F;&#x2F; 转换为base64，生成图片验证码\n        String captchaImg &#x3D; &quot;data:image&#x2F;jpg;base64,&quot; + base64Encoder.encode(byteArrayOutputStream.toByteArray());\n\n        redisUtil.hashSet(Const.CAPTCHA_KEY, token, captcha, 120); &#x2F;&#x2F; 将验证码存入redis\n\n        return Result.success(MapUtil.builder().put(&quot;token&quot;, token).put(&quot;captchaImg&quot;, captchaImg).build());\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-3-2-登录成功处理器\"><a href=\"#3-3-2-登录成功处理器\" class=\"headerlink\" title=\"3.3.2 登录成功处理器\"></a>3.3.2 登录成功处理器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class LoginSuccessHandler implements AuthenticationSuccessHandler &#123;\n\n    @Resource\n    private JwtUtil jwtUtil;\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123;\n        response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        &#x2F;&#x2F; 生成 jwt，并放到响应头中\n        String jwt &#x3D; jwtUtil.generateJwt(authentication.getName());\n        response.setHeader(jwtUtil.getHeader(), jwt);\n\n        Result success &#x3D; Result.success(&quot;登录成功&quot;);\n        outputStream.write(JSONUtil.toJsonStr(success).getBytes(StandardCharsets.UTF_8));\n\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-3-3-登录失败处理器\"><a href=\"#3-3-3-登录失败处理器\" class=\"headerlink\" title=\"3.3.3 登录失败处理器\"></a>3.3.3 登录失败处理器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class LoginFailureHandler implements AuthenticationFailureHandler &#123;\n\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException &#123;\n        response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        Result fail &#x3D; Result.fail(exception.getMessage().equals(&quot;Bad credentials&quot;) ? &quot;用户名或密码错误&quot; : exception.getMessage());\n        outputStream.write(JSONUtil.toJsonStr(fail).getBytes(StandardCharsets.UTF_8));\n\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-3-4-图片验证码拦截器\"><a href=\"#3-3-4-图片验证码拦截器\" class=\"headerlink\" title=\"3.3.4 图片验证码拦截器\"></a>3.3.4 图片验证码拦截器</h3><p>Spring Security 的所有过滤器都是没有图片验证码的，如果依然想沿用自带的 UsernamePasswordAuthenticationFilter，可以在这个过滤器之前添加一个图片验证码过滤器。或者自定义过滤器继承 UsernamePasswordAuthenticationFilter，然后在原有的认证逻辑上加上验证码验证逻辑。</p>\n<p><strong>这里我们在 UsernamePasswordAuthenticationFilter 之前自定义一个图片过滤器 CaptchaFilter</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class CaptchaFilter extends OncePerRequestFilter &#123;\n\n    @Resource\n    private RedisUtil redisUtil;\n\n    @Resource\n    private LoginFailureHandler loginFailureHandler;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;\n        if (request.getRequestURI().equals(&quot;&#x2F;hrms&#x2F;login&quot;) &amp;&amp; request.getMethod().equals(&quot;POST&quot;)) &#123;\n            try &#123;\n                &#x2F;&#x2F; 校验验证码\n                validate(request);\n                filterChain.doFilter(request, response);\n            &#125; catch (CustomException e) &#123;\n                &#x2F;&#x2F; 交给认证失败处理器处理\n                loginFailureHandler.onAuthenticationFailure(request, response, e);\n            &#125;\n        &#125; else &#123;\n            filterChain.doFilter(request, response);\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 校验验证码\n    private void validate(HttpServletRequest request) &#123;\n        String captcha &#x3D; request.getParameter(&quot;captcha&quot;);\n        String token &#x3D; request.getParameter(&quot;token&quot;);\n\n        if (StringUtils.isBlank(captcha) || StringUtils.isBlank(token)) &#123;\n            throw new CustomException(&quot;验证码不能为空&quot;);\n        &#125;\n\n        if (!captcha.equals(redisUtil.hashGet(Const.CAPTCHA_KEY, token))) &#123;\n            throw new CustomException(&quot;验证码错误&quot;);\n        &#125;\n\n\t\tredisUtil.hashDel(Const.CAPTCHA_KEY, token);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-3-5-SecurityConfig-核心配置类\"><a href=\"#3-3-5-SecurityConfig-核心配置类\" class=\"headerlink\" title=\"3.3.5 SecurityConfig 核心配置类\"></a>3.3.5 SecurityConfig 核心配置类</h3><p><strong>该配置类用于 Security 的核心配置。这里进行跨域和请求路径配置，放开登录登出以及验证码的请求，对其他请求进行拦截。并添加登录成功和失败处理器，将图片验证码过滤器添加到 UsernamePasswordAuthenticationFilter 之前</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    @Resource\n    private LoginFailureHandler loginFailureHandler;\n\n    @Resource\n    private LoginSuccessHandler loginSuccessHandler;\n   \n    @Resource\n    private CaptchaFilter captchaFilter;\n\n    public static final String[] AUTH_WHITELIST &#x3D; &#123;\n            &quot;&#x2F;login&quot;,\n            &quot;&#x2F;logout&quot;,\n            &quot;&#x2F;api&#x2F;**&quot;,\n    &#125;;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F; 开启跨域访问，关闭csrf防护\n        http.csrf().disable().cors();\n        &#x2F;&#x2F; 拦截规则\n        http.authorizeRequests()\n                .antMatchers(AUTH_WHITELIST).permitAll()\n                .anyRequest().authenticated();\n        &#x2F;&#x2F; 登录配置\n        http.formLogin()\n                .successHandler(loginSuccessHandler)\n                .failureHandler(loginFailureHandler);\n        &#x2F;&#x2F; 添加验证码过滤器在登录之前，添加jwt过滤器\n        http.addFilterBefore(captchaFilter, UsernamePasswordAuthenticationFilter.class);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-5-异常处理\"><a href=\"#3-5-异常处理\" class=\"headerlink\" title=\"3.5 异常处理\"></a>3.5 异常处理</h2><h3 id=\"3-5-1-自定义异常类\"><a href=\"#3-5-1-自定义异常类\" class=\"headerlink\" title=\"3.5.1 自定义异常类\"></a>3.5.1 自定义异常类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class CustomException extends AuthenticationException &#123;\n\n    public CustomException(String msg) &#123;\n        super(msg);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-5-2-全局异常类\"><a href=\"#3-5-2-全局异常类\" class=\"headerlink\" title=\"3.5.2 全局异常类\"></a>3.5.2 全局异常类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Slf4j\n@RestControllerAdvice\npublic class GlobalExceptionHandler &#123;\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(value &#x3D; RuntimeException.class)\n    public Result handler(RuntimeException e) &#123;\n        e.printStackTrace();\n        return Result.fail(e.getMessage());\n    &#125;\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(value &#x3D; MethodArgumentNotValidException.class)\n    public Result handler(MethodArgumentNotValidException e) &#123;\n        BindingResult bindingResult &#x3D; e.getBindingResult();\n        ObjectError objectError &#x3D; bindingResult.getAllErrors().stream().findFirst().get();\n        return Result.fail(objectError.getDefaultMessage());\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-5-3-认证失败处理器\"><a href=\"#3-5-3-认证失败处理器\" class=\"headerlink\" title=\"3.5.3 认证失败处理器\"></a>3.5.3 认证失败处理器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class UnAuthenticationEntryPoint implements AuthenticationEntryPoint &#123;\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException &#123;\n        response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); &#x2F;&#x2F; 401，未认证\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        Result fail &#x3D; Result.fail(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage().equals(&quot;JWT异常&quot;) ? authException.getMessage() : &quot;请先登录&quot;);\n        outputStream.write(JSONUtil.toJsonStr(fail).getBytes(StandardCharsets.UTF_8));\n\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-5-4-权限失败处理器\"><a href=\"#3-5-4-权限失败处理器\" class=\"headerlink\" title=\"3.5.4 权限失败处理器\"></a>3.5.4 权限失败处理器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class UnAccessDeniedHandler implements AccessDeniedHandler&#123;\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException &#123;\n        response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);\n        response.setStatus(HttpServletResponse.SC_FORBIDDEN); &#x2F;&#x2F; 403，未授权，禁止访问\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        Result fail &#x3D; Result.fail(HttpServletResponse.SC_FORBIDDEN, &quot;没有权限访问&quot;);\n        outputStream.write(JSONUtil.toJsonStr(fail).getBytes(StandardCharsets.UTF_8));\n\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-6-鉴权\"><a href=\"#3-6-鉴权\" class=\"headerlink\" title=\"3.6 鉴权\"></a>3.6 鉴权</h2><h3 id=\"3-6-1-JWT-工具类\"><a href=\"#3-6-1-JWT-工具类\" class=\"headerlink\" title=\"3.6.1 JWT 工具类\"></a>3.6.1 JWT 工具类</h3><p><strong>JWT 相关知识：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/123531422\">https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;123531422</a></strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Component\npublic class JwtUtil &#123;\n\n    @Value(&quot;$&#123;fan.jwt.expire&#125;&quot;)\n    private String expire;\n    @Value(&quot;$&#123;fan.jwt.header&#125;&quot;)\n    private String header;\n    private final static RSA rsa &#x3D; new RSA();\n\n    &#x2F;&#x2F; 生成 JWT\n    public String generateJwt(String username) &#123;\n\n        RSAPrivateKey rsaPrivateKey &#x3D; (RSAPrivateKey) rsa.getPrivateKey();\n\n        String jwt &#x3D; Jwts.builder()\n                .setHeaderParam(&quot;typ&quot;, &quot;JWT&quot;)\n                .setSubject(username)\n                .setIssuedAt(new Date())\n                .setExpiration(new Date(System.currentTimeMillis() + Long.parseLong(expire))) &#x2F;&#x2F; 设置过期时间\n                .signWith(SignatureAlgorithm.RS256, rsaPrivateKey)\n                .compact();\n        System.out.println(jwt + &quot;  生成的jwt&quot;);\n        return jwt;\n    &#125;\n\n    &#x2F;&#x2F; 解析 JWT\n    public Jws&lt;Claims&gt; parseJwt(String jwt) &#123;\n\n        RSAPublicKey rsaPublicKey &#x3D; (RSAPublicKey) rsa.getPublicKey();\n        try &#123;\n            return Jwts.parser().setSigningKey(rsaPublicKey).parseClaimsJws(jwt);\n        &#125; catch (Exception e) &#123;\n            return null;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-6-2-JWT-过滤器\"><a href=\"#3-6-2-JWT-过滤器\" class=\"headerlink\" title=\"3.6.2 JWT 过滤器\"></a>3.6.2 JWT 过滤器</h3><p>过滤器会去获取请求头中的 JWT，对 JWT 进行解析取出其中的 username。使用 username 去 Redis 中获取对应的权限列表。然后封装 Authentication 对象存入 SecurityContextHolder</p>\n<p>在 Spring Security 中，会使用默认的 FilterSecurityInterceptor 来进行权限校验。在 FilterSecurityInterceptor 中会从 SecurityContextHolder 获取其中的 Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。在项目中只需要把当前登录用户的权限信息也存入 Authentication。然后设置资源所需要的权限即可</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class JwtAuthenticationFilter extends BasicAuthenticationFilter &#123;\n    @Resource\n    private JwtUtil jwtUtil;\n\n    @Resource\n    private EmployeeService employeeService;\n\n    @Resource\n    private RedisUtil redisUtil;\n\n    @Resource\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Resource\n    private UnAuthenticationEntryPoint unAuthenticationEntryPoint;\n\n    public JwtAuthenticationFilter(AuthenticationManager authenticationManager) &#123;\n        super(authenticationManager);\n    &#125;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n        String jwt &#x3D; request.getHeader(jwtUtil.getHeader());\n        if (StringUtils.isBlank(jwt)) &#123;\n            chain.doFilter(request, response);\n            return;\n        &#125;\n\n        Jws&lt;Claims&gt; claimsJws &#x3D; jwtUtil.parseJwt(jwt);\n        if (claimsJws &#x3D;&#x3D; null) &#123;\n            CustomException customException &#x3D; new CustomException(&quot;JWT异常&quot;);\n            unAuthenticationEntryPoint.commence(request, response, customException);\n            throw customException;\n        &#125;\n        String username &#x3D; claimsJws.getBody().getSubject();\n        EmployeeDTO employeeDTO &#x3D; employeeService.getEmpByCode(username);\n\n        List&lt;GrantedAuthority&gt; authorities;\n        if (redisUtil.hasKey(&quot;GrantedAuthority:&quot; + employeeDTO.getEmpName())) &#123;\n            authorities &#x3D; AuthorityUtils.commaSeparatedStringToAuthorityList((String) redisUtil.get(&quot;GrantedAuthority:&quot; + employeeDTO.getEmpName()));\n        &#125; else &#123;\n            authorities &#x3D; userDetailsService.getAuthorities(employeeDTO);\n        &#125;\n        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken &#x3D;\n                new UsernamePasswordAuthenticationToken(username, claimsJws, authorities);\n\n        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);\n        chain.doFilter(request, response);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-6-3-UserDetailsServiceImpl-实现类\"><a href=\"#3-6-3-UserDetailsServiceImpl-实现类\" class=\"headerlink\" title=\"3.6.3 UserDetailsServiceImpl 实现类\"></a>3.6.3 UserDetailsServiceImpl 实现类</h3><p>实现 UserDetailsService 接口，根据用户名从数据库查出用户信息和用户权限信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class UserDetailsServiceImpl implements UserDetailsService &#123;\n\n    @Resource\n    private EmployeeService employeeService;\n\n    @Resource\n    private RedisUtil redisUtil;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;\n        EmployeeDTO employeeDTO &#x3D; employeeService.getEmpByCode(username);\n        if (employeeDTO &#x3D;&#x3D; null) &#123;\n            throw new CustomException(&quot;用户名不存在&quot;);\n        &#125;\n\n        List&lt;GrantedAuthority&gt; authorities;\n        if (redisUtil.hasKey(&quot;GrantedAuthority:&quot; + employeeDTO.getEmpName())) &#123;\n            authorities &#x3D; AuthorityUtils.commaSeparatedStringToAuthorityList((String) redisUtil.get(&quot;GrantedAuthority:&quot; + employeeDTO.getEmpName()));\n        &#125; else &#123;\n            System.out.println(&quot;UserDetailsServiceImpl从数据库中获取权限&quot;);\n            authorities &#x3D; getAuthorities(employeeDTO);\n        &#125;\n        return new SecurityUser(employeeDTO, authorities);\n    &#125;\n\n    public List&lt;GrantedAuthority&gt; getAuthorities(EmployeeDTO employeeDTO) &#123;\n\n        String authority &#x3D; employeeService.getAuthority(employeeDTO.getEmpId());\n        redisUtil.set(&quot;GrantedAuthority:&quot; + employeeDTO.getEmpName(), authority);\n\n        List&lt;GrantedAuthority&gt; authorities &#x3D; AuthorityUtils.commaSeparatedStringToAuthorityList(authority);\n        return authorities;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-6-4-UserDetails-实现类\"><a href=\"#3-6-4-UserDetails-实现类\" class=\"headerlink\" title=\"3.6.4 UserDetails 实现类\"></a>3.6.4 UserDetails 实现类</h3><p>保存用户信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class SecurityUser implements UserDetails &#123;\n\n    private transient EmployeeDTO employeeDTO;\n    private Collection&lt;? extends GrantedAuthority&gt; authorities;\n\n    public SecurityUser(EmployeeDTO employeeDTO, List&lt;GrantedAuthority&gt; authorities) &#123;\n        this.employeeDTO &#x3D; employeeDTO;\n        this.authorities &#x3D; authorities;\n    &#125;\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;\n        return authorities;\n    &#125;\n\n    @Override\n    public String getPassword() &#123;\n        return employeeDTO.getPassword();\n    &#125;\n\n    @Override\n    public String getUsername() &#123;\n        return employeeDTO.getEmpCode();\n    &#125;\n\n    @Override\n    public boolean isAccountNonExpired() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isAccountNonLocked() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isCredentialsNonExpired() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isEnabled() &#123;\n        return true;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-6-5-CustomLogoutSuccessHandler-注销成功处理器\"><a href=\"#3-6-5-CustomLogoutSuccessHandler-注销成功处理器\" class=\"headerlink\" title=\"3.6.5 CustomLogoutSuccessHandler 注销成功处理器\"></a>3.6.5 CustomLogoutSuccessHandler 注销成功处理器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class CustomLogoutSuccessHandler implements LogoutSuccessHandler &#123;\n\n    @Resource\n    private JwtUtil jwtUtil;\n\n    @Override\n    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123;\n        System.out.println(&quot;退出成功过滤器&quot;);\n\n        &#x2F;&#x2F; 手动退出\n        if (authentication !&#x3D; null) &#123;\n            new SecurityContextLogoutHandler().logout(request, response, authentication);\n        &#125;\n\n        response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        response.setHeader(jwtUtil.getHeader(), &quot;&quot;);\n        Result success &#x3D; Result.success(&quot;登出成功&quot;);\n        outputStream.write(JSONUtil.toJsonStr(success).getBytes(StandardCharsets.UTF_8));\n\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-6-6-SecurityConfig-核心配置类完整配置\"><a href=\"#3-6-6-SecurityConfig-核心配置类完整配置\" class=\"headerlink\" title=\"3.6.6 SecurityConfig 核心配置类完整配置\"></a>3.6.6 SecurityConfig 核心配置类完整配置</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    @Resource\n    private LoginFailureHandler loginFailureHandler;\n\n    @Resource\n    private LoginSuccessHandler loginSuccessHandler;\n\n    @Resource\n    private CaptchaFilter captchaFilter;\n\n    @Resource\n    private UnAccessDeniedHandler unAccessDeniedHandler;\n\n    @Resource\n    private UnAuthenticationEntryPoint unAuthenticationEntryPoint;\n\n    @Resource\n    private UserDetailsServiceImpl userDetailsServiceImpl;\n\n    @Resource\n    private CustomLogoutSuccessHandler customLogoutSuccessHandler;\n\n    @Bean\n    JwtAuthenticationFilter jwtAuthenticationFilter() throws Exception &#123;\n        return new JwtAuthenticationFilter(authenticationManager());\n    &#125;\n\n    public static final String[] AUTH_WHITELIST &#x3D; &#123;\n            &quot;&#x2F;login&quot;,\n            &quot;&#x2F;logout&quot;,\n            &quot;&#x2F;api&#x2F;**&quot;,\n    &#125;;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n        auth.userDetailsService(userDetailsServiceImpl).passwordEncoder(passwordEncoder());\n    &#125;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F; 开启跨域访问，关闭csrf防护\n        http.csrf().disable().cors();\n        &#x2F;&#x2F; 拦截规则\n        http.authorizeRequests()\n                .antMatchers(AUTH_WHITELIST).permitAll()\n                .anyRequest().authenticated();\n        &#x2F;&#x2F; 登录配置\n        http.formLogin()\n                .successHandler(loginSuccessHandler)\n                .failureHandler(loginFailureHandler);\n        &#x2F;&#x2F; 添加验证码过滤器在登录之前，添加jwt过滤器\n        http.addFilterBefore(captchaFilter, UsernamePasswordAuthenticationFilter.class)\n                .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n        &#x2F;&#x2F; 添加自定义异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(unAuthenticationEntryPoint)\n                .accessDeniedHandler(unAccessDeniedHandler);\n        &#x2F;&#x2F; 添加自定义注销处理器\n        http.logout().logoutSuccessHandler(customLogoutSuccessHandler);\n    &#125;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() &#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-7-权限管理\"><a href=\"#3-7-权限管理\" class=\"headerlink\" title=\"3.7 权限管理\"></a>3.7 权限管理</h2><p><strong>代码零散有点乱。仅供参考</strong></p>\n<h3 id=\"3-7-1-菜单管理\"><a href=\"#3-7-1-菜单管理\" class=\"headerlink\" title=\"3.7.1 菜单管理\"></a>3.7.1 菜单管理</h3><p><strong>1. Controller</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\n@RequestMapping(&quot;&#x2F;sys&#x2F;menu&quot;)\npublic class SysMenuController &#123;\n\n    @Resource\n    private EmployeeService employeeService;\n\n    @Resource\n    private SysMenuService sysMenuService;\n\n    @Resource\n    private SysRoleMenuService sysRoleMenuService;\n\n    @GetMapping(&quot;&#x2F;getNavMenu&quot;)\n    public Result getNavMenu(Principal principal) &#123;\n        &#x2F;&#x2F; 获取权限信息\n        EmployeeDTO employeeDTO &#x3D; employeeService.getEmpByCode(principal.getName());\n        String authority &#x3D; employeeService.getAuthority(employeeDTO.getEmpId());\n        String[] permissionList &#x3D; StringUtils.tokenizeToStringArray(authority, &quot;,&quot;);\n\n        &#x2F;&#x2F; 获取导航栏菜单\n        List&lt;SysMenuDTO&gt; menuList &#x3D; sysMenuService.getNavMenu(employeeService.getEmpByCode(principal.getName()));\n        return Result.success(&quot;获取导航栏菜单成功&quot;, MapUtil.builder().put(&quot;menuList&quot;, menuList).put(&quot;permissionList&quot;, permissionList).build());\n    &#125;\n\n    @GetMapping(&quot;&#x2F;getMenuList&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:menu:list&#39;)&quot;)\n    public Result getMenuList(String valiFlag) &#123;\n        return Result.success(&quot;获取菜单列表成功&quot;, sysMenuService.getMenuList(valiFlag));\n    &#125;\n\n    @PostMapping(&quot;&#x2F;addMenu&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:menu:add&#39;)&quot;)\n    public Result addMenu(@Validated @RequestBody SysMenuDO sysMenuDO) &#123;\n        if (org.apache.commons.lang3.StringUtils.isBlank(sysMenuDO.getParentId())) &#123;\n            sysMenuDO.setParentId(&quot;0&quot;);\n        &#125;\n        sysMenuDO.setMenuId(UUID.randomUUID().toString());\n        sysMenuDO.setCreateTime(LocalDateTime.now());\n        sysMenuDO.setUpdateTime(LocalDateTime.now());\n        return Result.success(&quot;添加菜单成功&quot;, sysMenuService.save(sysMenuDO));\n    &#125;\n\n    @PutMapping(&quot;&#x2F;updateMenu&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:menu:update&#39;)&quot;)\n    public Result updateMenu(@Validated @RequestBody SysMenuDO sysMenuDO) &#123;\n\n        sysMenuDO.setUpdateTime(LocalDateTime.now());\n        sysMenuService.updateById(sysMenuDO);\n        &#x2F;&#x2F; 清除所有与菜单相关的缓存\n        employeeService.clearUserAuthorityByMenuId(sysMenuDO.getMenuId());\n        return Result.success(&quot;更新菜单成功&quot;);\n    &#125;\n\n    @DeleteMapping(&quot;&#x2F;deleteMenu&#x2F;&#123;menuId&#125;&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:menu:delete&#39;)&quot;)\n    public Result deleteMenu(@PathVariable(&quot;menuId&quot;) String menuId) &#123;\n        long parent_id &#x3D; sysMenuService.count(new QueryWrapper&lt;SysMenuDO&gt;().eq(&quot;parent_id&quot;, menuId));\n        if (parent_id &gt; 0) &#123;\n            return Result.fail(&quot;该菜单下存在子菜单，不能删除&quot;);\n        &#125;\n\n        sysMenuService.removeById(menuId);\n        &#x2F;&#x2F; 清除所有与菜单相关的缓存\n        employeeService.clearUserAuthorityByMenuId(menuId);\n\n        &#x2F;&#x2F; 同步删除中间关联表\n        sysRoleMenuService.remove(new QueryWrapper&lt;SysRoleMenuDO&gt;().eq(&quot;menu_id&quot;, menuId));\n        return Result.success(&quot;删除菜单成功&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>2. ServiceImpl 实现类。接口实现 IService 接口</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class SysMenuServiceImpl extends ServiceImpl&lt;SysMenuDAO, SysMenuDO&gt; implements SysMenuService &#123;\n\n    @Resource\n    private SysMenuDAO sysMenuDAO;\n\n    @Resource\n    private SysMenuDTOConvert sysMenuDTOConvert;\n\n\t&#x2F;&#x2F; 根据员工id获取导航菜单列表id\n    @Override\n    public List&lt;String&gt; getNavMenuIds(String empId) &#123;\n        return sysMenuDAO.getNavMenuIds(empId);\n    &#125;\n\n\t&#x2F;&#x2F; 获取用户导航菜单列表\n    @Override\n    public List&lt;SysMenuDTO&gt; getNavMenu(EmployeeDTO employeeDTO) &#123;\n        List&lt;String&gt; navMenuIds &#x3D; getNavMenuIds(employeeDTO.getEmpId());\n        List&lt;SysMenuDO&gt; sysMenuDOS &#x3D; this.listByIds(navMenuIds);\n\n        &#x2F;&#x2F; 转树状结构\n        List&lt;SysMenuDO&gt; sysMenuDOSTree &#x3D; navBuildTree(sysMenuDOS);\n        &#x2F;&#x2F; 转DTO\n        List&lt;SysMenuDTO&gt; sysMenuDTOS &#x3D; convert(sysMenuDOSTree);\n        return sysMenuDTOS;\n    &#125;\n\n\t&#x2F;&#x2F; 获取所有菜单列表\n    @Override\n    public List&lt;SysMenuDO&gt; getMenuList(String valiFlag) &#123;\n\n        List&lt;SysMenuDO&gt; sysMenuDOS &#x3D; this.list(new QueryWrapper&lt;SysMenuDO&gt;().eq(StringUtils.isNotBlank(valiFlag),&quot;vali_flag&quot;, valiFlag)\n                .orderByAsc(&quot;order_num&quot;));\n\n        return buildTree(sysMenuDOS);\n    &#125;\n\n\t&#x2F;&#x2F; 将菜单列表转为树状结构\n    private List&lt;SysMenuDO&gt; buildTree(List&lt;SysMenuDO&gt; sysMenuDOS)&#123;\n        List&lt;SysMenuDO&gt; finalMenu &#x3D; new ArrayList&lt;&gt;();\n\n        for (SysMenuDO sysMenuDO : sysMenuDOS) &#123;\n\n            for (SysMenuDO menuDO : sysMenuDOS) &#123;\n                if (sysMenuDO.getMenuId().equals(menuDO.getParentId())) &#123;\n                    sysMenuDO.getChildren().add(menuDO);\n                &#125;\n            &#125;\n\n            if (sysMenuDO.getParentId().equals(&quot;0&quot;))&#123;\n                finalMenu.add(sysMenuDO);\n            &#125;\n        &#125;\n        return finalMenu;\n    &#125;\n\n    private List&lt;SysMenuDO&gt; navBuildTree(List&lt;SysMenuDO&gt; sysMenuDOS)&#123;\n        List&lt;SysMenuDO&gt; finalMenu &#x3D; new ArrayList&lt;&gt;();\n\n        for (SysMenuDO sysMenuDO : sysMenuDOS) &#123;\n\n            for (SysMenuDO menuDO : sysMenuDOS) &#123;\n                if (sysMenuDO.getMenuId().equals(menuDO.getParentId()) &amp;&amp; menuDO.getType() &#x3D;&#x3D; 1) &#123;\n                    sysMenuDO.getChildren().add(menuDO);\n                &#125;\n            &#125;\n\n            if (sysMenuDO.getParentId().equals(&quot;0&quot;))&#123;\n                finalMenu.add(sysMenuDO);\n            &#125;\n        &#125;\n        return finalMenu;\n    &#125;\n\n\t&#x2F;&#x2F; 将树状菜单结构转为DTO\n    private List&lt;SysMenuDTO&gt; convert(List&lt;SysMenuDO&gt; sysMenuDOSTree) &#123;\n        List&lt;SysMenuDTO&gt; sysMenuDTOS &#x3D; new ArrayList&lt;&gt;();\n\n        sysMenuDOSTree.forEach(sysMenuDO -&gt; &#123;\n            SysMenuDTO sysMenuDTO &#x3D; sysMenuDTOConvert.convertToSysMenuDTO(sysMenuDO);\n\n            if (sysMenuDO.getChildren().size() &gt; 0)&#123;\n                sysMenuDTO.setChildren(convert(sysMenuDO.getChildren()));\n            &#125;\n\n            sysMenuDTOS.add(sysMenuDTO);\n        &#125;);\n\n        return sysMenuDTOS;\n    &#125;\n&#125;</code></pre>\n\n<p><strong>3. Mapper</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;mapper namespace&#x3D;&quot;fan.security.dao.SysMenuDAO&quot;&gt;\n\n    &lt;select id&#x3D;&quot;getNavMenuIds&quot; resultType&#x3D;&quot;java.lang.String&quot;&gt;\n        SELECT DISTINCT sys_role_menu.menu_id\n        FROM sys_employee_role\n                 LEFT JOIN sys_role_menu ON sys_employee_role.role_id &#x3D; sys_role_menu.role_id\n        WHERE sys_employee_role.emp_id &#x3D; #&#123;empId&#125;\n    &lt;&#x2F;select&gt;\n\n&lt;&#x2F;mapper&gt;</code></pre>\n\n<h3 id=\"3-7-2-角色管理\"><a href=\"#3-7-2-角色管理\" class=\"headerlink\" title=\"3.7.2 角色管理\"></a>3.7.2 角色管理</h3><p><strong>1. Controller</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\n@RequestMapping(&quot;&#x2F;sys&#x2F;role&quot;)\npublic class SysRoleController extends BaseController &#123;\n\n    @Resource\n    private SysRoleService sysRoleService;\n\n    @Resource\n    private EmployeeService employeeService;\n\n    @Resource\n    private SysRoleMenuService sysRoleMenuService;\n\n    @Resource\n    private SysEmployeeRoleService sysEmployeeRoleService;\n\n    @GetMapping(&quot;&#x2F;getRoleList&quot;)\n    @PreAuthorize(&quot;hasAnyAuthority(&#39;sys:role:list&#39;)&quot;)\n    public Result getRoleList(String roleName, String valiFlag) &#123;\n\n        Page&lt;SysRoleDO&gt; sysRoleDOPage &#x3D; sysRoleService.page(getPage(), new QueryWrapper&lt;SysRoleDO&gt;()\n                .eq(StringUtils.isNotBlank(valiFlag), &quot;vali_flag&quot;, valiFlag)\n                .like(StringUtils.isNotBlank(roleName), &quot;role_name&quot;, roleName));\n\n        sysRoleDOPage.getRecords().forEach(sysRoleDO -&gt; &#123;\n            List&lt;SysRoleMenuDO&gt; sysRoleMenuDOS &#x3D; sysRoleMenuService.list(new QueryWrapper&lt;SysRoleMenuDO&gt;().eq(&quot;role_id&quot;, sysRoleDO.getRoleId()));\n            List&lt;String&gt; menuIds &#x3D; sysRoleMenuDOS.stream().map(p -&gt; p.getMenuId()).collect(Collectors.toList());\n            sysRoleDO.setMenuIds(menuIds);\n        &#125;);\n        return Result.success(sysRoleDOPage);\n    &#125;\n\n    @PostMapping(&quot;&#x2F;addRole&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:role:add&#39;)&quot;)\n    public Result addRole(@Validated @RequestBody SysRoleDO sysRoleDO) &#123;\n        sysRoleDO.setCreateTime(LocalDateTime.now());\n        sysRoleDO.setUpdateTime(LocalDateTime.now());\n        sysRoleDO.setValiFlag(Const.STATUS_ON);\n        return Result.success(&quot;添加角色成功&quot;, sysRoleService.save(sysRoleDO));\n    &#125;\n\n    @PutMapping(&quot;&#x2F;updateRole&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:role:update&#39;)&quot;)\n    public Result updateRole(@Validated @RequestBody SysRoleDO sysRoleDO) &#123;\n        sysRoleDO.setUpdateTime(LocalDateTime.now());\n        sysRoleService.updateById(sysRoleDO);\n        employeeService.clearUserAuthorityByRoleId(sysRoleDO.getRoleId());\n        return Result.success(&quot;修改角色成功&quot;);\n    &#125;\n\n    @DeleteMapping(&quot;&#x2F;deleteRole&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:role:delete&#39;)&quot;)\n    @Transactional\n    public Result deleteRole(@RequestBody RoleConditionDTO roleConditionDTO) &#123;\n\n        sysRoleService.removeByIds(roleConditionDTO.getRoleIds());\n\n        &#x2F;&#x2F; 删除中间表\n        sysEmployeeRoleService.remove(new QueryWrapper&lt;SysEmployeeRoleDO&gt;().in(&quot;role_id&quot;, roleConditionDTO.getRoleIds()));\n        sysRoleMenuService.remove(new QueryWrapper&lt;SysRoleMenuDO&gt;().in(&quot;role_id&quot;, roleConditionDTO.getRoleIds()));\n\n        &#x2F;&#x2F; 清除缓存\n        roleConditionDTO.getRoleIds().forEach(roleId -&gt; employeeService.clearUserAuthorityByRoleId(roleId));\n\n        return Result.success(&quot;删除角色成功&quot;);\n    &#125;\n\n    @PostMapping(&quot;&#x2F;assignPermissions&#x2F;&#123;roleId&#125;&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;sys:role:permission&#39;)&quot;)\n    @Transactional\n    public Result assignPermissions(@PathVariable(&quot;roleId&quot;) String roleId, @RequestBody String[] menuIds) &#123;\n        ArrayList&lt;SysRoleMenuDO&gt; sysRoleMenuDOS &#x3D; new ArrayList&lt;&gt;();\n\n        Arrays.stream(menuIds).forEach(menuId -&gt; &#123;\n            SysRoleMenuDO sysRoleMenuDO &#x3D; new SysRoleMenuDO();\n            sysRoleMenuDO.setRoleId(roleId);\n            sysRoleMenuDO.setMenuId(menuId);\n\n            sysRoleMenuDOS.add(sysRoleMenuDO);\n        &#125;);\n\n        &#x2F;&#x2F; 先删除原来的记录，再添加新的记录\n        sysRoleMenuService.remove(new QueryWrapper&lt;SysRoleMenuDO&gt;().eq(&quot;role_id&quot;, roleId));\n        sysRoleMenuService.saveBatch(sysRoleMenuDOS);\n\n        &#x2F;&#x2F; 清除缓存\n        employeeService.clearUserAuthorityByRoleId(roleId);\n        return Result.success(&quot;分配权限成功&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>2. ServiceImpl 实现类。接口实现 IService 接口</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class SysRoleServiceImpl extends ServiceImpl&lt;SysRoleDAO, SysRoleDO&gt; implements SysRoleService &#123;\n\n    @Resource\n    private SysRoleDAO sysRoleDAO;\n\n    @Override\n    public List&lt;String&gt; getRoleIdsByEmpId(String empId) &#123;\n        List&lt;String&gt; roleIds &#x3D; sysRoleDAO.getRoleIds(empId);\n\n        return roleIds;\n    &#125;\n\n    @Override\n    public List&lt;SysRoleDO&gt; getRoleListByRoleIds(List&lt;String&gt; roleIds) &#123;\n        return roleIds.isEmpty() ? null : sysRoleDAO.selectBatchIds(roleIds);\n    &#125;\n  \n&#125;</code></pre>\n\n<p><strong>3. Mapper</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;mapper namespace&#x3D;&quot;fan.security.dao.SysRoleDAO&quot;&gt;\n\n    &lt;select id&#x3D;&quot;getRoleIds&quot; resultType&#x3D;&quot;java.lang.String&quot;&gt;\n        SELECT role_id\n        FROM sys_employee_role\n        WHERE emp_id &#x3D; #&#123;empId&#125;\n    &lt;&#x2F;select&gt;\n  \n&lt;&#x2F;mapper&gt;</code></pre>\n\n<h3 id=\"3-7-3-用户管理\"><a href=\"#3-7-3-用户管理\" class=\"headerlink\" title=\"3.7.3 用户管理\"></a>3.7.3 用户管理</h3><p><strong>1. Controller</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\n@RequestMapping(&quot;&#x2F;employee&quot;)\npublic class EmployeeController &#123;\n\n    @Resource\n    private EmployeeService employeeService;\n\n    @Resource\n    private PasswordEncoder passwordEncoder;\n\n    @Resource\n    private SysRoleService sysRoleService;\n\n    @Resource\n    private SysEmployeeRoleService sysEmployeeRoleService;\n\n    @GetMapping(&quot;&#x2F;getEmployeeList&quot;)\n    @ApiOperation(value &#x3D; &quot;查询员工信息&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;employee:list&#39;)&quot;)\n    public Result getEmployeeList(EmployeeConditionDTO conditionDTO)&#123;\n        Page&lt;EmployeeDTO&gt; employeeDTOS &#x3D; employeeService.getEmployeeList(conditionDTO);\n\n        employeeDTOS.getRecords().forEach(employeeDTO -&gt; &#123;\n            List&lt;String&gt; roleIds &#x3D; sysRoleService.getRoleIdsByEmpId(employeeDTO.getEmpId());\n            employeeDTO.setRoleIds(roleIds);\n            employeeDTO.setSysRoleDOS(sysRoleService.getRoleListByRoleIds(roleIds));\n        &#125;);\n        return Result.success(&quot;查询员工信息成功&quot;, employeeDTOS);\n    &#125;\n\n    @PutMapping(&quot;&#x2F;updateEmployee&quot;)\n    @ApiOperation(value &#x3D; &quot;修改员工信息&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;employee:update&#39;)&quot;)\n    public Result updateEmployee(@RequestBody EmployeeDTO employeeDTO)&#123;\n        return Result.success(&quot;修改员工成功&quot;, employeeService.updateEmployee(employeeDTO));\n    &#125;\n\n    @PostMapping(&quot;&#x2F;assignRoles&#x2F;&#123;empId&#125;&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;employee:role&#39;)&quot;)\n    public  Result assignRoles(@PathVariable(&quot;empId&quot;) String empId, @RequestBody String[] roleIds) &#123;\n        ArrayList&lt;SysEmployeeRoleDO&gt; sysEmployeeRoleDOS &#x3D; new ArrayList&lt;&gt;();\n\n        Arrays.stream(roleIds).forEach(roleId -&gt; &#123;\n            SysEmployeeRoleDO sysEmployeeRoleDO &#x3D; new SysEmployeeRoleDO();\n            sysEmployeeRoleDO.setEmpId(empId);\n            sysEmployeeRoleDO.setRoleId(roleId);\n\n            sysEmployeeRoleDOS.add(sysEmployeeRoleDO);\n        &#125;);\n\n        sysEmployeeRoleService.remove(new QueryWrapper&lt;SysEmployeeRoleDO&gt;().eq(&quot;emp_id&quot;, empId));\n        sysEmployeeRoleService.saveBatch(sysEmployeeRoleDOS);\n        &#x2F;&#x2F; 清除缓存\n        EmployeeDO employeeDO &#x3D; employeeService.getEmpById(empId);\n        employeeService.clearUserAuthority(employeeDO.getEmpName());\n\n        return Result.success(&quot;分配角色成功&quot;);\n    &#125;\n\n    @PostMapping(&quot;&#x2F;resetPassword&quot;)\n    @PreAuthorize(&quot;hasAuthority(&#39;employee:resetPassword&#39;)&quot;)\n    public Result resetPassword(@RequestBody String empId) &#123;\n        EmployeeDO employeeDO &#x3D; employeeService.getEmpById(empId);\n        employeeDO.setPassword(passwordEncoder.encode(\n                employeeDO.getIdcardNo().substring(employeeDO.getIdcardNo().length() - 6)));\n\n        return Result.success(&quot;重置密码成功&quot;, employeeService.resetPassword(employeeDO));\n    &#125;\n\n    @GetMapping(&quot;&#x2F;getEmpByName&quot;)\n    public Result getEmpByName(String empName) &#123;\n\n        return Result.success(&quot;通过用户名查询员工成功&quot;, employeeService.getEmpByName(empName));\n    &#125;\n&#125;</code></pre>\n\n<p><strong>2. ServiceImpl 实现类。接口实现 IService 接口</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class EmployeeServiceImpl implements EmployeeService &#123;\n\n    @Resource\n    private EmployeeDAO employeeDAO;\n\n    @Resource\n    private EmployeeDTOConvert employeeDTOConvert;\n\n    @Resource\n    private SysMenuService sysMenuService;\n\n    @Resource\n    private RedisUtil redisUtil;\n\n    @Override\n    public Page&lt;EmployeeDTO&gt; getEmployeeList(EmployeeConditionDTO conditionDTO) &#123;\n\n        QueryWrapper&lt;EmployeeDO&gt; employeeDOQueryWrapper &#x3D; new QueryWrapper&lt;&gt;();\n\n        if (!StringUtils.isBlank(conditionDTO.getEmpName())) &#123;\n            employeeDOQueryWrapper.like(&quot;emp_name&quot;, conditionDTO.getEmpName());\n        &#125;\n        if (!StringUtils.isBlank(conditionDTO.getEmpCode())) &#123;\n            employeeDOQueryWrapper.eq(&quot;emp_code&quot;, conditionDTO.getEmpCode());\n        &#125;\n        if (conditionDTO.getValiFlag() !&#x3D; null) &#123;\n            employeeDOQueryWrapper.eq(&quot;vali_flag&quot;, conditionDTO.getValiFlag());\n        &#125;\n\n        Page&lt;EmployeeDO&gt; page &#x3D; new Page&lt;&gt;(conditionDTO.getPageNum(), conditionDTO.getPageSize());\n        Page&lt;EmployeeDO&gt; employeeDOPage &#x3D; employeeDAO.selectPage(page, employeeDOQueryWrapper);\n\n        Page&lt;EmployeeDTO&gt; employeeDTOPage &#x3D; new Page&lt;&gt;();\n        List&lt;EmployeeDTO&gt; employeeDTOS &#x3D; new ArrayList&lt;&gt;();\n        if (!ObjectUtils.isEmpty(employeeDOPage.getRecords())) &#123;\n            employeeDOPage.getRecords().stream().forEach(employeeDO -&gt; employeeDTOS.add(employeeDTOConvert.convertToEmployeeDTO(employeeDO)));\n        &#125;\n\n        BeanUtils.copyProperties(employeeDOPage, employeeDTOPage);\n        employeeDTOPage.setRecords(employeeDTOS);\n        return employeeDTOPage;\n    &#125;\n\n    @Override\n    public Integer updateEmployee(EmployeeDTO employeeDTO) &#123;\n        EmployeeDO employeeDO &#x3D; employeeDTOConvert.convertToEmployeeDO(employeeDTO);\n        employeeDO.setUpdateTime(LocalDateTime.now());\n\n        return employeeDAO.updateById(employeeDO);\n    &#125;\n\n    @Override\n    public Integer resetPassword(EmployeeDO employeeDO) &#123;\n        employeeDO.setUpdateTime(LocalDateTime.now());\n\n        return employeeDAO.updateById(employeeDO);\n    &#125;\n\n    @Override\n    public EmployeeDO getEmpByName(String empName) &#123;\n        return employeeDAO.selectOne(new QueryWrapper&lt;EmployeeDO&gt;().eq(&quot;emp_name&quot;, empName));\n    &#125;\n\n    @Override\n    public EmployeeDO getEmpById(String empId) &#123;\n        return employeeDAO.selectById(empId);\n    &#125;\n\n    @Override\n    public EmployeeDTO getEmpByCode(String username) &#123;\n        QueryWrapper&lt;EmployeeDO&gt; queryWrapper &#x3D; new QueryWrapper&lt;EmployeeDO&gt;().eq(&quot;emp_code&quot;, username);\n        EmployeeDO employeeDO &#x3D; employeeDAO.selectOne(queryWrapper);\n        if (employeeDO &#x3D;&#x3D; null) &#123;\n            return null;\n        &#125; else &#123;\n            EmployeeDTO employeeDTO &#x3D; employeeDTOConvert.convertToEmployeeDTO(employeeDO);\n            return employeeDTO;\n        &#125;\n    &#125;\n\n    @Override\n    public String getAuthority(String empId) &#123;\n\n        String authority &#x3D; &quot;&quot;;\n\n        &#x2F;&#x2F; 获取角色列表\n        List&lt;SysRoleDO&gt; sysRoleDOS &#x3D; employeeDAO.getAuthority(empId);\n        if (sysRoleDOS.size() &gt; 0) &#123;\n            String roleCodes &#x3D; sysRoleDOS.stream().map(sysRoleDO -&gt; &quot;ROLE_&quot; + sysRoleDO.getCode()).collect(Collectors.joining(&quot;,&quot;));\n            authority &#x3D; roleCodes.concat(&quot;,&quot;);\n        &#125;\n\n        &#x2F;&#x2F; 获取菜单权限列表\n        List&lt;String&gt; navMenuIds &#x3D; sysMenuService.getNavMenuIds(empId);\n        if (navMenuIds.size() &gt; 0) &#123;\n            List&lt;SysMenuDO&gt; sysMenuDOS &#x3D; sysMenuService.list(new QueryWrapper&lt;SysMenuDO&gt;().eq(&quot;vali_flag&quot;, 1).in(&quot;menu_id&quot;, navMenuIds));\n            String permissions &#x3D; sysMenuDOS.stream().map(sysMenuDO -&gt; sysMenuDO.getPermission()).collect(Collectors.joining(&quot;,&quot;));\n            authority &#x3D; authority.concat(permissions);\n        &#125;\n        return authority;\n    &#125;\n\n    @Override\n    public void clearUserAuthority(String username) &#123;\n        redisUtil.del(&quot;GrantedAuthority:&quot; + username);\n    &#125;\n\n    @Override\n    public void clearUserAuthorityByRoleId(String roleId) &#123;\n        List&lt;String&gt; empIds &#x3D; employeeDAO.getEmpIdsByRoleId(roleId);\n        if (empIds.size() &gt; 0) &#123;\n            employeeDAO.selectBatchIds(empIds).forEach(employeeDO -&gt; &#123;\n                System.out.println(&quot;根据角色Id清除用户权限缓存，姓名为：&quot; + employeeDO.getEmpName());\n                clearUserAuthority(employeeDO.getEmpName());\n            &#125;);\n        &#125;\n    &#125;\n\n    @Override\n    public void clearUserAuthorityByMenuId(String menuId) &#123;\n        employeeDAO.getEmpsByMenuId(menuId).forEach(employeeDO -&gt; &#123;\n            if (employeeDO !&#x3D; null) &#123;\n                System.out.println(&quot;根据菜单Id清除用户权限缓存，姓名为：&quot; + employeeDO.getEmpName());\n                clearUserAuthority(employeeDO.getEmpName());\n            &#125;\n        &#125;);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>3. Mapper</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;mapper namespace&#x3D;&quot;fan.employee.dao.EmployeeDAO&quot;&gt;\n    &lt;update id&#x3D;&quot;deleteEmployee&quot;&gt;\n        UPDATE employee\n        SET vali_flag &#x3D; &#39;0&#39;\n        WHERE emp_id in\n        &lt;foreach item&#x3D;&quot;item&quot; collection&#x3D;&quot;list&quot; index&#x3D;&quot;index&quot; open&#x3D;&quot;(&quot; separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;\n            #&#123;item&#125;\n        &lt;&#x2F;foreach&gt;\n    &lt;&#x2F;update&gt;\n    &lt;select id&#x3D;&quot;getAuthority&quot; resultType&#x3D;&quot;fan.security.entity.SysRoleDO&quot;&gt;\n        SELECT *\n        FROM sys_role\n        WHERE role_id in (\n            SELECT role_id\n            FROM sys_employee_role\n            WHERE emp_id &#x3D; #&#123;empId&#125;\n        ) and vali_flag &#x3D; &#39;1&#39;\n    &lt;&#x2F;select&gt;\n    &lt;select id&#x3D;&quot;getEmpIdsByRoleId&quot; resultType&#x3D;&quot;java.lang.String&quot;&gt;\n        SELECT emp_id\n        FROM sys_employee_role\n        WHERE role_id &#x3D; #&#123;roleId&#125;\n    &lt;&#x2F;select&gt;\n    &lt;select id&#x3D;&quot;getEmpsByMenuId&quot; resultType&#x3D;&quot;fan.employee.entity.EmployeeDO&quot;&gt;\n        SELECT DISTINCT employee.*\n        FROM sys_employee_role\n                 LEFT JOIN &#96;sys_role_menu&#96; ON sys_role_menu.role_id &#x3D; sys_employee_role.role_id\n                 LEFT JOIN &#96;employee&#96; ON employee.emp_id &#x3D; sys_employee_role.emp_id\n        WHERE sys_role_menu.menu_id &#x3D; #&#123;menuId&#125;\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n","feature":false,"text":"Vue 基础部分见：https://blog.csdn.net/ACE_U_005A&#x2F;article&#x2F;details&#x2F;123573568Vue 开发部分见：https://blog.csdn.net/ACE_U_005A&#x2F;article&#...","link":"","photos":[],"count_time":{"symbolsCount":"143k","symbolsTime":"2:10"},"categories":[{"name":"开发实践","slug":"开发实践","count":6,"path":"api/categories/开发实践.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Vue-UI-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1. Vue UI 创建项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Vue-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">2. Vue 项目搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%BC%95%E5%85%A5-Element-UI%E3%80%81Axios%E3%80%81Mockjs%E3%80%81QS\"><span class=\"toc-text\">2.1 引入 Element-UI、Axios、Mockjs、QS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-%E5%BC%95%E5%85%A5-Element-UI\"><span class=\"toc-text\">2.1.1 引入 Element-UI</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-2-%E5%BC%95%E5%85%A5-Axios%E3%80%81Mockjs\"><span class=\"toc-text\">2.1.2 引入 Axios、Mockjs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-3-%E5%BC%95%E5%85%A5-QS\"><span class=\"toc-text\">2.1.3 引入 QS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E7%99%BB%E5%BD%95%E9%A1%B5\"><span class=\"toc-text\">2.2 登录页</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E6%96%B0%E5%BB%BA%E7%99%BB%E5%BD%95%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">2.2.1 新建登录组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">2.2.2 添加路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-3-App-vue\"><span class=\"toc-text\">2.2.3 App.vue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-4-%E8%AE%BF%E9%97%AE%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">2.2.4 访问登录页面</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E7%99%BB%E5%BD%95%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">2.3 登录校验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">2.3.1 图片验证码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">2.3.2 登录验证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-3-%E5%85%A8%E5%B1%80-Axios-%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">2.3.3 全局 Axios 拦截器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E6%95%B4%E4%BD%93%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">2.4 整体布局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-1-%E4%B8%BB%E5%AE%B9%E5%99%A8-Main-vue\"><span class=\"toc-text\">2.4.1 主容器 Main.vue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-2-%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E6%A0%8F-NavAside-vue\"><span class=\"toc-text\">2.4.2 左侧菜单栏 NavAside.vue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-3-%E9%A1%B6%E9%83%A8%E8%8F%9C%E5%8D%95%E6%A0%8F-NavHeader-vue\"><span class=\"toc-text\">2.4.3 顶部菜单栏 NavHeader.vue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-4-%E5%B1%95%E5%BC%80-x2F-%E6%94%B6%E7%BC%A9%E4%BE%A7%E8%BE%B9%E6%A0%8F\"><span class=\"toc-text\">2.4.4 展开&#x2F;收缩侧边栏</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E9%80%80%E5%87%BA%E4%B8%8E%E5%8A%A8%E6%80%81%E5%AF%BC%E8%88%AA%E8%B7%AF%E7%94%B1%E3%80%81%E5%8A%A8%E6%80%81%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">2.5 退出与动态导航路由、动态标签页绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-1-%E9%80%80%E5%87%BA\"><span class=\"toc-text\">2.5.1 退出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-2-%E5%8A%A8%E6%80%81%E5%AF%BC%E8%88%AA%E4%B8%8E%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">2.5.2 动态导航与动态路由绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-3-%E5%AF%BC%E8%88%AA%E4%B8%8E%E5%8A%A8%E6%80%81%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">2.5.3 导航与动态标签页绑定</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.6 菜单管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-%E8%A7%92%E8%89%B2%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.7 角色管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.8 用户管理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-Spring-Security-%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">3. Spring Security 后端项目搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">3.1 执行流程图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%87%86%E5%A4%87\"><span class=\"toc-text\">3.2 准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1-Security-POM-%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.2.1 Security POM 依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-RedisConfig-%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3.2.2 RedisConfig 配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-3-CorsConfig-%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3.2.3 CorsConfig 跨域配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-4-MybatisPlusConfig-%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3.2.4 MybatisPlusConfig 配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-5-RedisUtil-%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">3.2.5 RedisUtil 工具类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-6-Result-%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86\"><span class=\"toc-text\">3.2.6 Result 统一结果处理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81\"><span class=\"toc-text\">3.3 用户认证</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1-%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">3.3.1 生成验证码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-2-%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.3.2 登录成功处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-3-%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.3.3 登录失败处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-4-%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">3.3.4 图片验证码拦截器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-5-SecurityConfig-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3.3.5 SecurityConfig 核心配置类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">3.5 异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-1-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB\"><span class=\"toc-text\">3.5.1 自定义异常类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-2-%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E7%B1%BB\"><span class=\"toc-text\">3.5.2 全局异常类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-3-%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.5.3 认证失败处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-4-%E6%9D%83%E9%99%90%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.5.4 权限失败处理器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E9%89%B4%E6%9D%83\"><span class=\"toc-text\">3.6 鉴权</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-1-JWT-%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">3.6.1 JWT 工具类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-2-JWT-%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">3.6.2 JWT 过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-3-UserDetailsServiceImpl-%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">3.6.3 UserDetailsServiceImpl 实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-4-UserDetails-%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">3.6.4 UserDetails 实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-5-CustomLogoutSuccessHandler-%E6%B3%A8%E9%94%80%E6%88%90%E5%8A%9F%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.6.5 CustomLogoutSuccessHandler 注销成功处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-6-SecurityConfig-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.6.6 SecurityConfig 核心配置类完整配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.7 权限管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-1-%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.7.1 菜单管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-2-%E8%A7%92%E8%89%B2%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.7.2 角色管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-3-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.7.3 用户管理</span></a></li></ol></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"记 Vue + Element-UI 上传组件上传图片到 https 图床接口（sm:ms）","uid":"7879396660455873787f556f0fa69f30","slug":"BlogRepository/问题记录/记 Vue + Element-UI 上传组件上传图片到 https 图床接口（smms）","date":"2022-05-21T02:10:12.000Z","updated":"2023-04-20T13:57:44.648Z","comments":true,"path":"api/articles/BlogRepository/问题记录/记 Vue + Element-UI 上传组件上传图片到 https 图床接口（smms）.json","keywords":null,"cover":"https://cover.png","text":"1. 上传组件action 表示上传的地址，这里使用 http-request 覆盖默认的上传行为，自定义上传的实现 &lt;el-upload action&#x3D;&quot;&quot; class&#x3D;&quot;alignContainer&quot; :htt...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"问题记录","slug":"问题记录","count":7,"path":"api/categories/问题记录.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Redis 序列化规则及重定义","uid":"39438e0eff462191bb311410e951b530","slug":"BlogRepository/Redis/Redis 序列化规则及重定义","date":"2022-05-03T22:56:01.000Z","updated":"2023-04-20T13:57:44.601Z","comments":true,"path":"api/articles/BlogRepository/Redis/Redis 序列化规则及重定义.json","keywords":null,"cover":"https://cover.png","text":"1. JdkSerializationRedisSerializerRestTemplate 默认的序列化方式，当存储时 Key 会变成一串字符串 优点反序列化时不需要提供类型信息(class)， 缺点 需要实现Serializable接口 存储的为二进制数据 序列化后的结果非常...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"Redis","slug":"Redis","count":3,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":5,"path":"api/tags/Redis.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}