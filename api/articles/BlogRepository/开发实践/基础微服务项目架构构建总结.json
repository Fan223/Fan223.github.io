{"title":"基础微服务项目架构构建总结","uid":"1777dd13afd91a7e9bd508c03cf35724","slug":"BlogRepository/开发实践/基础微服务项目架构构建总结","date":"2022-11-16T06:08:04.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/开发实践/基础微服务项目架构构建总结.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-Maven-依赖版本管理\"><a href=\"#1-Maven-依赖版本管理\" class=\"headerlink\" title=\"1. Maven 依赖版本管理\"></a>1. Maven 依赖版本管理</h1><h2 id=\"1-1-Maven-依赖的优先级\"><a href=\"#1-1-Maven-依赖的优先级\" class=\"headerlink\" title=\"1.1 Maven 依赖的优先级\"></a>1.1 Maven 依赖的优先级</h2><p><strong>1、最短路径优先</strong></p>\n<ul>\n<li>工程中依赖了 B、C 两个 jar 包</li>\n<li>在 B jar 包内引用了 C jar 包版本为 1.0</li>\n<li>在工程内直接引用的 C jar 包版本为 2.0</li>\n</ul>\n<p>Project -&gt; B -&gt; C(1.0) ，Project -&gt; C(2.0)。由于 C(2.0) 路径最短，所以项目使用的是 C(2.0)</p>\n<p><strong>2、POM 申明顺序优先</strong></p>\n<p>如果 project -&gt; B -&gt; C(1.0) ，project -&gt; D -&gt; C(2.0) 这样的路径长度一样怎么办呢？</p>\n<p>这样的情况下，Maven 会根据 POM 文件声明的顺序加载，如果先声明了 B，后声明了 D，那就最后的依赖就会是 C(1.0)</p>\n<h2 id=\"1-2-Maven-包版本控制\"><a href=\"#1-2-Maven-包版本控制\" class=\"headerlink\" title=\"1.2 Maven 包版本控制\"></a>1.2 Maven 包版本控制</h2><p>在项目顶层的父 POM 中可以定义如下的三方 jar 的版本定义（这里的 jar 包只是定义，并没有引用，即不会下载依赖）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependencyManagement&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;1.1.43&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencyManagement&gt;</code></pre>\n\n<p>这样需要引用这个 jar 的子模块可以忽略版本定义直接引用（此时才真正下载依赖）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependencies&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<h2 id=\"1-3-多项目全局管理\"><a href=\"#1-3-多项目全局管理\" class=\"headerlink\" title=\"1.3 多项目全局管理\"></a>1.3 多项目全局管理</h2><p>随便打开一个 SpringBoot 的项目，打开 POM 文件，父级依赖都是</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;parent&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;$&#123;springboot-version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n<p>点击这个 parent 的依赖进去看到顶级的父级依赖为</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;springboot-version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n<p>继续点进去，里面已经没有任何 jar 的实际引用了，只有各种各样的 SpringBoot 或者 Spring 生态可能会依赖到的 jar 包的版本定义</p>\n<p>Spring 通过定义一个顶层的父级版本依赖，只要是符合 SpringBoot 大版本下的 Spring 组件内的各个 jar 版本都是统一的，如果出现依赖升级的情况，不需要再去升级一个个组件的版本，直接升级父级的依赖管理 POM 中的版本即可</p>\n<p><strong>参照 Spring Maven 版本管理的思路，我们也可以定义这样一个业务的顶层 Maven 版本管理工程，如 common-dependency</strong></p>\n<ol>\n<li>版本管理工程的 POM 的父 POM 依赖 spring-boot</li>\n<li>版本管理工程的 POM 内定义业务通用的一些 Maven 依赖版本</li>\n<li>推送该工程至中央仓库（本地可以直接执行 <code>maven install</code> 打包到本地仓库）</li>\n<li>业务应用将<strong>父 POM</strong> 从 <strong>spring-boot</strong> 切换为 <strong>common-dependency</strong></li>\n</ol>\n<p>即在单个业务项目上抽离出一个版本管理工程作为父工程，所有的项目都使用统一的通用的依赖版本，假如某个项目需要自定义依赖或依赖版本，在项目的顶层 POM 文件中再进行定义即可，根据依赖优先级，会优先使用项目的 POM 文件中自定义的依赖版本</p>\n<h2 id=\"1-4-common-dependency\"><a href=\"#1-4-common-dependency\" class=\"headerlink\" title=\"1.4 common-dependency\"></a>1.4 common-dependency</h2><p>1、新建一个项目</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153634.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153645.png\"></p>\n<p>2、删掉多余的其他文件</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153655.png\"></p>\n<p>3、进行版本管理，父依赖为 spring-boot-starter-parent</p>\n<p><strong>注：这里 <code>build</code> 里的 spring-boot-maven-plugin 插件只是为了演示同样有依赖版本继承所以才在此处定义（注释状态），该插件只需定义在项目的主启动类的 POM 文件里即可。单模块项目不影响，假如为多模块项目，打包时会报错 <code>Unable to find main class</code></strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.7.5&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;common-dependency&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;modules&gt;\n        &lt;module&gt;demo&lt;&#x2F;module&gt;\n    &lt;&#x2F;modules&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;\n    &lt;name&gt;common-dependency&lt;&#x2F;name&gt;\n    &lt;description&gt;common-dependency&lt;&#x2F;description&gt;\n\n    &lt;!-- 统一管理jar包版本 --&gt;\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;8&lt;&#x2F;maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;8&lt;&#x2F;maven.compiler.target&gt;\n        &lt;lombok.version&gt;1.18.24&lt;&#x2F;lombok.version&gt;\n        &lt;mybatis.plus.version&gt;3.5.1&lt;&#x2F;mybatis.plus.version&gt;\n        &lt;druid.version&gt;1.2.9&lt;&#x2F;druid.version&gt;\n    &lt;&#x2F;properties&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;!-- MySql --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;8.0.19&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;!-- lombok --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;$&#123;lombok.version&#125;&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;!-- Mybatis-Plus --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;$&#123;mybatis.plus.version&#125;&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n            &lt;!-- 动态数据源 --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;$&#123;mybatis.plus.version&#125;&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;!-- Druid --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;$&#123;druid.version&#125;&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n        &lt;&#x2F;dependencies&gt;\n    &lt;&#x2F;dependencyManagement&gt;\n\n&lt;!--\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n--&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>4、推送到中央仓库，本地的话 maven install 到本地仓库</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153707.png\"></p>\n<p>5、其他项目父依赖改为 common-dependency，即可进行统一的依赖版本管理</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;common-dependency&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;common-project&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;\n    &lt;name&gt;common-project&lt;&#x2F;name&gt;\n    &lt;description&gt;common-project&lt;&#x2F;description&gt;\n\n    &lt;!-- 统一通用的依赖 --&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>依赖结构如下，不同的颜色的框表示不同的层级，或者说独立工程。如 common-dependency 为通用的顶层版本依赖工程，与 project 是独立的。project 将父依赖设置为 common-dependency，其内部模块的父依赖即相应的项目顶层 POM，module 是包含在 project 里的</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153717.png\"></p>\n<p>单项目的话可以直接在项目顶层 POM 中进行版本控制即可，即从上图的 project 开始，或者说直接将 common-dependency 当成 project，这时 common-dependency 应该改为对应的项目名</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153726.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153736.png\"></p>\n<h1 id=\"2-项目内划分模块\"><a href=\"#2-项目内划分模块\" class=\"headerlink\" title=\"2. 项目内划分模块\"></a>2. 项目内划分模块</h1><h2 id=\"2-1-分模块\"><a href=\"#2-1-分模块\" class=\"headerlink\" title=\"2.1 分模块\"></a>2.1 分模块</h2><p>业务模块划分没有一个严格的业界标准，也没有说一定要按照怎么设计，这里根据个人使用总结为以下几个模块，具体使用可根据情况自己进行调整：</p>\n<table>\n<thead>\n<tr>\n<th>Maven 模块</th>\n<th>模块描述</th>\n<th>特殊说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>api</td>\n<td>将 rpc 相关的接口、所必须的交互实体、枚举等定义在此处，提供给内部其他系统进行服务调用</td>\n<td>单体服务可去除此模块</td>\n</tr>\n<tr>\n<td>base&#x2F;comm</td>\n<td>与业务无关的通用配置定义在此处，如统一结果返回类、统一工具类等。具有业务无关性，与业务相关的工具类、枚举等可定义在具体的业务模块内</td>\n<td></td>\n</tr>\n<tr>\n<td>rpc</td>\n<td>api 包的 rpc 接口定义实现，一般来说是调用模块内的具体业务接口进行相关的处理</td>\n<td>单体服务可去除此模块</td>\n</tr>\n<tr>\n<td>service</td>\n<td>具体的服务模块，进行业务处理，不特指某一个模块名</td>\n<td></td>\n</tr>\n<tr>\n<td>web</td>\n<td>在此处定义启动类，配置文件（resources 目录），配置类（RedisConfig&#x2F;MyBatisConfig）等项目配置</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>依赖结构如下，在之前的基础上添加项目内部划分的模块间的依赖关系</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153747.png\"></p>\n<p>此处同样可以将上述划分好模块的 project 抽离出来成一个 common-project 用于多项目的统一的通用配置</p>\n<h2 id=\"2-2-common-project\"><a href=\"#2-2-common-project\" class=\"headerlink\" title=\"2.2 common-project\"></a>2.2 common-project</h2><p>1、同样的新建一个项目</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153758.png\"></p>\n<p>2、删除其他多余文件，并按照前面的模块划分创建好对应的模块</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153808.png\"></p>\n<p>3、顶层 POM 如下，父依赖为 common-dependency，并把各个模块依赖进去</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;common-dependency&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;modules&gt;\n        &lt;module&gt;common-api&lt;&#x2F;module&gt;\n        &lt;module&gt;common-base&lt;&#x2F;module&gt;\n        &lt;module&gt;common-rpc&lt;&#x2F;module&gt;\n        &lt;module&gt;common-service&lt;&#x2F;module&gt;\n        &lt;module&gt;common-web&lt;&#x2F;module&gt;\n    &lt;&#x2F;modules&gt;\n\n    &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;common-project&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;\n    &lt;name&gt;common-project&lt;&#x2F;name&gt;\n    &lt;description&gt;common-project&lt;&#x2F;description&gt;\n\n    &lt;!-- 统一通用的依赖 --&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n\n    &lt;!-- 将各模块依赖进来 --&gt;\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;common-api&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;common-base&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;common-rpc&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;common-service&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;common-web&lt;&#x2F;artifactId&gt;\n                &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n            &lt;&#x2F;dependency&gt;\n        &lt;&#x2F;dependencies&gt;\n    &lt;&#x2F;dependencyManagement&gt;\n&lt;&#x2F;project&gt;\n</code></pre>\n\n<p>4、同时根据依赖关系依赖对应的模块</p>\n<p>如 common-api 依赖 common-base</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;common-project&lt;&#x2F;artifactId&gt;\n        &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n  \n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;artifactId&gt;common-api&lt;&#x2F;artifactId&gt;\n    &lt;name&gt;common-api&lt;&#x2F;name&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;common-base&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>common-rpc 又依赖 common-api。由于 common-api 已经依赖了 common-base，所以不需要重复引入 common-base</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;common-project&lt;&#x2F;artifactId&gt;\n        &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;artifactId&gt;common-rpc&lt;&#x2F;artifactId&gt;\n    &lt;name&gt;common-rpc&lt;&#x2F;name&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;common-api&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>common-service 依赖 common-base</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;common-project&lt;&#x2F;artifactId&gt;\n        &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;artifactId&gt;common-service&lt;&#x2F;artifactId&gt;\n    &lt;name&gt;common-service&lt;&#x2F;name&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;common-base&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>同样推送到中央仓库，本地的话 maven install 到本地仓库</p>\n<h1 id=\"3-业务模块内分层\"><a href=\"#3-业务模块内分层\" class=\"headerlink\" title=\"3. 业务模块内分层\"></a>3. 业务模块内分层</h1><h2 id=\"3-1-分层\"><a href=\"#3-1-分层\" class=\"headerlink\" title=\"3.1 分层\"></a>3.1 分层</h2><p>目前很多业务系统都是基于 MVC 三层架构来开发的，MVC 三层架构中的 M 表示 Model，V 表示 View，C 表示 Controller。它将整个项目分为三层：展示层、逻辑层、数据层。MVC 三层开发架构是一个比较笼统的分层方式，落实到具体的开发层面，很多项目也并不会 100% 遵从 MVC 固定的分层方式，而是会根据具体的项目需求，做适当的调整</p>\n<p>很多 Web 或者 App 项目都是前后端分离的，后端负责暴露接口给前端调用。这种情况下，一般就将后端项目分为 Repository 层、Service 层、Controller 层。其中，Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接口。这里的 Service 层假如业务复杂，可再细分为如下三层：</p>\n<ul>\n<li>Manager 层： 负责将 Dao 层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台的封装</li>\n<li>Service 层： 更加关注业务逻辑，是业务处理层，将 Manager 组合过的操作和业务逻辑组合在一起，再封装成业务操作</li>\n<li>Biz 层： 包含 Service 层，Service 层注重基础业务的处理，Biz 层是复杂应用层的业务层</li>\n</ul>\n<p>当然，这只是其中一种分层和命名方式。不同的项目、不同的团队，可能会对此有所调整。不过，万变不离其宗，只要是依赖数据库开发的 Web 项目，基本的分层思路都大差不差</p>\n<h2 id=\"3-2-数据载体划分\"><a href=\"#3-2-数据载体划分\" class=\"headerlink\" title=\"3.2 数据载体划分\"></a>3.2 数据载体划分</h2><h3 id=\"3-2-1-PO（Persistant-Object）-x2F-Entity\"><a href=\"#3-2-1-PO（Persistant-Object）-x2F-Entity\" class=\"headerlink\" title=\"3.2.1 PO（Persistant Object）&#x2F;Entity\"></a>3.2.1 PO（Persistant Object）&#x2F;Entity</h3><p>持久化对象，通过 DAO 层向上传输的数据源对象，实体属性与表字段一一对应。简单来说 PO 就是数据库中的记录，一个 PO 的数据结构对应着库中表的结构，表中的一条记录就是一个 PO 对象，通常 PO 里面除了 getter，setter 之外没有别的方法。概念与 Entity 一致</p>\n<h3 id=\"3-2-2-BO（Business-Object）\"><a href=\"#3-2-2-BO（Business-Object）\" class=\"headerlink\" title=\"3.2.2 BO（Business Object）\"></a>3.2.2 BO（Business Object）</h3><p>业务对象，由 Service 层输出的封装业务逻辑的对象。BO 即 PO 的组合，如 PO1 是交易记录，PO2 是商品浏览记录，PO3 是添加购物车记录，等等组合起来形成 BO ，就是个人网站行为对象</p>\n<p>一类业务就会对应一个 BO，数量上没有限制，而且 BO 会有很多业务操作，也就是说除了 getter，setter 方法以外，BO 会有很多针对自身数据进行计算的方法</p>\n<p>现在很多持久层框架自身就提供了数据组合的功能，因此 BO 有可能是在业务层由业务来拼装 PO 而成，也有可能是在数据库访问层由框架直接生成</p>\n<h3 id=\"3-2-3-DO\"><a href=\"#3-2-3-DO\" class=\"headerlink\" title=\"3.2.3 DO\"></a>3.2.3 DO</h3><p>DO 主要有两种定义</p>\n<ul>\n<li>一种在阿里巴巴开发手册中的定义，DO（ Data Object），等同于上面的 PO</li>\n<li>一种是在 DDD（Domain-Driven Design）领域驱动设计中，DO（Domain Object），等同于上面的 BO</li>\n</ul>\n<h3 id=\"3-2-4-DTO（Data-Transfer-Object）\"><a href=\"#3-2-4-DTO（Data-Transfer-Object）\" class=\"headerlink\" title=\"3.2.4 DTO（Data Transfer Object）\"></a>3.2.4 DTO（Data Transfer Object）</h3><p>数据传输对象，这个传输通常指的前后端之间的传输，Service 或 Manager 向外传输的对象</p>\n<p><strong>BO 和 DTO 的区别</strong></p>\n<p>这两个的区别主要是就是字段的删减。BO 对内，为了进行业务计算需要辅助数据，或者是一个业务有多个对外的接口，BO 可能会含有很多接口对外所不需要的数据，而 DTO 在 BO 的基础上，只要自己需要的数据，然后对外提供。在这个关系上，通常不会有数据内容的变化</p>\n<p><strong>现在微服务盛行，服务和服务之间调用的传输对象能叫 DTO 吗？</strong></p>\n<p>DTO 本身的一个隐含的意义是要能够完整的表达一个业务模块的输出，如果服务和服务之间相对独立，那就可以叫 DTO；如果服务和服务之间不独立，每个都不是一个完整的业务模块，拆开可能仅仅是因为计算复杂度或者性能的问题，那这就不能够叫做 DTO，只能是 BO</p>\n<h3 id=\"3-2-5-VO（Value-Object）\"><a href=\"#3-2-5-VO（Value-Object）\" class=\"headerlink\" title=\"3.2.5 VO（Value Object）\"></a>3.2.5 VO（Value Object）</h3><p>数据展示对象，通常是 Web 向模板渲染引擎层传输的对象，字段值与前端要求的字段名称保持一致。即 JSON 里的数据对象</p>\n<p><strong>VO 和 DTO 的区别</strong></p>\n<p>对于绝大部分的应用场景来说，DTO 和 VO 的属性值基本是一致的，而且它们通常都是 POJO，因此没必要多此一举，但这是实现层面的思维，对于设计层面来说，概念上还是应该存在 VO 和 DTO，因为两者有着本质的区别，DTO 代表服务层需要接收的数据和返回的数据，而 VO 代表展示层需要显示的数据</p>\n<p>通常可能的区别如下：</p>\n<ul>\n<li>字段不一样，假如这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，VO 可能会根据需要删减一些字段</li>\n<li>值不一样，VO 会根据需要对 DTO 中的值进行展示业务的解释</li>\n</ul>\n<p>比如服务层有一个 <code>getUser()</code> 的方法返回一个系统用户，其中有一个属性是 gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定</p>\n<ul>\n<li>DTO 可能是这样的：<code>&#123;&quot;gender&quot;: &quot;男&quot;, &quot;age&quot;: 35&#125;</code></li>\n<li>经过业务解释的 VO 是这样的：<code>&#123;&quot;gender&quot;:&quot;帅哥&quot;, &quot;age&quot;: &quot;30~39&quot;&#125;</code></li>\n</ul>\n<p>这时可能说，在服务层直接就返回“帅哥美女”不就行了吗？</p>\n<p>对于大部分应用来说，这不是问题，但如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从单一职责原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的 DTO，不应该出现与表现形式的耦合</p>\n<h3 id=\"3-2-6-Query\"><a href=\"#3-2-6-Query\" class=\"headerlink\" title=\"3.2.6 Query\"></a>3.2.6 Query</h3><p>数据查询对象，各层接收上层的查询请求，超过 2 个参数的查询封装，禁止使用 Map 类来传输</p>\n<h2 id=\"3-3-结构图\"><a href=\"#3-3-结构图\" class=\"headerlink\" title=\"3.3 结构图\"></a>3.3 结构图</h2><p>示例结构图如下，个人理解可能不一样，可根据具体情况进行调整</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153825.png\"></p>\n<h1 id=\"4-项目实践\"><a href=\"#4-项目实践\" class=\"headerlink\" title=\"4. 项目实践\"></a>4. 项目实践</h1><h2 id=\"4-1-结构图\"><a href=\"#4-1-结构图\" class=\"headerlink\" title=\"4.1 结构图\"></a>4.1 结构图</h2><p>这里由于是单体服务，去掉了 api 和 rpc 模块，假如有多个服务需要互相调用的话，加上 api 和 rpc 模块同样依赖对应的 common-api 和 common-rpc 模块即可，同时服务模块都依赖 common-service</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153835.png\"></p>\n<h2 id=\"4-2-实践\"><a href=\"#4-2-实践\" class=\"headerlink\" title=\"4.2 实践\"></a>4.2 实践</h2><p>1、按照上面的模块划分，创建好项目</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419153846.png\"></p>\n<p>2、依赖 common-project 对应的模块</p>\n<p>如 resource_nav_comm 依赖 common-base</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n\txsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n\t&lt;parent&gt;\n\t\t&lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n\t\t&lt;artifactId&gt;ResourceNavigation&lt;&#x2F;artifactId&gt;\n\t\t&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n\t&lt;&#x2F;parent&gt;\n\n\t&lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;resource_nav_comm&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n\n\t&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\t&lt;name&gt;resource_nav_comm&lt;&#x2F;name&gt;\n\t&lt;description&gt;resource_nav_comm&lt;&#x2F;description&gt;\n\n\t&lt;dependencies&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n\t\t\t&lt;artifactId&gt;common-base&lt;&#x2F;artifactId&gt;\n\t\t&lt;&#x2F;dependency&gt;\n\t&lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>resource_nav_web 依赖 common-web</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;ResourceNavigation&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;artifactId&gt;resource_nav_web&lt;&#x2F;artifactId&gt;\n    &lt;name&gt;resource_nav_web&lt;&#x2F;name&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;fan&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;common-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>resource_nav_system 模块依赖 common-service</p>\n<p>3、然后再根据上面的模块内分层，在对应层进行相应的开发</p>\n","feature":false,"text":"1. Maven 依赖版本管理1.1 Maven 依赖的优先级1、最短路径优先 工程中依赖了 B、C 两个 jar 包 在 B jar 包内引用了 C jar 包版本为 1.0 在工程内直接引用的 C jar 包版本为 2.0 Project -&gt; B -&gt; C(1....","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"开发实践","slug":"开发实践","count":6,"path":"api/categories/开发实践.json"}],"tags":[{"name":"IDEA","slug":"IDEA","count":8,"path":"api/tags/IDEA.json"},{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Maven-%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">1. Maven 依赖版本管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Maven-%E4%BE%9D%E8%B5%96%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">1.1 Maven 依赖的优先级</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-Maven-%E5%8C%85%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.2 Maven 包版本控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%A4%9A%E9%A1%B9%E7%9B%AE%E5%85%A8%E5%B1%80%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">1.3 多项目全局管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-common-dependency\"><span class=\"toc-text\">1.4 common-dependency</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E9%A1%B9%E7%9B%AE%E5%86%85%E5%88%92%E5%88%86%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2. 项目内划分模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%88%86%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2.1 分模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-common-project\"><span class=\"toc-text\">2.2 common-project</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9D%97%E5%86%85%E5%88%86%E5%B1%82\"><span class=\"toc-text\">3. 业务模块内分层</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%88%86%E5%B1%82\"><span class=\"toc-text\">3.1 分层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E6%95%B0%E6%8D%AE%E8%BD%BD%E4%BD%93%E5%88%92%E5%88%86\"><span class=\"toc-text\">3.2 数据载体划分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1-PO%EF%BC%88Persistant-Object%EF%BC%89-x2F-Entity\"><span class=\"toc-text\">3.2.1 PO（Persistant Object）&#x2F;Entity</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-BO%EF%BC%88Business-Object%EF%BC%89\"><span class=\"toc-text\">3.2.2 BO（Business Object）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-3-DO\"><span class=\"toc-text\">3.2.3 DO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-4-DTO%EF%BC%88Data-Transfer-Object%EF%BC%89\"><span class=\"toc-text\">3.2.4 DTO（Data Transfer Object）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-5-VO%EF%BC%88Value-Object%EF%BC%89\"><span class=\"toc-text\">3.2.5 VO（Value Object）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-6-Query\"><span class=\"toc-text\">3.2.6 Query</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E7%BB%93%E6%9E%84%E5%9B%BE\"><span class=\"toc-text\">3.3 结构图</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">4. 项目实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E7%BB%93%E6%9E%84%E5%9B%BE\"><span class=\"toc-text\">4.1 结构图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">4.2 实践</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"通过 Request 请求获取真实 IP 地址以及对应省份城市和系统浏览器信息","uid":"ac0a19fc42d1d09f368f9cb237bd1e7b","slug":"BlogRepository/开发实践/通过 Request 请求获取真实 IP 地址以及对应省份城市","date":"2022-12-16T08:20:26.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/开发实践/通过 Request 请求获取真实 IP 地址以及对应省份城市.json","keywords":null,"cover":"https://cover.png","text":"1. 获取真实 IP 地址1.1 代码代码如下，这里的 CommonUtil.isBlank() 为封装的判空方法 public static String getIpAddress(HttpServletRequest request) &#123; &#x2F;&#x2F; ...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"开发实践","slug":"开发实践","count":6,"path":"api/categories/开发实践.json"}],"tags":[{"name":"GeoIP2","slug":"GeoIP2","count":1,"path":"api/tags/GeoIP2.json"},{"name":"UserAgentUtils","slug":"UserAgentUtils","count":1,"path":"api/tags/UserAgentUtils.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Java实用总结","uid":"b3f4e6999373a71edd44de21348d01f5","slug":"BlogRepository/Java/Java实用总结","date":"2022-11-08T02:22:55.000Z","updated":"2023-04-20T13:57:44.601Z","comments":true,"path":"api/articles/BlogRepository/Java/Java实用总结.json","keywords":null,"cover":"https://cover.png","text":"1. 时间时区转换1.1 UTC 转 LocalDateTime将 UTC 时间（格林威治实际标准时间）转换为北京时间（UTC-东八区时间）。即将带有 T、Z 的日期字符串类型转为 LocalDateTime 类型。LocalDateTime 是没有时区的 date 时间，如果想...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":12,"path":"api/tags/Java.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}