{"title":"OAuth2.0 实践 Spring Authorization Server 搭建授权服务器 + Resource + Client","uid":"ae23336b494f1c2fc9ab2d53b8e53e8a","slug":"BlogRepository/开发实践/OAuth2.0 实践 Spring Authorization Server 搭建授权服务器 + Resource + Client","date":"2023-03-26T17:41:26.000Z","updated":"2023-04-20T13:57:44.617Z","comments":true,"path":"api/articles/BlogRepository/开发实践/OAuth2.0 实践 Spring Authorization Server 搭建授权服务器 + Resource + Client.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"1-授权服务器\"><a href=\"#1-授权服务器\" class=\"headerlink\" title=\"1. 授权服务器\"></a>1. 授权服务器</h1><p>目前 Spring 生态中的 OAuth2 授权服务器是 <strong>Spring Authorization Server</strong>，原先的 <strong>Spring Security OAuth</strong> 已经停止更新</p>\n<h2 id=\"1-1-引入依赖\"><a href=\"#1-1-引入依赖\" class=\"headerlink\" title=\"1.1 引入依赖\"></a>1.1 引入依赖</h2><p>这里的 <code>spring-security-oauth2-authorization-server</code> 用的是 0.4.0 版本，适配 JDK 1.8，Spring Boot 版本为 2.7.7</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-security-oauth2-authorization-server&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<h2 id=\"1-2-配置类\"><a href=\"#1-2-配置类\" class=\"headerlink\" title=\"1.2 配置类\"></a>1.2 配置类</h2><p><strong>可以参考官方的 Samples：<a href=\"https://github.com/spring-projects/spring-authorization-server/tree/main/samples\">spring-authorization-server&#x2F;samples</a></strong></p>\n<h3 id=\"1-2-1-最小配置\"><a href=\"#1-2-1-最小配置\" class=\"headerlink\" title=\"1.2.1 最小配置\"></a>1.2.1 最小配置</h3><p><strong>官网最小配置 Demo 地址：<a href=\"https://docs.spring.io/spring-authorization-server/docs/0.4.0/reference/html/getting-started.html\">Getting Started</a></strong></p>\n<p>官网最小配置如下，通过添加该配置类，启动项目，这就能够完成 OAuth2 的授权</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class SecurityConfig &#123;\n\n\t@Bean \n\t@Order(1)\n\tpublic SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http)\n\t\t\tthrows Exception &#123;\n\t\tOAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\n\t\thttp.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n\t\t\t.oidc(Customizer.withDefaults());\t&#x2F;&#x2F; Enable OpenID Connect 1.0\n\t\thttp\n\t\t\t&#x2F;&#x2F; Redirect to the login page when not authenticated from the\n\t\t\t&#x2F;&#x2F; authorization endpoint\n\t\t\t.exceptionHandling((exceptions) -&gt; exceptions\n\t\t\t\t.authenticationEntryPoint(\n\t\t\t\t\tnew LoginUrlAuthenticationEntryPoint(&quot;&#x2F;login&quot;))\n\t\t\t)\n\t\t\t&#x2F;&#x2F; Accept access tokens for User Info and&#x2F;or Client Registration\n\t\t\t.oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n\n\t\treturn http.build();\n\t&#125;\n\n\t@Bean \n\t@Order(2)\n\tpublic SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)\n\t\t\tthrows Exception &#123;\n\t\thttp\n\t\t\t.authorizeHttpRequests((authorize) -&gt; authorize\n\t\t\t\t.anyRequest().authenticated()\n\t\t\t)\n\t\t\t&#x2F;&#x2F; Form login handles the redirect to the login page from the\n\t\t\t&#x2F;&#x2F; authorization server filter chain\n\t\t\t.formLogin(Customizer.withDefaults());\n\n\t\treturn http.build();\n\t&#125;\n\n\t@Bean \n\tpublic UserDetailsService userDetailsService() &#123;\n\t\tUserDetails userDetails &#x3D; User.withDefaultPasswordEncoder()\n\t\t\t\t.username(&quot;user&quot;)\n\t\t\t\t.password(&quot;password&quot;)\n\t\t\t\t.roles(&quot;USER&quot;)\n\t\t\t\t.build();\n\n\t\treturn new InMemoryUserDetailsManager(userDetails);\n\t&#125;\n\n\t@Bean \n\tpublic RegisteredClientRepository registeredClientRepository() &#123;\n\t\tRegisteredClient registeredClient &#x3D; RegisteredClient.withId(UUID.randomUUID().toString())\n\t\t\t\t.clientId(&quot;messaging-client&quot;)\n\t\t\t\t.clientSecret(&quot;&#123;noop&#125;secret&quot;)\n\t\t\t\t.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n\t\t\t\t.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n\t\t\t\t.authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n\t\t\t\t.authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n\t\t\t\t.redirectUri(&quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;login&#x2F;oauth2&#x2F;code&#x2F;messaging-client-oidc&quot;)\n\t\t\t\t.redirectUri(&quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;authorized&quot;)\n\t\t\t\t.scope(OidcScopes.OPENID)\n\t\t\t\t.scope(OidcScopes.PROFILE)\n\t\t\t\t.scope(&quot;message.read&quot;)\n\t\t\t\t.scope(&quot;message.write&quot;)\n\t\t\t\t.clientSettings(ClientSettings.builder().requireAuthorizationConsent(true).build())\n\t\t\t\t.build();\n\n\t\treturn new InMemoryRegisteredClientRepository(registeredClient);\n\t&#125;\n\n\t@Bean \n\tpublic JWKSource&lt;SecurityContext&gt; jwkSource() &#123;\n\t\tKeyPair keyPair &#x3D; generateRsaKey();\n\t\tRSAPublicKey publicKey &#x3D; (RSAPublicKey) keyPair.getPublic();\n\t\tRSAPrivateKey privateKey &#x3D; (RSAPrivateKey) keyPair.getPrivate();\n\t\tRSAKey rsaKey &#x3D; new RSAKey.Builder(publicKey)\n\t\t\t\t.privateKey(privateKey)\n\t\t\t\t.keyID(UUID.randomUUID().toString())\n\t\t\t\t.build();\n\t\tJWKSet jwkSet &#x3D; new JWKSet(rsaKey);\n\t\treturn new ImmutableJWKSet&lt;&gt;(jwkSet);\n\t&#125;\n\n\tprivate static KeyPair generateRsaKey() &#123; \n\t\tKeyPair keyPair;\n\t\ttry &#123;\n\t\t\tKeyPairGenerator keyPairGenerator &#x3D; KeyPairGenerator.getInstance(&quot;RSA&quot;);\n\t\t\tkeyPairGenerator.initialize(2048);\n\t\t\tkeyPair &#x3D; keyPairGenerator.generateKeyPair();\n\t\t&#125;\n\t\tcatch (Exception ex) &#123;\n\t\t\tthrow new IllegalStateException(ex);\n\t\t&#125;\n\t\treturn keyPair;\n\t&#125;\n\n\t@Bean \n\tpublic JwtDecoder jwtDecoder(JWKSource&lt;SecurityContext&gt; jwkSource) &#123;\n\t\treturn OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);\n\t&#125;\n\n\t@Bean \n\tpublic AuthorizationServerSettings authorizationServerSettings() &#123;\n\t\treturn AuthorizationServerSettings.builder().build();\n\t&#125;\n\n&#125;</code></pre>\n\n<p>在上面的 Demo 里，将所有配置都写在了一个配置类 SecurityConfig 里，实际上 Spring Authorization Server 还提供了一种实现最小配置的默认配置形式，就是通过 <code>OAuth2AuthorizationServerConfiguration</code> 这个类，源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\npublic class OAuth2AuthorizationServerConfiguration &#123;\n\n\t@Bean\n\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\tpublic SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception &#123;\n\t\tapplyDefaultSecurity(http);\n\t\treturn http.build();\n\t&#125;\n\n\t&#x2F;&#x2F; @formatter:off\n\tpublic static void applyDefaultSecurity(HttpSecurity http) throws Exception &#123;\n\t\tOAuth2AuthorizationServerConfigurer authorizationServerConfigurer &#x3D;\n\t\t\t\tnew OAuth2AuthorizationServerConfigurer();\n\t\tRequestMatcher endpointsMatcher &#x3D; authorizationServerConfigurer\n\t\t\t\t.getEndpointsMatcher();\n\n\t\thttp\n\t\t\t.requestMatcher(endpointsMatcher)\n\t\t\t.authorizeRequests(authorizeRequests -&gt;\n\t\t\t\tauthorizeRequests.anyRequest().authenticated()\n\t\t\t)\n\t\t\t.csrf(csrf -&gt; csrf.ignoringRequestMatchers(endpointsMatcher))\n\t\t\t.apply(authorizationServerConfigurer);\n\t&#125;\n\t&#x2F;&#x2F; @formatter:on\n\n\tpublic static JwtDecoder jwtDecoder(JWKSource&lt;SecurityContext&gt; jwkSource) &#123;\n\t\tSet&lt;JWSAlgorithm&gt; jwsAlgs &#x3D; new HashSet&lt;&gt;();\n\t\tjwsAlgs.addAll(JWSAlgorithm.Family.RSA);\n\t\tjwsAlgs.addAll(JWSAlgorithm.Family.EC);\n\t\tjwsAlgs.addAll(JWSAlgorithm.Family.HMAC_SHA);\n\t\tConfigurableJWTProcessor&lt;SecurityContext&gt; jwtProcessor &#x3D; new DefaultJWTProcessor&lt;&gt;();\n\t\tJWSKeySelector&lt;SecurityContext&gt; jwsKeySelector &#x3D;\n\t\t\t\tnew JWSVerificationKeySelector&lt;&gt;(jwsAlgs, jwkSource);\n\t\tjwtProcessor.setJWSKeySelector(jwsKeySelector);\n\t\t&#x2F;&#x2F; Override the default Nimbus claims set verifier as NimbusJwtDecoder handles it instead\n\t\tjwtProcessor.setJWTClaimsSetVerifier((claims, context) -&gt; &#123;\n\t\t&#125;);\n\t\treturn new NimbusJwtDecoder(jwtProcessor);\n\t&#125;\n\n\t@Bean\n\tRegisterMissingBeanPostProcessor registerMissingBeanPostProcessor() &#123;\n\t\tRegisterMissingBeanPostProcessor postProcessor &#x3D; new RegisterMissingBeanPostProcessor();\n\t\tpostProcessor.addBeanDefinition(AuthorizationServerSettings.class, () -&gt; AuthorizationServerSettings.builder().build());\n\t\treturn postProcessor;\n\t&#125;\n\n&#125;</code></pre>\n\n<p>这里注入一个叫做 <code>authorizationServerSecurityFilterChain</code> 的 bean，其实对比一下可以看出，这和最小配置的实现基本是相同的。有了这个 bean，就会支持如下协议端点：</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-authorization-endpoint\">OAuth2 Authorization endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-token-endpoint\">OAuth2 Token endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-token-introspection-endpoint\">OAuth2 Token Introspection endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-token-revocation-endpoint\">OAuth2 Token Revocation endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-authorization-server-metadata-endpoint\">OAuth2 Authorization Server Metadata endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#jwk-set-endpoint\">JWK Set endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oidc-provider-configuration-endpoint\">OpenID Connect 1.0 Provider Configuration endpoint</a></li>\n<li><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oidc-user-info-endpoint\">OpenID Connect 1.0 UserInfo endpoint</a></li>\n</ul>\n<p>接下来使用 <code>OAuth2AuthorizationServerConfiguration</code> 这个类来实现一个 Authorization Server，将 Spring Security 和 Authorization Server 的配置分开，Spring Security 使用 <code>SecurityConfig</code> 类，创建一个新的Authorization Server 配置类 <code>AuthorizationServerConfig</code></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142234.png\"></p>\n<h3 id=\"1-2-2-ServerSecurityConfig\"><a href=\"#1-2-2-ServerSecurityConfig\" class=\"headerlink\" title=\"1.2.2 ServerSecurityConfig\"></a>1.2.2 ServerSecurityConfig</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableWebSecurity\n@Configuration(proxyBeanMethods &#x3D; false)\npublic class ServerSecurityConfig &#123;\n\n    @Resource\n    private DataSource dataSource;\n\n    &#x2F;**\n     * Spring Security 的过滤器链，用于 Spring Security 的身份认证\n     *&#x2F;\n    @Bean\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception &#123;\n        http.authorizeHttpRequests(authorize -&gt; authorize\n                        &#x2F;&#x2F; 配置放行的请求\n                        .antMatchers(&quot;&#x2F;api&#x2F;**&quot;, &quot;&#x2F;login&quot;).permitAll()\n                        &#x2F;&#x2F; 其他任何请求都需要认证\n                        .anyRequest().authenticated()\n                )\n                &#x2F;&#x2F; 设置登录表单页面\n                .formLogin(formLoginConfigurer -&gt; formLoginConfigurer.loginPage(&quot;&#x2F;login&quot;));\n\n        return http.build();\n    &#125;\n  \n&#x2F;&#x2F;    @Bean\n&#x2F;&#x2F;    public UserDetailsService userDetailsService() &#123;\n&#x2F;&#x2F;        return new JdbcUserDetailsManager(dataSource);\n&#x2F;&#x2F;    &#125;\n\n    @Bean\n    UserDetailsManager userDetailsManager() &#123;\n        return new JdbcUserDetailsManager(dataSource);\n    &#125;\n&#125;</code></pre>\n\n<p>Spring Authorization Server 默认是支持内存和 JDBC 两种存储模式的，内存模式只适合简单的测试，所以这里使用 JDBC 存储模式。在 1.2.1 最小配置那节里注入 <code>UserDetailsService</code> 这个 Bean 使用的是 <code>InMemoryUserDetailsManager</code>，表示内存模式，这里使用 <code>JdbcUserDetailsManager</code> 表示 JDBC 模式</p>\n<p>而这两个类都属于 <code>UserDetailsManager</code> 接口的实现类，并且后续我们需要使用到 <code>userDetailsManager.createUser(userDetails)</code> 方法来添加用户，因此这里需要注入 <code>UserDetailsManager</code> 这个 Bean，由于返回的都是 JdbcUserDetailsManager，因此可以注释掉 <code>UserDetailsService</code> 这个 Bean 的注入</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142304.png\"></p>\n<h3 id=\"1-2-3-AuthorizationServerConfig\"><a href=\"#1-2-3-AuthorizationServerConfig\" class=\"headerlink\" title=\"1.2.3 AuthorizationServerConfig\"></a>1.2.3 AuthorizationServerConfig</h3><p>该类部分配置可以参照前面提到的 <code>OAuth2AuthorizationServerConfiguration</code> 类来配置，同样使用 JDBC 存储模式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\npublic class AuthorizationServerConfig &#123;\n    private static final String CUSTOM_CONSENT_PAGE_URI &#x3D; &quot;&#x2F;oauth2&#x2F;consent&quot;;\n\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F; 定义授权服务配置器\n        OAuth2AuthorizationServerConfigurer configurer &#x3D; new OAuth2AuthorizationServerConfigurer();\n        configurer\n                &#x2F;&#x2F; 自定义授权页面\n                .authorizationEndpoint(authorizationEndpoint -&gt; authorizationEndpoint.consentPage(CUSTOM_CONSENT_PAGE_URI))\n                &#x2F;&#x2F; Enable OpenID Connect 1.0, 启用 OIDC 1.0\n                .oidc(Customizer.withDefaults());\n\n        &#x2F;&#x2F; 获取授权服务器相关的请求端点\n        RequestMatcher endpointsMatcher &#x3D; configurer.getEndpointsMatcher();\n\n        http\n                &#x2F;&#x2F; 拦截对授权服务器相关端点的请求\n                .requestMatcher(endpointsMatcher)\n                &#x2F;&#x2F; 拦载到的请求需要认证\n                .authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())\n                &#x2F;&#x2F; 忽略掉相关端点的 CSRF(跨站请求): 对授权端点的访问可以是跨站的\n                .csrf(csrf -&gt; csrf.ignoringRequestMatchers(endpointsMatcher))\n                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt)\n                &#x2F;&#x2F; 访问端点时表单登录\n                .formLogin()\n                .and()\n                &#x2F;&#x2F; 应用授权服务器的配置\n                .apply(configurer);\n\n        return http.build();\n    &#125;\n\n    &#x2F;**\n     * 注册客户端应用, 对应 oauth2_registered_client 表\n     *&#x2F;\n    @Bean\n    public RegisteredClientRepository registeredClientRepository(JdbcTemplate jdbcTemplate) &#123;\n        return new JdbcRegisteredClientRepository(jdbcTemplate);\n    &#125;\n\n    &#x2F;**\n     * 令牌的发放记录, 对应 oauth2_authorization 表\n     *&#x2F;\n    @Bean\n    public OAuth2AuthorizationService authorizationService(JdbcTemplate jdbcTemplate, RegisteredClientRepository registeredClientRepository) &#123;\n        return new JdbcOAuth2AuthorizationService(jdbcTemplate, registeredClientRepository);\n    &#125;\n\n    &#x2F;**\n     * 把资源拥有者授权确认操作保存到数据库, 对应 oauth2_authorization_consent 表\n     *&#x2F;\n    @Bean\n    public OAuth2AuthorizationConsentService authorizationConsentService(JdbcTemplate jdbcTemplate, RegisteredClientRepository registeredClientRepository) &#123;\n        return new JdbcOAuth2AuthorizationConsentService(jdbcTemplate, registeredClientRepository);\n    &#125;\n\n    &#x2F;**\n     * 加载 JWT 资源, 用于生成令牌\n     *&#x2F;\n    @Bean\n    public JWKSource&lt;SecurityContext&gt; jwkSource() &#123;\n        KeyPair keyPair;\n        try &#123;\n            KeyPairGenerator keyPairGenerator &#x3D; KeyPairGenerator.getInstance(&quot;RSA&quot;);\n            keyPairGenerator.initialize(2048);\n            keyPair &#x3D; keyPairGenerator.generateKeyPair();\n        &#125; catch (Exception ex) &#123;\n            throw new IllegalStateException(ex);\n        &#125;\n\n        RSAPublicKey publicKey &#x3D; (RSAPublicKey) keyPair.getPublic();\n        RSAPrivateKey privateKey &#x3D; (RSAPrivateKey) keyPair.getPrivate();\n        RSAKey rsaKey &#x3D; new RSAKey.Builder(publicKey)\n                .privateKey(privateKey)\n                .keyID(UUID.randomUUID().toString())\n                .build();\n\n        JWKSet jwkSet &#x3D; new JWKSet(rsaKey);\n        return (jwkSelector, securityContext) -&gt; jwkSelector.select(jwkSet);\n    &#125;\n\n    &#x2F;**\n     * JWT 解码\n     *&#x2F;\n    @Bean\n    public JwtDecoder jwtDecoder(JWKSource&lt;SecurityContext&gt; jwkSource) &#123;\n        return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);\n    &#125;\n\n    &#x2F;**\n     * AuthorizationServerS 的相关配置\n     *&#x2F;\n    @Bean\n    public AuthorizationServerSettings authorizationServerSettings() &#123;\n        return AuthorizationServerSettings.builder().build();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"1-3-创建数据库表\"><a href=\"#1-3-创建数据库表\" class=\"headerlink\" title=\"1.3 创建数据库表\"></a>1.3 创建数据库表</h2><p>一共包括 5 个表，其中 Spring Security 相关的有 2 个表，user 和 authorities，用户表和权限表，该表的建表 SQL 在</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org\\springframework\\security\\core\\userdetails\\jdbc\\users.ddl</p></blockquote>\n<p>SQL 可能会有一些问题，根据自己使用的数据库进行更改</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table users(username varchar_ignorecase(50) not null primary key,password varchar_ignorecase(500) not null,enabled boolean not null);\ncreate table authorities (username varchar_ignorecase(50) not null,authority varchar_ignorecase(50) not null,constraint fk_authorities_users foreign key(username) references users(username));\ncreate unique index ix_auth_username on authorities (username,authority);</code></pre>\n\n<p>Spring authorization Server 有 3 个表，建表 SQL 在：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org\\springframework\\security\\oauth2\\server\\authorization\\oauth2-authorization-consent-schema.sql</p>\n<p>org\\springframework\\security\\oauth2\\server\\authorization\\oauth2-authorization-schema.sql</p>\n<p>org\\springframework\\security\\oauth2\\server\\authorization\\client\\oauth2-registered-client-schema.sql</p></blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE oauth2_authorization_consent (\n    registered_client_id varchar(100) NOT NULL,\n    principal_name varchar(200) NOT NULL,\n    authorities varchar(1000) NOT NULL,\n    PRIMARY KEY (registered_client_id, principal_name)\n);</code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;*\nIMPORTANT:\n    If using PostgreSQL, update ALL columns defined with &#39;blob&#39; to &#39;text&#39;,\n    as PostgreSQL does not support the &#39;blob&#39; data type.\n*&#x2F;\nCREATE TABLE oauth2_authorization (\n    id varchar(100) NOT NULL,\n    registered_client_id varchar(100) NOT NULL,\n    principal_name varchar(200) NOT NULL,\n    authorization_grant_type varchar(100) NOT NULL,\n    authorized_scopes varchar(1000) DEFAULT NULL,\n    attributes blob DEFAULT NULL,\n    state varchar(500) DEFAULT NULL,\n    authorization_code_value blob DEFAULT NULL,\n    authorization_code_issued_at timestamp DEFAULT NULL,\n    authorization_code_expires_at timestamp DEFAULT NULL,\n    authorization_code_metadata blob DEFAULT NULL,\n    access_token_value blob DEFAULT NULL,\n    access_token_issued_at timestamp DEFAULT NULL,\n    access_token_expires_at timestamp DEFAULT NULL,\n    access_token_metadata blob DEFAULT NULL,\n    access_token_type varchar(100) DEFAULT NULL,\n    access_token_scopes varchar(1000) DEFAULT NULL,\n    oidc_id_token_value blob DEFAULT NULL,\n    oidc_id_token_issued_at timestamp DEFAULT NULL,\n    oidc_id_token_expires_at timestamp DEFAULT NULL,\n    oidc_id_token_metadata blob DEFAULT NULL,\n    refresh_token_value blob DEFAULT NULL,\n    refresh_token_issued_at timestamp DEFAULT NULL,\n    refresh_token_expires_at timestamp DEFAULT NULL,\n    refresh_token_metadata blob DEFAULT NULL,\n    PRIMARY KEY (id)\n);\n</code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE oauth2_registered_client (\n    id varchar(100) NOT NULL,\n    client_id varchar(100) NOT NULL,\n    client_id_issued_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    client_secret varchar(200) DEFAULT NULL,\n    client_secret_expires_at timestamp DEFAULT NULL,\n    client_name varchar(200) NOT NULL,\n    client_authentication_methods varchar(1000) NOT NULL,\n    authorization_grant_types varchar(1000) NOT NULL,\n    redirect_uris varchar(1000) DEFAULT NULL,\n    scopes varchar(1000) NOT NULL,\n    client_settings varchar(2000) NOT NULL,\n    token_settings varchar(2000) NOT NULL,\n    PRIMARY KEY (id)\n);</code></pre>\n\n<p>创建完成后的数据库表如下：</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142322.png\"></p>\n<h2 id=\"1-4-自定义登录和授权页面\"><a href=\"#1-4-自定义登录和授权页面\" class=\"headerlink\" title=\"1.4 自定义登录和授权页面\"></a>1.4 自定义登录和授权页面</h2><p>在项目 resource 目录下创建一个 templates 文件夹，然后创建 login.html 和 consent.html，登录页面的配置在 1.2.2 中配置好了，授权页面的配置在 1.2.3 中配置好了</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142334.png\"></p>\n<p><strong>登录页面 login.html</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;\n      xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; xmlns:th&#x3D;&quot;https:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, shrink-to-fit&#x3D;no&quot;&gt;\n    &lt;title&gt;Spring Security Example&lt;&#x2F;title&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;maxcdn.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.0.0-beta&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; integrity&#x3D;&quot;sha384-&#x2F;Y6pD6FV&#x2F;Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;getbootstrap.com&#x2F;docs&#x2F;4.0&#x2F;examples&#x2F;signin&#x2F;signin.css&quot; rel&#x3D;&quot;stylesheet&quot; crossorigin&#x3D;&quot;anonymous&quot;&#x2F;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;form class&#x3D;&quot;form-signin&quot; method&#x3D;&quot;post&quot; th:action&#x3D;&quot;@&#123;&#x2F;login&#125;&quot;&gt;\n        &lt;div th:if&#x3D;&quot;$&#123;param.error&#125;&quot; class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;\n            用户名或密码无效\n        &lt;&#x2F;div&gt;\n        &lt;div th:if&#x3D;&quot;$&#123;param.logout&#125;&quot; class&#x3D;&quot;alert alert-success&quot; role&#x3D;&quot;alert&quot;&gt;\n            您已注销\n        &lt;&#x2F;div&gt;\n        &lt;h2 class&#x3D;&quot;form-signin-heading&quot;&gt;登录&lt;&#x2F;h2&gt;\n        &lt;p&gt;\n            &lt;label for&#x3D;&quot;username&quot; class&#x3D;&quot;sr-only&quot;&gt;用户名&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;用户名&quot; required autofocus&gt;\n        &lt;&#x2F;p&gt;\n        &lt;p&gt;\n            &lt;label for&#x3D;&quot;password&quot; class&#x3D;&quot;sr-only&quot;&gt;密 码&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;密 码&quot; required&gt;\n        &lt;&#x2F;p&gt;\n        &lt;button class&#x3D;&quot;btn btn-lg btn-primary btn-block&quot; type&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;button&gt;\n        &lt;a class&#x3D;&quot;btn btn-light btn-block bg-white&quot; href&#x3D;&quot;&#x2F;oauth2&#x2F;authorization&#x2F;github-idp&quot; role&#x3D;&quot;link&quot; style&#x3D;&quot;text-transform: none;&quot;&gt;\n            &lt;img width&#x3D;&quot;24&quot; style&#x3D;&quot;margin-right: 5px;&quot; alt&#x3D;&quot;Sign in with GitHub&quot; src&#x3D;&quot;https:&#x2F;&#x2F;github.githubassets.com&#x2F;images&#x2F;modules&#x2F;logos_page&#x2F;GitHub-Mark.png&quot; &#x2F;&gt;\n            使用Github登录\n        &lt;&#x2F;a&gt;\n    &lt;&#x2F;form&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<p>创建 LoginConroller，用于跳转到 login.html 页面</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class LoginController &#123;\n\n\t@GetMapping(&quot;&#x2F;login&quot;)\n\tpublic String login() &#123;\n\t\treturn &quot;login&quot;;\n\t&#125;\n&#125;</code></pre>\n\n<p><strong>授权页面 consent.html</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, shrink-to-fit&#x3D;no&quot;&gt;\n    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.5.2&#x2F;css&#x2F;bootstrap.min.css&quot;\n          integrity&#x3D;&quot;sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;\n    &lt;title&gt;Custom consent page - Consent required&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        body &#123;\n            background-color: aliceblue;\n        &#125;\n    &lt;&#x2F;style&gt;\n\t&lt;script&gt;\n\t\tfunction cancelConsent() &#123;\n\t\t\tdocument.consent_form.reset();\n\t\t\tdocument.consent_form.submit();\n\t\t&#125;\n\t&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;div class&#x3D;&quot;py-5&quot;&gt;\n        &lt;h1 class&#x3D;&quot;text-center text-primary&quot;&gt;应用程序权限&lt;&#x2F;h1&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;row&quot;&gt;\n        &lt;div class&#x3D;&quot;col text-center&quot;&gt;\n            &lt;p&gt;\n                应用程序\n                &lt;span class&#x3D;&quot;font-weight-bold text-primary&quot; th:text&#x3D;&quot;$&#123;clientId&#125;&quot;&gt;&lt;&#x2F;span&gt;\n                想要访问您的帐户\n                &lt;span class&#x3D;&quot;font-weight-bold&quot; th:text&#x3D;&quot;$&#123;principalName&#125;&quot;&gt;&lt;&#x2F;span&gt;\n            &lt;&#x2F;p&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;row pb-3&quot;&gt;\n        &lt;div class&#x3D;&quot;col text-center&quot;&gt;&lt;p&gt;上述应用程序请求以下权限&lt;br&gt;如果您批准，请查看这些并同意&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;row&quot;&gt;\n        &lt;div class&#x3D;&quot;col text-center&quot;&gt;\n            &lt;form name&#x3D;&quot;consent_form&quot; method&#x3D;&quot;post&quot; th:action&#x3D;&quot;@&#123;&#x2F;oauth2&#x2F;authorize&#125;&quot;&gt;\n                &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;client_id&quot; th:value&#x3D;&quot;$&#123;clientId&#125;&quot;&gt;\n                &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;state&quot; th:value&#x3D;&quot;$&#123;state&#125;&quot;&gt;\n\n                &lt;div th:each&#x3D;&quot;scope: $&#123;scopes&#125;&quot; class&#x3D;&quot;form-group form-check py-1&quot;&gt;\n                    &lt;input class&#x3D;&quot;form-check-input&quot;\n                           type&#x3D;&quot;checkbox&quot;\n                           name&#x3D;&quot;scope&quot;\n                           th:value&#x3D;&quot;$&#123;scope.scope&#125;&quot;\n                           th:id&#x3D;&quot;$&#123;scope.scope&#125;&quot;&gt;\n                    &lt;label class&#x3D;&quot;form-check-label font-weight-bold&quot; th:for&#x3D;&quot;$&#123;scope.scope&#125;&quot; th:text&#x3D;&quot;$&#123;scope.scope&#125;&quot;&gt;&lt;&#x2F;label&gt;\n                    &lt;p class&#x3D;&quot;text-primary&quot; th:text&#x3D;&quot;$&#123;scope.description&#125;&quot;&gt;&lt;&#x2F;p&gt;\n                &lt;&#x2F;div&gt;\n\n                &lt;p th:if&#x3D;&quot;$&#123;not #lists.isEmpty(previouslyApprovedScopes)&#125;&quot;&gt;您已向上述应用授予以下权限:&lt;&#x2F;p&gt;\n                &lt;div th:each&#x3D;&quot;scope: $&#123;previouslyApprovedScopes&#125;&quot; class&#x3D;&quot;form-group form-check py-1&quot;&gt;\n                    &lt;input class&#x3D;&quot;form-check-input&quot;\n                           type&#x3D;&quot;checkbox&quot;\n                           th:id&#x3D;&quot;$&#123;scope.scope&#125;&quot;\n                           disabled\n                           checked&gt;\n                    &lt;label class&#x3D;&quot;form-check-label font-weight-bold&quot; th:for&#x3D;&quot;$&#123;scope.scope&#125;&quot; th:text&#x3D;&quot;$&#123;scope.scope&#125;&quot;&gt;&lt;&#x2F;label&gt;\n                    &lt;p class&#x3D;&quot;text-primary&quot; th:text&#x3D;&quot;$&#123;scope.description&#125;&quot;&gt;&lt;&#x2F;p&gt;\n                &lt;&#x2F;div&gt;\n\n                &lt;div class&#x3D;&quot;form-group pt-3&quot;&gt;\n                    &lt;button class&#x3D;&quot;btn btn-primary btn-lg&quot; type&#x3D;&quot;submit&quot; id&#x3D;&quot;submit-consent&quot;&gt;\n                        提交授权\n                    &lt;&#x2F;button&gt;\n                &lt;&#x2F;div&gt;\n                &lt;div class&#x3D;&quot;form-group&quot;&gt;\n                    &lt;button class&#x3D;&quot;btn btn-link regular&quot; type&#x3D;&quot;button&quot; id&#x3D;&quot;cancel-consent&quot; onclick&#x3D;&quot;cancelConsent();&quot;&gt;\n                        取消\n                    &lt;&#x2F;button&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;form&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;row pt-4&quot;&gt;\n        &lt;div class&#x3D;&quot;col text-center&quot;&gt;\n            &lt;p&gt;\n                &lt;small&gt;\n                    Your consent to provide access is required.\n                    &lt;br&#x2F;&gt;If you do not approve, click Cancel, in which case no information will be shared with the app.\n                &lt;&#x2F;small&gt;\n            &lt;&#x2F;p&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<p>创建 AuthorizationConsentController，用于跳转到 consent.html 页面</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class AuthorizationConsentController &#123;\n\tprivate final RegisteredClientRepository registeredClientRepository;\n\tprivate final OAuth2AuthorizationConsentService authorizationConsentService;\n\n\tpublic AuthorizationConsentController(RegisteredClientRepository registeredClientRepository,\n\t\t\tOAuth2AuthorizationConsentService authorizationConsentService) &#123;\n\t\tthis.registeredClientRepository &#x3D; registeredClientRepository;\n\t\tthis.authorizationConsentService &#x3D; authorizationConsentService;\n\t&#125;\n\n\t@GetMapping(value &#x3D; &quot;&#x2F;oauth2&#x2F;consent&quot;)\n\tpublic String consent(Principal principal, Model model,\n\t\t\t@RequestParam(OAuth2ParameterNames.CLIENT_ID) String clientId,\n\t\t\t@RequestParam(OAuth2ParameterNames.SCOPE) String scope,\n\t\t\t@RequestParam(OAuth2ParameterNames.STATE) String state) &#123;\n\n\t\t&#x2F;&#x2F; 要批准的范围和以前批准的范围\n\t\tSet&lt;String&gt; scopesToApprove &#x3D; new HashSet&lt;&gt;();\n\t\tSet&lt;String&gt; previouslyApprovedScopes &#x3D; new HashSet&lt;&gt;();\n\t\t&#x2F;&#x2F; 查询 clientId 是否存在\n\t\tRegisteredClient registeredClient &#x3D; this.registeredClientRepository.findByClientId(clientId);\n\t\t&#x2F;&#x2F; 查询当前的授权许可\n\t\tOAuth2AuthorizationConsent currentAuthorizationConsent &#x3D;\n\t\t\t\tthis.authorizationConsentService.findById(registeredClient.getId(), principal.getName());\n\n\t\t&#x2F;&#x2F; 已授权范围\n\t\tSet&lt;String&gt; authorizedScopes;\n\t\tif (currentAuthorizationConsent !&#x3D; null) &#123;\n\t\t\tauthorizedScopes &#x3D; currentAuthorizationConsent.getScopes();\n\t\t&#125; else &#123;\n\t\t\tauthorizedScopes &#x3D; Collections.emptySet();\n\t\t&#125;\n\t\tfor (String requestedScope : StringUtils.delimitedListToStringArray(scope, &quot; &quot;)) &#123;\n\t\t\tif (OidcScopes.OPENID.equals(requestedScope)) &#123;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\t&#x2F;&#x2F; 如果已授权范围包含了请求范围，则添加到以前批准的范围的 Set, 否则添加到要批准的范围\n\t\t\tif (authorizedScopes.contains(requestedScope)) &#123;\n\t\t\t\tpreviouslyApprovedScopes.add(requestedScope);\n\t\t\t&#125; else &#123;\n\t\t\t\tscopesToApprove.add(requestedScope);\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tmodel.addAttribute(&quot;clientId&quot;, clientId);\n\t\tmodel.addAttribute(&quot;state&quot;, state);\n\t\tmodel.addAttribute(&quot;scopes&quot;, withDescription(scopesToApprove));\n\t\tmodel.addAttribute(&quot;previouslyApprovedScopes&quot;, withDescription(previouslyApprovedScopes));\n\t\tmodel.addAttribute(&quot;principalName&quot;, principal.getName());\n\n\t\treturn &quot;consent&quot;;\n\t&#125;\n\n\tprivate static Set&lt;ScopeWithDescription&gt; withDescription(Set&lt;String&gt; scopes) &#123;\n\t\tSet&lt;ScopeWithDescription&gt; scopeWithDescriptions &#x3D; new HashSet&lt;&gt;();\n\t\tfor (String scope : scopes) &#123;\n\t\t\tscopeWithDescriptions.add(new ScopeWithDescription(scope));\n\t\t&#125;\n\t\treturn scopeWithDescriptions;\n\t&#125;\n\n\tpublic static class ScopeWithDescription &#123;\n\t\tprivate static final String DEFAULT_DESCRIPTION &#x3D; &quot;未知范围 - 我们无法提供有关此权限的信息, 请在授予此权限时谨慎&quot;;\n\t\tprivate static final Map&lt;String, String&gt; scopeDescriptions &#x3D; new HashMap&lt;&gt;();\n\t\tstatic &#123;\n\t\t\tscopeDescriptions.put(\n\t\t\t\t\tOidcScopes.PROFILE,\n\t\t\t\t\t&quot;此应用程序将能够读取您的个人资料信息&quot;\n\t\t\t);\n\t\t\tscopeDescriptions.put(\n\t\t\t\t\t&quot;message.read&quot;,\n\t\t\t\t\t&quot;此应用程序将能够读取您的信息&quot;\n\t\t\t);\n\t\t\tscopeDescriptions.put(\n\t\t\t\t\t&quot;message.write&quot;,\n\t\t\t\t\t&quot;此应用程序将能够添加新信息, 它还可以编辑和删除现有信息&quot;\n\t\t\t);\n\t\t\tscopeDescriptions.put(\n\t\t\t\t\t&quot;other.scope&quot;,\n\t\t\t\t\t&quot;这是范围描述的另一个范围示例&quot;\n\t\t\t);\n\t\t&#125;\n\n\t\tpublic final String scope;\n\t\tpublic final String description;\n\n\t\tScopeWithDescription(String scope) &#123;\n\t\t\tthis.scope &#x3D; scope;\n\t\t\tthis.description &#x3D; scopeDescriptions.getOrDefault(scope, DEFAULT_DESCRIPTION);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"1-5-ServerController\"><a href=\"#1-5-ServerController\" class=\"headerlink\" title=\"1.5 ServerController\"></a>1.5 ServerController</h2><p>用于添加用户信息和客户端信息，这里的 passwordEncoder 使用 BCryptPasswordEncoder 进行加解密，{bcrypt} 表示加密，{noop} 表示明文</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ServerController &#123;\n\n    @Resource\n    private UserDetailsManager userDetailsManager;\n\n    @GetMapping(&quot;&#x2F;api&#x2F;addUser&quot;)\n    public String addUser() &#123;\n        UserDetails userDetails &#x3D; User.builder().passwordEncoder(s -&gt; &quot;&#123;bcrypt&#125;&quot; + new BCryptPasswordEncoder().encode(s))\n                .username(&quot;fan&quot;)\n                .password(&quot;fan&quot;)\n                .roles(&quot;ADMIN&quot;)\n                .build();\n\n        userDetailsManager.createUser(userDetails);\n        return &quot;添加用户成功&quot;;\n    &#125;\n\n    @Resource\n    private RegisteredClientRepository registeredClientRepository;\n\n    @GetMapping(&quot;&#x2F;api&#x2F;addClient&quot;)\n    public String addClient() &#123;\n        &#x2F;&#x2F; JWT（Json Web Token）的配置项：TTL、是否复用refreshToken等等\n        TokenSettings tokenSettings &#x3D; TokenSettings.builder()\n                &#x2F;&#x2F; 令牌存活时间：2小时\n                .accessTokenTimeToLive(Duration.ofHours(2))\n                &#x2F;&#x2F; 令牌可以刷新，重新获取\n                .reuseRefreshTokens(true)\n                &#x2F;&#x2F; 刷新时间：30天（30天内当令牌过期时，可以用刷新令牌重新申请新令牌，不需要再认证）\n                .refreshTokenTimeToLive(Duration.ofDays(30))\n                .build();\n        &#x2F;&#x2F; 客户端相关配置\n        ClientSettings clientSettings &#x3D; ClientSettings.builder()\n                &#x2F;&#x2F; 是否需要用户授权确认\n                .requireAuthorizationConsent(true)\n                .build();\n\n        RegisteredClient registeredClient &#x3D; RegisteredClient.withId(UUID.randomUUID().toString())\n                &#x2F;&#x2F; 客户端ID和密码\n                .clientId(&quot;messaging-client&quot;)\n&#x2F;&#x2F;                .clientSecret(&quot;&#123;bcrypt&#125;&quot; + new BCryptPasswordEncoder().encode(&quot;secret&quot;))\n                .clientSecret(&quot;&#123;noop&#125;secret&quot;)\n                &#x2F;&#x2F; 授权方法\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n                &#x2F;&#x2F; 授权模式（授权码模式）\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                &#x2F;&#x2F; 刷新令牌（授权码模式）\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n                &#x2F;&#x2F; 回调地址：授权服务器向当前客户端响应时调用下面地址, 不在此列的地址将被拒绝, 只能使用IP或域名，不能使用 localhost\n                .redirectUri(&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;login&#x2F;oauth2&#x2F;code&#x2F;messaging-client-oidc&quot;)\n                &#x2F;&#x2F; OIDC 支持\n                .scope(OidcScopes.OPENID)\n                .scope(OidcScopes.PROFILE)\n                &#x2F;&#x2F; 授权范围（当前客户端的授权范围）\n                .scope(&quot;message.read&quot;)\n                .scope(&quot;message.write&quot;)\n                &#x2F;&#x2F; JWT（Json Web Token）配置项\n                .tokenSettings(tokenSettings)\n                &#x2F;&#x2F; 客户端配置项\n                .clientSettings(clientSettings)\n                .build();\n\n        registeredClientRepository.save(registeredClient);\n        return &quot;添加客户端信息成功&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"1-6-YAML-配置\"><a href=\"#1-6-YAML-配置\" class=\"headerlink\" title=\"1.6 YAML 配置\"></a>1.6 YAML 配置</h2><p>配置数据库连接信息</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 9000\n\nspring:\n  datasource:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;unified_certification?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;UTC\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    password: root</code></pre>\n\n<h2 id=\"1-7-测试\"><a href=\"#1-7-测试\" class=\"headerlink\" title=\"1.7 测试\"></a>1.7 测试</h2><p>完整目录结构如下：</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142352.png\"></p>\n<h3 id=\"1-7-1-添加用户和客户端信息\"><a href=\"#1-7-1-添加用户和客户端信息\" class=\"headerlink\" title=\"1.7.1 添加用户和客户端信息\"></a>1.7.1 添加用户和客户端信息</h3><p>启动项目，访问 <code>http://127.0.0.1:9000/api/addUser</code></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142403.png\"></p>\n<p>查询数据库 users 和 authorities 表，已有用户和权限信息</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142415.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142429.png\"></p>\n<p>访问 <code>http://127.0.0.1:9000/api/addClient</code></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142439.png\"></p>\n<p>查询数据库 oauth2_registered_client 表，已有客户端信息</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142449.png\"></p>\n<h3 id=\"1-7-2-授权码模式获取令牌\"><a href=\"#1-7-2-授权码模式获取令牌\" class=\"headerlink\" title=\"1.7.2 授权码模式获取令牌\"></a>1.7.2 授权码模式获取令牌</h3><p><strong>有关 OAuth2.0 的相关知识可见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/128779217\">OAuth2.0 实战总结_凡 223 的博客</a></strong></p>\n<p>访问 <code>http://127.0.0.1:9000/oauth2/authorize?response_type=code&amp;client_id=messaging-client&amp;scope=message.read&amp;redirect_uri=http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc</code>，这里的 127.0.0.1:8000 其实为客户端地址，后面讲到客户端时，客户端的地址就为 8000</p>\n<ul>\n<li>response_type：授权类型，code 为授权码模式</li>\n<li>client_id：客户端 ID，即前面注册客户端的时候定义的</li>\n<li>scope：请求的权限范围</li>\n<li>redirect_uri：回调地址，也是前面注册客户端的时候定义的</li>\n</ul>\n<p>未登录，会跳转到登录页面</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142504.png\"></p>\n<p>输入前面添加的用户信息，用户名和密码，然后会跳转到授权页面</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142514.png\"></p>\n<p>选择是否授予权限，这里勾选后，点击提交，会跳转到回调地址，即 127.0.0.1:8000&#x2F;authorized，由于这个地址还没有对应的服务，无法访问，但我们暂时需要的是地址栏的 code</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc?code=z_3O1lEdxVsd2fn8_uKA481pO9caGd0N4x_Vbt0deuMA77sDis6fhMJkf2_9uM4KGYzLzv7ujbXZ2JAdg0ACyMapR38jnJruG2iz2XBgptKrru-IJobGVa6NTicgvCZ7\">http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc?code=z_3O1lEdxVsd2fn8_uKA481pO9caGd0N4x_Vbt0deuMA77sDis6fhMJkf2_9uM4KGYzLzv7ujbXZ2JAdg0ACyMapR38jnJruG2iz2XBgptKrru-IJobGVa6NTicgvCZ7</a></p></blockquote>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142526.png\"></p>\n<p>打开接口测试工具，这里我使用的是 Apifox，使用表单格式，包含三个参数</p>\n<ul>\n<li>grant_type：授权类型，authorization_code 表示授权码模式</li>\n<li>code：即授权码，上面地址栏里返回给我们的 code 部分，复制到这里，code 使用一次就会失效</li>\n<li>redirect_uri：回调地址，与前面的一致</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142538.png\"></p>\n<p>然后设置 Auth，Postman 里是 Authorization，选择 Basic Auth 类型，用户名密码则为注册客户端时的 client_id 和 clientSecret，客户端 ID 和密钥</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142548.png\"></p>\n<p>保存，发送后，会给我们返回 access_token 和 refresh_token</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142558.png\"></p>\n<p>将 access_token 复制到 <a href=\"https://jwt.io/\">JSON Web Tokens - jwt.io</a> 网站，解析后可以看到 JWT 的信息，包括客户端 ID，权限范围，服务器地址等</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142610.png\"></p>\n<h3 id=\"1-7-3-授权码模式刷新令牌\"><a href=\"#1-7-3-授权码模式刷新令牌\" class=\"headerlink\" title=\"1.7.3 授权码模式刷新令牌\"></a>1.7.3 授权码模式刷新令牌</h3><p>在前面返回了 access_token 和 refresh_token，access_token 包含了授权信息，refresh_token 则是用来重新获取 access_token，同样是表单类型，包含两个参数</p>\n<ul>\n<li>grant_type：refresh_token 表示刷新令牌</li>\n<li>refresh_token：即前面获取到的 refresh_token 的值</li>\n</ul>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142623.png\"></p>\n<p>Auth 信息与前面一致</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142633.png\"></p>\n<p>保存，发送后，会给我们返回新的 access_token 和 refresh_token，refresh_token 使用一次就会失效</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142643.png\"></p>\n<h3 id=\"1-7-4-客户端模式\"><a href=\"#1-7-4-客户端模式\" class=\"headerlink\" title=\"1.7.4 客户端模式\"></a>1.7.4 客户端模式</h3><p>同样使用表单格式，grant_type 值为 client_credentials</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142652.png\"></p>\n<p>Auth 与前面一致</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142702.png\"></p>\n<p>保存，发送后，会给我们返回 access_token，没有 refresh_token。因为在授权码模式中的 access_token 是我们通过授权码 code 换来的，而授权码 code 是我们请求后授权得到的，为了不用每次获取 access_token 都需要重新请求授权，所以使用 refresh_token 来重新获取 access_token，refresh_token 和 access_token 都有过期时间，refresh_token 过期时间比 access_token 长</p>\n<p>而客户端模式可以直接获取 access_token，所以也就不需要 refresh_token 了</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142712.png\"></p>\n<h3 id=\"1-7-5-OIDC\"><a href=\"#1-7-5-OIDC\" class=\"headerlink\" title=\"1.7.5 OIDC\"></a>1.7.5 OIDC</h3><p><strong>有关 OIDC 的相关知识同样可见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/128779217\">OAuth2.0 实战总结_凡 223 的博客</a></strong></p>\n<p>在前面 1.2.3 的配置和 1.5 的注册客户端时，已经支持了 OIDC，这里直接访问：<code>http://127.0.0.1:9000/oauth2/authorize?response_type=code&amp;client_id=messaging-client&amp;scope=openid&amp;redirect_uri=http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc</code></p>\n<p>这里的 scope 必须包含 openid</p>\n<p>得到授权码 code</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://127.0.0.1:8000/authorized?code=NjvT1z3msYRsjvPPM4LP4EmlyBUixsKes_J6osSB3VAugXEKmyUappvtrmTWp7s_iQzoJsD8xOE3gUXawhMixL0fu2HC6UJv8CeZyCB-d2oiu4NnCO9uJcK1MXOm4poU\">http://127.0.0.1:8000/authorized?code=NjvT1z3msYRsjvPPM4LP4EmlyBUixsKes_J6osSB3VAugXEKmyUappvtrmTWp7s_iQzoJsD8xOE3gUXawhMixL0fu2HC6UJv8CeZyCB-d2oiu4NnCO9uJcK1MXOm4poU</a></p></blockquote>\n<p>然后通过授权码 code 换取令牌，可以看到除了 access_token 和 refresh_token 外，还返回了一个 id_token</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142725.png\"></p>\n<p>解析这个 id_token，信息如下，是我们的身份认证信息</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142739.png\"></p>\n<p>再通过 refresh_token 重新获取令牌，同样也给我们返回了 id_token</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142749.png\"></p>\n<p>通过 access_token，获取 OIDC 的用户端点</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142802.png\"></p>\n<p>这里的 sub 就是用户的标志。在 1.2.3 的配置中，对于 OIDC 使用的是默认配置</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142812.png\"></p>\n<p>我们也可以增加自定义信息，修改后的配置如下，其他配置不变</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\npublic class AuthorizationServerConfig &#123;\n    private static final String CUSTOM_CONSENT_PAGE_URI &#x3D; &quot;&#x2F;oauth2&#x2F;consent&quot;;\n\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F; 定义授权服务配置器\n        OAuth2AuthorizationServerConfigurer configurer &#x3D; new OAuth2AuthorizationServerConfigurer();\n        configurer\n                &#x2F;&#x2F; 自定义授权页面\n                .authorizationEndpoint(authorizationEndpoint -&gt; authorizationEndpoint.consentPage(CUSTOM_CONSENT_PAGE_URI))\n                &#x2F;&#x2F; Enable OpenID Connect 1.0, 启用 OIDC 1.0\n                .oidc(oidcConfigurer -&gt; oidcConfigurer.userInfoEndpoint(userInfoEndpointConfigurer -&gt;\n                        userInfoEndpointConfigurer.userInfoMapper(userInfoAuthenticationContext -&gt; &#123;\n                            OAuth2AccessToken accessToken &#x3D; userInfoAuthenticationContext.getAccessToken();\n                            Map&lt;String, Object&gt; claims &#x3D; MapUtil.map(false);\n\n                            claims.put(&quot;url&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1:9000&quot;);\n                            claims.put(&quot;accessToken&quot;, accessToken);\n                            claims.put(&quot;sub&quot;, userInfoAuthenticationContext.getAuthorization().getPrincipalName());\n\n                            return new OidcUserInfo(claims);\n                        &#125;)));\n\n        &#x2F;&#x2F; 获取授权服务器相关的请求端点\n        RequestMatcher endpointsMatcher &#x3D; configurer.getEndpointsMatcher();\n\n        http\n                &#x2F;&#x2F; 拦截对授权服务器相关端点的请求\n                .requestMatcher(endpointsMatcher)\n                &#x2F;&#x2F; 拦载到的请求需要认证\n                .authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())\n                &#x2F;&#x2F; 忽略掉相关端点的 CSRF(跨站请求): 对授权端点的访问可以是跨站的\n                .csrf(csrf -&gt; csrf.ignoringRequestMatchers(endpointsMatcher))\n                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt)\n                &#x2F;&#x2F; 访问端点时表单登录\n                .formLogin()\n                .and()\n                &#x2F;&#x2F; 应用授权服务器的配置\n                .apply(configurer);\n\n        return http.build();\n    &#125;\n\n    &#x2F;&#x2F; ... 其他配置不变\n&#125;</code></pre>\n\n<p>重启项目，重新获取到 access_token，通过 access_token 访问用户端点，可以看到我们自定义的信息已经被添加了进来</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142827.png\"></p>\n<h1 id=\"2-资源服务器\"><a href=\"#2-资源服务器\" class=\"headerlink\" title=\"2. 资源服务器\"></a>2. 资源服务器</h1><h2 id=\"2-1-引入依赖\"><a href=\"#2-1-引入依赖\" class=\"headerlink\" title=\"2.1 引入依赖\"></a>2.1 引入依赖</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<h2 id=\"2-2-YAML-配置\"><a href=\"#2-2-YAML-配置\" class=\"headerlink\" title=\"2.2 YAML 配置\"></a>2.2 YAML 配置</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8001\n\nspring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: http:&#x2F;&#x2F;localhost:9000</code></pre>\n\n<h2 id=\"2-3-异常处理器\"><a href=\"#2-3-异常处理器\" class=\"headerlink\" title=\"2.3 异常处理器\"></a>2.3 异常处理器</h2><p>该部分为 Spring Security 相关知识，可见：**<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/123482893\">Spring Security 总结_凡 223 的博客</a>**</p>\n<h3 id=\"2-3-1-认证失败处理器\"><a href=\"#2-3-1-认证失败处理器\" class=\"headerlink\" title=\"2.3.1 认证失败处理器\"></a>2.3.1 认证失败处理器</h3><p>Response 为自定义的统一结果返回类，这里的返回信息自定义即可</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class UnAccessDeniedHandler implements AccessDeniedHandler &#123;\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException &#123;\n        &#x2F;&#x2F; 403, 未授权, 禁止访问\n        response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        response.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n\n        &#x2F;&#x2F; 返回响应信息\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n        Response fail &#x3D; Response.fail(HttpServletResponse.SC_FORBIDDEN,\n                &quot;UnAccessDeniedHandler-未授权, 不允许访问&quot;, &quot;uri-&quot; + request.getRequestURI());\n        outputStream.write(JSONUtil.toJsonStr(fail).getBytes(StandardCharsets.UTF_8));\n\n        &#x2F;&#x2F; 关闭流\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"2-3-2-鉴权失败处理器\"><a href=\"#2-3-2-鉴权失败处理器\" class=\"headerlink\" title=\"2.3.2 鉴权失败处理器\"></a>2.3.2 鉴权失败处理器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic class UnAuthenticationEntryPoint implements AuthenticationEntryPoint &#123;\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException &#123;\n        if (authException instanceof InvalidBearerTokenException) &#123;\n            LogUtil.info(&quot;Token 登录失效&quot;);\n        &#125;\n\n        if (response.isCommitted()) &#123;\n            return;\n        &#125;\n\n        &#x2F;&#x2F; 401, 未认证\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        response.setStatus(HttpServletResponse.SC_ACCEPTED);\n        response.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n\n        &#x2F;&#x2F; 返回响应信息\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        Response fail &#x3D; Response.fail(HttpServletResponse.SC_UNAUTHORIZED,\n                authException.getMessage() + &quot;-UnAuthenticationEntryPoint-认证失败&quot;, &quot;uri-&quot; + request.getRequestURI());\n        outputStream.write(JSONUtil.toJsonStr(fail).getBytes(StandardCharsets.UTF_8));\n        &#x2F;&#x2F; 关闭流\n        outputStream.flush();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"2-4-配置类\"><a href=\"#2-4-配置类\" class=\"headerlink\" title=\"2.4 配置类\"></a>2.4 配置类</h2><p>对资源请求配置了读、写、profile 权限</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableWebSecurity\n@Configuration(proxyBeanMethods &#x3D; false)\npublic class ResourceServerConfig &#123;\n\n    &#x2F;**\n     * 资源管理器配置\n     *\n     * @param http\n     * @return &#123;@link SecurityFilterChain&#125;\n     * @author Fan\n     * @since 2023&#x2F;2&#x2F;2 9:30\n     *&#x2F;\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception &#123;\n        UnAuthenticationEntryPoint authenticationEntryPoint &#x3D; new UnAuthenticationEntryPoint();\n        UnAccessDeniedHandler accessDeniedHandler &#x3D; new UnAccessDeniedHandler();\n\n        http\n                &#x2F;&#x2F; security的session生成策略改为security不主动创建session, 即STALELESS\n                &#x2F;&#x2F; 资源服务不涉及用户登录, 仅靠token访问, 不需要seesion\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeHttpRequests(authorize -&gt; authorize\n                        &#x2F;&#x2F; 对 &#x2F;resource1 的请求，需要 SCOPE_message.read 权限\n                        .antMatchers(&quot;&#x2F;resource1&quot;).hasAuthority(&quot;SCOPE_message.read&quot;)\n                        &#x2F;&#x2F; 对 &#x2F;resource2 的请求，需要 SCOPE_message.write 权限\n                        .antMatchers(&quot;&#x2F;resource2&quot;).hasAuthority(&quot;SCOPE_message.write&quot;)\n                        &#x2F;&#x2F; 对 &#x2F;resource3 的请求，需要 SCOPE_profile 权限\n                        .antMatchers(&quot;&#x2F;resource3&quot;).hasAuthority(&quot;SCOPE_profile&quot;)\n                        &#x2F;&#x2F; 放行请求\n                        .antMatchers(&quot;&#x2F;api&#x2F;**&quot;).permitAll()\n                        &#x2F;&#x2F; 其他任何请求都需要认证\n                        .anyRequest().authenticated())\n                &#x2F;&#x2F; 异常处理器\n                .exceptionHandling(exceptionConfigurer -&gt; exceptionConfigurer\n                        &#x2F;&#x2F; 认证失败\n                        .authenticationEntryPoint(authenticationEntryPoint)\n                        &#x2F;&#x2F; 鉴权失败\n                        .accessDeniedHandler(accessDeniedHandler)\n                )\n                &#x2F;&#x2F; 资源服务\n                .oauth2ResourceServer(resourceServer -&gt; resourceServer\n                        .authenticationEntryPoint(authenticationEntryPoint)\n                        .accessDeniedHandler(accessDeniedHandler)\n                        .jwt());\n\n        return http.build();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"2-5-Controller\"><a href=\"#2-5-Controller\" class=\"headerlink\" title=\"2.5 Controller\"></a>2.5 Controller</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class MessagesController &#123;\n\n\t@GetMapping(&quot;&#x2F;resource1&quot;)\n\tpublic Response getResource1()&#123;\n\t\treturn Response.success(&quot;服务A -&gt; 资源1 -&gt; 读权限&quot;);\n\t&#125;\n\n\t@GetMapping(&quot;&#x2F;resource2&quot;)\n\tpublic Response getResource2()&#123;\n\t\treturn Response.success(&quot;服务A -&gt; 资源2 -&gt; 写权限&quot;);\n\t&#125;\n\n\t@GetMapping(&quot;&#x2F;resource3&quot;)\n\tpublic Response resource3()&#123;\n\t\treturn Response.success(&quot;服务A -&gt; 资源3 -&gt; profile 权限&quot;);\n\t&#125;\n\n\t@GetMapping(&quot;&#x2F;api&#x2F;publicResource&quot;)\n\tpublic Response publicResource() &#123;\n\t\treturn Response.success(&quot;服务A -&gt; 公共资源&quot;);\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"2-6-测试\"><a href=\"#2-6-测试\" class=\"headerlink\" title=\"2.6 测试\"></a>2.6 测试</h2><p>完整目录结构如下：</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142849.png\"></p>\n<p>启动项目，打开 Apifox，直接请求时，会提示我们认证失败，即上面认证失败处理器的响应结果</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142900.png\"></p>\n<p>添加 Auth，类型选择 Bearer Token，Token 的值即为前面获取到的 access_token 的值</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142912.png\"></p>\n<p>保存，发送后，即可获取资源 resource1</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142922.png\"></p>\n<p>再获取资源 resource2，提示没有权限，这里返回的信息即为鉴权失败处理器的响应信息。因为在我们申请权限的时候只申请了 message.read 权限，同时也只授权了 message.read 权限，而 resource2 需要 message.write 权限，因此鉴权失败，无法访问</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142935.png\"></p>\n<h1 id=\"3-客户端\"><a href=\"#3-客户端\" class=\"headerlink\" title=\"3. 客户端\"></a>3. 客户端</h1><h2 id=\"3-1-引入依赖\"><a href=\"#3-1-引入依赖\" class=\"headerlink\" title=\"3.1 引入依赖\"></a>3.1 引入依赖</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-oauth2-client&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<h2 id=\"3-2-YAML-配置\"><a href=\"#3-2-YAML-配置\" class=\"headerlink\" title=\"3.2 YAML 配置\"></a>3.2 YAML 配置</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8000\n\nspring:\n  application:\n    name: messages-client\n  security:\n    oauth2:\n      client:\n        registration:\n          messaging-client-oidc:\n            provider: authorization-server\n            client-id: messaging-client\n            client-secret: secret\n            authorization-grant-type: authorization_code\n#            redirect-uri: &quot;127.0.0.1:8000&#x2F;login&#x2F;oauth2&#x2F;code&#x2F;messaging-client-oidc&quot;\n            redirect-uri: &quot;&#123;baseUrl&#125;&#x2F;&#123;action&#125;&#x2F;oauth2&#x2F;code&#x2F;&#123;registrationId&#125;&quot;\n            scope: openid,message.read,message.write\n            client-name: messaging-client-oidc\n        provider:\n          # 服务提供地址\n          authorization-server:\n            # issuer-uri 可以简化下面的配置\n            issuer-uri: http:&#x2F;&#x2F;localhost:9000\n            # 请求授权码地址\n#            authorization-uri: http:&#x2F;&#x2F;localhost:9000&#x2F;oauth2&#x2F;authorize\n            # 请求令牌地址\n#            token-uri: http:&#x2F;&#x2F;localhost:9000&#x2F;oauth2&#x2F;token\n            # 用户资源地址\n#            user-info-uri: http:&#x2F;&#x2F;localhost:9000&#x2F;oauth2&#x2F;user\n            # 用户资源返回中的一个属性名\n#            user-name-attribute: name\n#            user-info-authentication-method: GET\n</code></pre>\n\n<p>这里的配置要和注册客户端时的配置对应上，同一颜色对应，这里使用的是 OIDC，scope 加上了 openid</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414142948.png\"></p>\n<p>PS：这里在网上翻阅了不少资料，包括官方文档和 Demo，看到有的不使用 OIDC 也能运行无误，但我这里不使用 OIDC 的话会报</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[invalid_user_info_response] An error occurred while attempting to retrieve the UserInfo Resource: 403 : “{“error”:”insufficient_scope”}”</p></blockquote>\n<p>看到有的提到的原因和解决方案是：JWT 令牌的解析不一致，自定义 JWT 令牌解析即可。这里我进行了一些尝试最后也没有一个成功的解决方案，最后放弃了直接使用 OIDC 就行了，并未去探究其中的原因</p>\n<h2 id=\"3-3-配置类\"><a href=\"#3-3-配置类\" class=\"headerlink\" title=\"3.3 配置类\"></a>3.3 配置类</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableWebSecurity\n@Configuration(proxyBeanMethods &#x3D; false)\npublic class ClientSecurityConfig &#123;\n\n    &#x2F;**\n     * 安全配置\n     *&#x2F;\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception &#123;\n        http.authorizeHttpRequests(authorize -&gt;\n                        &#x2F;&#x2F; 任何请求都需要认证\n                        authorize.anyRequest().authenticated()\n                )\n                &#x2F;&#x2F; 登录\n&#x2F;&#x2F;                .oauth2Login(oauth2Login -&gt; oauth2Login.loginPage(&quot;&#x2F;oauth2&#x2F;authorization&#x2F;messaging-client-oidc&quot;))\n                .oauth2Login(Customizer.withDefaults())\n                .oauth2Client(Customizer.withDefaults());\n\n        return http.build();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-4-index-html\"><a href=\"#3-4-index-html\" class=\"headerlink\" title=\"3.4 index.html\"></a>3.4 index.html</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n登录用户：&lt;span th:text&#x3D;&quot;$&#123;user&#125;&quot;&gt;&lt;&#x2F;span&gt;\n&lt;hr&#x2F;&gt;\n&lt;ul&gt;\n    &lt;li&gt;&lt;a href&#x3D;&quot;.&#x2F;server&#x2F;a&#x2F;resource1&quot;&gt;服务A —— 资源1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n    &lt;li&gt;&lt;a href&#x3D;&quot;.&#x2F;server&#x2F;a&#x2F;resource2&quot;&gt;服务A —— 资源2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n    &lt;li&gt;&lt;a href&#x3D;&quot;.&#x2F;server&#x2F;a&#x2F;resource3&quot;&gt;服务A —— 资源3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n    &lt;li&gt;&lt;a href&#x3D;&quot;.&#x2F;server&#x2F;a&#x2F;publicResource&quot;&gt;服务A —— 公共资源&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>创建 IndexController，跳转到 index.html</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class IndexController &#123;\n\n\t@GetMapping(&quot;&#x2F;&quot;)\n\tpublic String root() &#123;\n\t\treturn &quot;redirect:&#x2F;index&quot;;\n\t&#125;\n\n\t@GetMapping(&quot;&#x2F;index&quot;)\n\tpublic String index(Model model) &#123;\n\t\tMap&lt;String, Object&gt; map &#x3D; MapUtil.map(false);\n\n\t\tAuthentication auth &#x3D; SecurityContextHolder.getContext().getAuthentication();\n\t\tmap.put(&quot;name&quot;, auth.getName());\n\n\t\tCollection&lt;? extends GrantedAuthority&gt; authorities &#x3D; auth.getAuthorities();\n\t\tList&lt;? extends GrantedAuthority&gt; authoritiesList &#x3D; authorities.stream().collect(Collectors.toList());\n\t\tmap.put(&quot;authorities&quot;, authoritiesList);\n\n\t\tmodel.addAttribute(&quot;user&quot;, JSONUtil.toJsonStr(map));\n\t\treturn &quot;index&quot;;\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"3-5-ResourceController\"><a href=\"#3-5-ResourceController\" class=\"headerlink\" title=\"3.5 ResourceController\"></a>3.5 ResourceController</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ResourceController &#123;\n\n    @GetMapping(&quot;&#x2F;server&#x2F;a&#x2F;resource1&quot;)\n    public String getServerARes1(@RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient oAuth2AuthorizedClient) &#123;\n        return getServer(&quot;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;resource1&quot;, oAuth2AuthorizedClient);\n    &#125;\n\n    @GetMapping(&quot;&#x2F;server&#x2F;a&#x2F;resource2&quot;)\n    public String getServerARes2(@RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient oAuth2AuthorizedClient) &#123;\n        return getServer(&quot;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;resource2&quot;, oAuth2AuthorizedClient);\n    &#125;\n\n    @GetMapping(&quot;&#x2F;server&#x2F;a&#x2F;resource3&quot;)\n    public String getServerBRes1(@RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient oAuth2AuthorizedClient) &#123;\n        return getServer(&quot;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;resource3&quot;, oAuth2AuthorizedClient);\n    &#125;\n\n    @GetMapping(&quot;&#x2F;server&#x2F;a&#x2F;publicResource&quot;)\n    public String getServerBRes2(@RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient oAuth2AuthorizedClient) &#123;\n        return getServer(&quot;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;publicResource&quot;, oAuth2AuthorizedClient);\n    &#125;\n\n    &#x2F;**\n     * 绑定token，请求微服务\n     *&#x2F;\n    private String getServer(String url, OAuth2AuthorizedClient oAuth2AuthorizedClient) &#123;\n        LogUtil.info(&quot;getServer&quot;);\n        &#x2F;&#x2F; 获取 access_token\n        String tokenValue &#x3D; oAuth2AuthorizedClient.getAccessToken().getTokenValue();\n\n        &#x2F;&#x2F; 发起请求\n        Mono&lt;String&gt; stringMono &#x3D; WebClient.builder()\n                .defaultHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + tokenValue)\n                .build()\n                .get()\n                .uri(url)\n                .retrieve()\n                .bodyToMono(String.class);\n\n        return stringMono.block();\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"3-6-测试\"><a href=\"#3-6-测试\" class=\"headerlink\" title=\"3.6 测试\"></a>3.6 测试</h2><p>完整目录结构如下：</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143026.png\"></p>\n<p>启动项目，访问 <code>127.0.0.1:8000</code>，未登录会直接跳转到登录页面</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143037.png\"></p>\n<p>输入用户名密码，登录后进入授权页面</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143049.png\"></p>\n<p>选择想要授予的权限，这里勾选 read 权限，点击提交，跳转到我们的首页 index.html</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143102.png\"></p>\n<p>将上面 user 的 JSON 信息格式化一下如下，可以看到就是我们的认证和权限信息</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143113.png\"></p>\n<p>点击访问 服务A -&gt; 资源1</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143124.png\"></p>\n<p>点击访问 服务A -&gt; 资源2，无法访问</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143136.png\"></p>\n<p>这是因为之前授权时只给了 read 权限，而资源 2 需要 write 权限，可以看到报了 403 异常，这里可以定义一个异常处理类，来返回对应的信息，而不是白页</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143152.png\"></p>\n<p>我们关闭当前页面新开一个页面，再次访问 <code>127.0.0.1:8000</code> 可以发现直接进入了 index.html，无需再次登录</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143208.png\"></p>\n<p>可以发现我们访问时是带了一个 JESSEIONID 的，用户登录后，会在认证服务器和客户端都保存 session 信息</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230414143220.png\"></p>\n","feature":false,"text":"1. 授权服务器目前 Spring 生态中的 OAuth2 授权服务器是 Spring Authorization Server，原先的 Spring Security OAuth 已经停止更新 1.1 引入依赖这里的 spring-security-oauth2-authori...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[{"name":"开发实践","slug":"开发实践","count":6,"path":"api/categories/开发实践.json"}],"tags":[{"name":"OAuth2.0","slug":"OAuth2-0","count":2,"path":"api/tags/OAuth2-0.json"},{"name":"Spring Authorization Server","slug":"Spring-Authorization-Server","count":1,"path":"api/tags/Spring-Authorization-Server.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">1. 授权服务器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">1.2 配置类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-1-%E6%9C%80%E5%B0%8F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.2.1 最小配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-2-ServerSecurityConfig\"><span class=\"toc-text\">1.2.2 ServerSecurityConfig</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-3-AuthorizationServerConfig\"><span class=\"toc-text\">1.2.3 AuthorizationServerConfig</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8\"><span class=\"toc-text\">1.3 创建数据库表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E5%92%8C%E6%8E%88%E6%9D%83%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">1.4 自定义登录和授权页面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-ServerController\"><span class=\"toc-text\">1.5 ServerController</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-YAML-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.6 YAML 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">1.7 测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-1-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">1.7.1 添加用户和客户端信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-2-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\"><span class=\"toc-text\">1.7.2 授权码模式获取令牌</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-3-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E5%88%B7%E6%96%B0%E4%BB%A4%E7%89%8C\"><span class=\"toc-text\">1.7.3 授权码模式刷新令牌</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-4-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1.7.4 客户端模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-5-OIDC\"><span class=\"toc-text\">1.7.5 OIDC</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">2. 资源服务器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-YAML-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.2 YAML 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2.3 异常处理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2.3.1 认证失败处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2.3.2 鉴权失败处理器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">2.4 配置类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-Controller\"><span class=\"toc-text\">2.5 Controller</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">2.6 测试</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">3. 客户端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-YAML-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.2 YAML 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3.3 配置类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-index-html\"><span class=\"toc-text\">3.4 index.html</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-ResourceController\"><span class=\"toc-text\">3.5 ResourceController</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">3.6 测试</span></a></li></ol></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"Java进阶使用记录","uid":"9f7419bdbcee20c9483c8a0576ef5202","slug":"BlogRepository/Java/Java进阶使用记录","date":"2022-03-08T16:26:17.000Z","updated":"2023-04-20T13:57:44.601Z","comments":true,"path":"api/articles/BlogRepository/Java/Java进阶使用记录.json","keywords":null,"cover":"https://cover.png","text":"1. Asset 断言用于对值进行判断，为真则运行，否则报错，多用于调试 Assert.isNull(null, &quot;是否为空&quot;); &#x2F;&#x2F; 为空则运行 Assert.notNull(&quot;&quot;, &quot;是否不为空&quot...","link":"","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"40 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":12,"path":"api/tags/Java.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":true},"next_post":{"title":"Navicat15 安装及激活总结","uid":"3497c014929691d338a902c1115e19bb","slug":"BlogRepository/开发工具及环境/Navicat15 安装及激活总结","date":"2023-02-26T19:39:24.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/开发工具及环境/Navicat15 安装及激活总结.json","keywords":null,"cover":"https://cover.png","text":"1. 安装1、首先获取安装程序，另一个为注册机 2、双击安装程序，下一步 3、同意，下一步 4、选择安装路径，下一步 5、默认，下一步 6、下一步 7、开始安装 8、完成 2. 注册激活1、双击打开注册机 2、选择匹配的版本，Patch 3、选择 Navicat 安装目录的启动程...","link":"","photos":[],"count_time":{"symbolsCount":413,"symbolsTime":"1 mins."},"categories":[{"name":"开发工具及环境","slug":"开发工具及环境","count":11,"path":"api/categories/开发工具及环境.json"}],"tags":[{"name":"Navicat","slug":"Navicat","count":1,"path":"api/tags/Navicat.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}