{"title":"轻量应用服务器部署 SpringBoot 前后端分离项目","uid":"5a21c09ba3fee0fc771792aaefbd27f1","slug":"BlogRepository/服务器/轻量应用服务器部署 SpringBoot 前后端分离项目","date":"2022-02-09T15:59:34.000Z","updated":"2023-03-13T19:13:04.964Z","comments":true,"path":"api/articles/BlogRepository/服务器/轻量应用服务器部署 SpringBoot 前后端分离项目.json","keywords":null,"cover":"https://cover.png","content":"<p><strong>部署 Nginx 见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/122767405\">轻量应用服务器使用总结</a></strong></p>\n<h1 id=\"1-前端项目部署\"><a href=\"#1-前端项目部署\" class=\"headerlink\" title=\"1. 前端项目部署\"></a>1. 前端项目部署</h1><p>1、这里使用的是 vue 项目，运行 <code>npm run build</code>，会生成一个 dist 文件夹<br><img src=\"https://img-blog.csdnimg.cn/9214dafaf7334639be2b8a30d8d92078.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/74dc140281664039b6154c1720e947ba.png\" alt=\"在这里插入图片描述\"><br>2、把文件上传到服务器 Nginx 安装目录的 html 目录下，先压缩成 ZIP 包上传然后再解压，然后重命名为 blog（这里的文件路径与 Nginx 配置文件的路径对应即可）<br><img src=\"https://img-blog.csdnimg.cn/226c813410014b1da08d1cbd3ca92165.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/88006fef55834cacb3f14f9db0de8b0c.png\" alt=\"在这里插入图片描述\"><br>3、修改 Nginx 配置文件，<code>/usr/java/nginx-1.22.0/conf/nginx.conf</code><br><img src=\"https://img-blog.csdnimg.cn/fbc9f2284e444584a1d7dc79dc26bc45.png\" alt=\"在这里插入图片描述\"><br>4、Nginx 没有启动的直接启动 Nginx，已经启动的运行 <code>./nginx -s reload</code> 更新配置文件，指令见 6.2<br><img src=\"https://img-blog.csdnimg.cn/1a7a609ca77f407fad71ae01772304ca.png\" alt=\"在这里插入图片描述\"><br>5、在防火墙里放开对应的端口<br><img src=\"https://img-blog.csdnimg.cn/4d448b3fecdc42e4ba5a9b195d3e9fe5.png\" alt=\"在这里插入图片描述\"><br>6、通过浏览器地址加端口号即可访问，这里因为还没有后端，所以页面没有数据<br><img src=\"https://img-blog.csdnimg.cn/7b1776e35b004c499b4ffceb6c06f8a5.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-后端项目部署\"><a href=\"#2-后端项目部署\" class=\"headerlink\" title=\"2. 后端项目部署\"></a>2. 后端项目部署</h1><p>1、上传jar包<br>在 Maven 里点击 package，将项目打包<br><img src=\"https://img-blog.csdnimg.cn/e84d635193204d4bbd506e561dc34f82.png\" alt=\"在这里插入图片描述\"><br>在项目路径下的 target 文件夹中会有一个 jar 文件<br><img src=\"https://img-blog.csdnimg.cn/0abb9273cd3e4109a48bdbf1be69b8fd.png\" alt=\"在这里插入图片描述\"><br>将该文件上传到服务器<br><img src=\"https://img-blog.csdnimg.cn/deacc06268754b3fa146bbe4d56fc38e.png\" alt=\"在这里插入图片描述\"><br>2、启动项目<br>进入 jar 包所在文件夹，执行 <code>java -jar FanBlog-0.0.1-SNAPSHOT.jar</code>，启动项目，使用服务器地址加项目中设置的内置 Tomcat 的端口即可访问。端口需要在防火墙里开放。<br><strong>但这种方式关闭终端 Tomcat 就停止了，关闭后项目不能再访问。</strong></p>\n<p>可以使用 <code>nohup java -jar FanBlog-0.0.1-SNAPSHOT.jar</code> 启动，nohup 表示将该程序在后台一直运行，即使退出终端，项目也可以访问。<br><img src=\"https://img-blog.csdnimg.cn/9509e0687b42481ba437371d637bf08b.png\" alt=\"在这里插入图片描述\"><br>同时会在 jar 包所在目录生成一个 nohup.out 文件，记录运行过程中的信息<br>3、关闭<br>要关闭项目可以使用 <code>ps -ef | grep 进程名称关键字</code>，显示进程相关信息<br><img src=\"https://img-blog.csdnimg.cn/d0166747c3484ed6833333dbb823825a.png\" alt=\"在这里插入图片描述\"><br>然后使用 <code>kill -9 进程id</code>，关闭进程，项目停止。<br><img src=\"https://img-blog.csdnimg.cn/635e51b929d14deba0c1926f606d6a89.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-使用-Nginx-反向代理解决跨域\"><a href=\"#3-使用-Nginx-反向代理解决跨域\" class=\"headerlink\" title=\"3. 使用 Nginx 反向代理解决跨域\"></a>3. 使用 Nginx 反向代理解决跨域</h1><p>修改 Nginx 的配置文件 <code>/usr/java/nginx-1.22.0/conf/nginx.conf</code> ，在前面前端项目 Nginx 配置的基础上，加上一个反向代理的配置<br><img src=\"https://img-blog.csdnimg.cn/f78aa7e823b94905b09cde15802133e4.png\" alt=\"在这里插入图片描述\"><br>当请求路径为 <code>/fanBlog</code> 时，将请求代理到8001端口，即后端运行端口，再刷新 Nginx 配置，访问前端页面即可看到后端返回数据<br><img src=\"https://img-blog.csdnimg.cn/998cdaa10c71487a86d12d6603b71f47.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-配置域名访问\"><a href=\"#4-配置域名访问\" class=\"headerlink\" title=\"4. 配置域名访问\"></a>4. 配置域名访问</h1><p>先配置域名解析到服务器<br><img src=\"https://img-blog.csdnimg.cn/b5361a06b91645038940f291da2c4e3c.png\" alt=\"在这里插入图片描述\"><br>修改 Nginx 配置文件，将 <code>server_name</code> 修改为域名地址<br><img src=\"https://img-blog.csdnimg.cn/c3e59b1ec079487d9c6be88450fc782b.png\" alt=\"在这里插入图片描述\"><br>即可通过域名加端口访问，这里设置端口为 80，即可省略端口号，直接通过域名访问<br><img src=\"https://img-blog.csdnimg.cn/b13ba5c050734265b756bd8bdeb49c04.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"5-配置-SSL-证书\"><a href=\"#5-配置-SSL-证书\" class=\"headerlink\" title=\"5. 配置 SSL 证书\"></a>5. 配置 SSL 证书</h1><p>1、先下载 Nginx 服务器类型证书，上传到服务器<br><img src=\"https://img-blog.csdnimg.cn/fac9ee4b71c044ecadaaa3a8f3f878b9.png\" alt=\"在这里插入图片描述\"><br>2、解压<br><img src=\"https://img-blog.csdnimg.cn/186753a9817a42eaa0155691c9ef4220.png\" alt=\"在这里插入图片描述\"><br>3、移动文件<br><img src=\"https://img-blog.csdnimg.cn/36a9afe0081d4c3e80a29fe383c2eafc.png\" alt=\"在这里插入图片描述\"><br>3、在 Nginx 配置文件里配置证书以及修改其他配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 设置 HTTP 请求自动跳转 HTTPS（可选）\nserver &#123;\n\tlisten 80;\n\t# 证书绑定的域名，例如：cloud.tencent.com\n\tserver_name cloud.tencent.com;\n\t# 将 http 的域名请求转成 https\n\treturn 301 https:&#x2F;&#x2F;$host$request_uri;\n&#125;\nserver &#123;\n\t# SSL 端口\n\tlisten 443 ssl;\n\t# 证书绑定的域名，例如：cloud.tencent.com\n\tserver_name  cloud.tencent.com;\n\t      \n\t# 证书文件名称\n\tssl_certificate      ..&#x2F;certificate&#x2F;cloud.tencent.com_bundle.pem;\n\t# 私钥文件名称\n\tssl_certificate_key  ..&#x2F;certificate&#x2F;cloud.tencent.com.key;\n\n\t# 默认配置\n\tssl_session_cache    shared:SSL:1m;\n\tssl_session_timeout  5m;\n\tssl_ciphers  HIGH:!aNULL:!MD5;\n\tssl_prefer_server_ciphers  on;\n\t......\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/653569838c3c46ce86d966d29ab31a0f.png\" alt=\"在这里插入图片描述\"><br>刷新 Nginx 配置，即可通过 HTTPS 访问<br><img src=\"https://img-blog.csdnimg.cn/35a66c9f31b2447c9586f5be9f1fca9a.png\" alt=\"在这里插入图片描述\"></p>\n","feature":false,"text":"部署 Nginx 见：轻量应用服务器使用总结 1. 前端项目部署1、这里使用的是 vue 项目，运行 npm run build，会生成一个 dist 文件夹2、把文件上传到服务器 Nginx 安装目录的 html 目录下，先压缩成 ZIP 包上传然后再解压，然后重命名为 blo...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"服务器","slug":"服务器","count":3,"path":"api/categories/服务器.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":4,"path":"api/tags/SpringBoot.json"},{"name":"服务器","slug":"服务器","count":3,"path":"api/tags/服务器.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">1. 前端项目部署</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">2. 后端项目部署</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8-Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">3. 使用 Nginx 反向代理解决跨域</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">4. 配置域名访问</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E9%85%8D%E7%BD%AE-SSL-%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">5. 配置 SSL 证书</span></a></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"电脑软件有网但访问网址显示未连接问题解决","uid":"c1bfd81bf358c0811575f4b1b2b672c7","slug":"BlogRepository/问题记录/电脑软件有网但访问网址显示未连接问题解决","date":"2022-02-10T04:45:04.000Z","updated":"2023-03-13T19:13:04.973Z","comments":true,"path":"api/articles/BlogRepository/问题记录/电脑软件有网但访问网址显示未连接问题解决.json","keywords":null,"cover":"https://cover.png","text":"1. 运行 Windows 网络诊断，查看详情 2. 打开控制面板点击网络和 Internet 3. 点击Internet选项 4. 在连接界面点击局域网设置 5. 取消勾选 为 LAN 使用代理服务器确定，保存退出。 ","link":"","photos":[],"count_time":{"symbolsCount":110,"symbolsTime":"1 mins."},"categories":[{"name":"问题记录","slug":"问题记录","count":7,"path":"api/categories/问题记录.json"}],"tags":[{"name":"Windows","slug":"Windows","count":3,"path":"api/tags/Windows.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"Git总结","uid":"6307e383010802622c546f5e2b5cd218","slug":"BlogRepository/开发工具及环境/Git总结","date":"2022-01-26T15:54:45.000Z","updated":"2023-03-13T19:13:04.953Z","comments":true,"path":"api/articles/BlogRepository/开发工具及环境/Git总结.json","keywords":null,"cover":"https://cover.png","text":"1. 下载点击https://git-scm.com/downloads，前往下载页面这里选择 Windows，选择对应的位数下载 2. 安装选择安装组件，NextNext选择在 Git 中使用的编辑器，按自己选择，Next或者选择自定义编辑器 选择 Git init 命令后分支...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"开发技术及框架","slug":"开发技术及框架","count":8,"path":"api/categories/开发技术及框架.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}