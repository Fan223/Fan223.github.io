{"title":"轻量应用服务器部署 SpringBoot 前后端分离项目","uid":"5a21c09ba3fee0fc771792aaefbd27f1","slug":"BlogRepository/服务器/轻量应用服务器部署 SpringBoot 前后端分离项目","date":"2022-02-09T15:59:34.000Z","updated":"2023-04-20T15:27:24.084Z","comments":true,"path":"api/articles/BlogRepository/服务器/轻量应用服务器部署 SpringBoot 前后端分离项目.json","keywords":null,"cover":"https://cover.png","content":"<p><strong>部署 Nginx 见：<a href=\"https://blog.csdn.net/ACE_U_005A/article/details/122767405\">轻量应用服务器使用总结</a></strong></p>\n<h1 id=\"1-前端项目部署\"><a href=\"#1-前端项目部署\" class=\"headerlink\" title=\"1. 前端项目部署\"></a>1. 前端项目部署</h1><p>1、这里使用的是 vue 项目，运行 <code>npm run build</code>，会生成一个 dist 文件夹</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201248.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201300.png\"></p>\n<p>2、把文件上传到服务器 Nginx 安装目录的 html 目录下，先压缩成 ZIP 包上传然后再解压，然后重命名为 blog（这里的文件路径与 Nginx 配置文件的路径对应即可）</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201315.png\"></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201326.png\"></p>\n<p>3、修改 Nginx 配置文件，<code>/usr/java/nginx-1.22.0/conf/nginx.conf</code></p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201344.png\"></p>\n<p><strong>注意：</strong> 假如 Vue 项目使用的是 WebHistory 模式，这样配置刷新会存在 404 问题，因为 Web 单页面开发模式，只有一个 index.html 入口，其他路径是前端路由去跳转的，Nginx 没有对应这个路径，所以就是 404 了，此时需要加上一个配置，读取 index.html 文件</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230420232115.png\"></p>\n<p>如果使用 Hash 模式，似乎不会出现这个问题</p>\n<p>4、Nginx 没有启动的直接启动 Nginx，已经启动的运行 <code>./nginx -s reload</code> 更新配置文件，指令见 6.2</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201354.png\"></p>\n<p>5、在防火墙里放开对应的端口</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201404.png\"></p>\n<p>6、通过浏览器地址加端口号即可访问，这里因为还没有后端，所以页面没有数据</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201414.png\"></p>\n<h1 id=\"2-后端项目部署\"><a href=\"#2-后端项目部署\" class=\"headerlink\" title=\"2. 后端项目部署\"></a>2. 后端项目部署</h1><p>1、上传jar包</p>\n<p>在 Maven 里点击 package，将项目打包</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201516.png\"></p>\n<p>在项目路径下的 target 文件夹中会有一个 jar 文件</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201528.png\"></p>\n<p>将该文件上传到服务器</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201539.png\"></p>\n<p>2、启动项目<br>进入 jar 包所在文件夹，执行 <code>java -jar FanBlog-0.0.1-SNAPSHOT.jar</code>，启动项目，使用服务器地址加项目中设置的内置 Tomcat 的端口即可访问。端口需要在防火墙里开放</p>\n<p><strong>但这种方式关闭终端 Tomcat 就停止了，关闭后项目不能再访问。</strong></p>\n<p>可以使用 <code>nohup java -jar FanBlog-0.0.1-SNAPSHOT.jar</code> 启动，nohup 表示将该程序在后台一直运行，即使退出终端，项目也可以访问</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201602.png\"></p>\n<p>同时会在 jar 包所在目录生成一个 nohup.out 文件，记录运行过程中的信息</p>\n<p>3、关闭</p>\n<p>要关闭项目可以使用 <code>ps -ef | grep 进程名称关键字</code>，显示进程相关信息</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201620.png\"></p>\n<p>然后使用 <code>kill -9 进程id</code>，关闭进程，项目停止</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201633.png\"></p>\n<h1 id=\"3-使用-Nginx-反向代理解决跨域\"><a href=\"#3-使用-Nginx-反向代理解决跨域\" class=\"headerlink\" title=\"3. 使用 Nginx 反向代理解决跨域\"></a>3. 使用 Nginx 反向代理解决跨域</h1><p>修改 Nginx 的配置文件 <code>/usr/java/nginx-1.22.0/conf/nginx.conf</code> ，在前面前端项目 Nginx 配置的基础上，加上一个反向代理的配置</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201647.png\"></p>\n<p>当请求路径为 <code>/fanBlog</code> 时，将请求代理到8001端口，即后端运行端口，再刷新 Nginx 配置，访问前端页面即可看到后端返回数据</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201700.png\"></p>\n<h1 id=\"4-配置域名访问\"><a href=\"#4-配置域名访问\" class=\"headerlink\" title=\"4. 配置域名访问\"></a>4. 配置域名访问</h1><p>先配置域名解析到服务器</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201713.png\"></p>\n<p>修改 Nginx 配置文件，将 <code>server_name</code> 修改为域名地址</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201725.png\"></p>\n<p>即可通过域名加端口访问，这里设置端口为 80，即可省略端口号，直接通过域名访问</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201737.png\"></p>\n<h1 id=\"5-配置-SSL-证书\"><a href=\"#5-配置-SSL-证书\" class=\"headerlink\" title=\"5. 配置 SSL 证书\"></a>5. 配置 SSL 证书</h1><p>1、先下载 Nginx 服务器类型证书，上传到服务器</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201747.png\"></p>\n<p>2、解压</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201759.png\"></p>\n<p>3、移动文件</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201811.png\"></p>\n<p>3、在 Nginx 配置文件里配置证书以及修改其他配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 设置 HTTP 请求自动跳转 HTTPS（可选）\nserver &#123;\n\tlisten 80;\n\t# 证书绑定的域名，例如：cloud.tencent.com\n\tserver_name cloud.tencent.com;\n\t# 将 http 的域名请求转成 https\n\treturn 301 https:&#x2F;&#x2F;$host$request_uri;\n&#125;\nserver &#123;\n\t# SSL 端口\n\tlisten 443 ssl;\n\t# 证书绑定的域名，例如：cloud.tencent.com\n\tserver_name  cloud.tencent.com;\n\t  \n\t# 证书文件名称\n\tssl_certificate      ..&#x2F;certificate&#x2F;cloud.tencent.com_bundle.pem;\n\t# 私钥文件名称\n\tssl_certificate_key  ..&#x2F;certificate&#x2F;cloud.tencent.com.key;\n\n\t# 默认配置\n\tssl_session_cache    shared:SSL:1m;\n\tssl_session_timeout  5m;\n\tssl_ciphers  HIGH:!aNULL:!MD5;\n\tssl_prefer_server_ciphers  on;\n\t......\n&#125;</code></pre>\n\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201824.png\"></p>\n<p>刷新 Nginx 配置，即可通过 HTTPS 访问</p>\n<p><img src=\"http://img.fan223.cn/2023/04/20230419201836.png\"></p>\n","feature":false,"text":"部署 Nginx 见：轻量应用服务器使用总结 1. 前端项目部署1、这里使用的是 vue 项目，运行 npm run build，会生成一个 dist 文件夹 2、把文件上传到服务器 Nginx 安装目录的 html 目录下，先压缩成 ZIP 包上传然后再解压，然后重命名为 bl...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"服务器","slug":"服务器","count":4,"path":"api/categories/服务器.json"}],"tags":[{"name":"服务器","slug":"服务器","count":5,"path":"api/tags/服务器.json"},{"name":"SpringBoot","slug":"SpringBoot","count":4,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">1. 前端项目部署</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">2. 后端项目部署</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8-Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">3. 使用 Nginx 反向代理解决跨域</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">4. 配置域名访问</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E9%85%8D%E7%BD%AE-SSL-%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">5. 配置 SSL 证书</span></a></li></ol>","author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"mapped":true,"prev_post":{"title":"电脑软件有网但访问网址显示未连接问题解决","uid":"c1bfd81bf358c0811575f4b1b2b672c7","slug":"BlogRepository/问题记录/电脑软件有网但访问网址显示未连接问题解决","date":"2022-02-10T04:45:04.000Z","updated":"2023-04-20T13:57:44.648Z","comments":true,"path":"api/articles/BlogRepository/问题记录/电脑软件有网但访问网址显示未连接问题解决.json","keywords":null,"cover":"https://cover.png","text":"1. 运行 Windows 网络诊断，查看详情 2. 打开控制面板点击网络和 Internet 3. 点击Internet选项 4. 在连接界面点击局域网设置 5. 取消勾选 为 LAN 使用代理服务器 确定，保存退出。 ","link":"","photos":[],"count_time":{"symbolsCount":112,"symbolsTime":"1 mins."},"categories":[{"name":"问题记录","slug":"问题记录","count":7,"path":"api/categories/问题记录.json"}],"tags":[{"name":"Windows","slug":"Windows","count":3,"path":"api/tags/Windows.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false},"next_post":{"title":"服务器 Nacos 集群搭建及使用总结","uid":"77e6eaf05689d833633a4c139786f8ac","slug":"BlogRepository/服务器/服务器 Nacos 集群搭建及使用总结","date":"2022-02-07T15:46:19.000Z","updated":"2023-04-20T13:57:44.632Z","comments":true,"path":"api/articles/BlogRepository/服务器/服务器 Nacos 集群搭建及使用总结.json","keywords":null,"cover":"https://cover.png","text":"1. 架构图 实际使用： 2. 下载官网地址：home (nacos.io) GitHub 下载地址：Releases · alibaba&#x2F;nacos (github.com) 选择对应版本进行下载，下载有可能会很慢 3. 单机模式1、下载完成后上传到服务器 2、解压文...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"服务器","slug":"服务器","count":4,"path":"api/categories/服务器.json"}],"tags":[{"name":"服务器","slug":"服务器","count":5,"path":"api/tags/服务器.json"},{"name":"Nacos","slug":"Nacos","count":1,"path":"api/tags/Nacos.json"}],"author":{"name":"凡","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/Fan223","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/ACE_U_005A","juejin":"https://juejin.cn/user/1873223546578589","customs":{}}},"feature":false}}